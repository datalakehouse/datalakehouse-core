{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json", "dbt_version": "0.21.1", "generated_at": "2022-03-01T13:27:05.095979Z", "invocation_id": "7d28b14e-43fe-4a38-9e16-b9ee690ffed5", "env": {}, "project_id": "87a161afd1ee6eb5247c2bdcf1288c37", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.snowflake_aicd.V_OPPORTUNITIES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','OPPORTUNITY')}}\n),\ncampaign AS (\n  SELECT * FROM  {{ref('W_CAMPAIGNS_F')}}\n),\naccount AS (\n  SELECT * FROM  {{ref('W_ACCOUNTS_D')}}\n),\ncontact AS (\n  SELECT * FROM  {{ref('W_CONTACTS_D')}}\n),\nuser AS (\n  SELECT * FROM  {{ref('W_USERS_D')}}\n),\nrename AS \n(\nSELECT\n    --DLHK\n    MD5(S.ID) AS K_OPPORTUNITY_DLHK\n    ,A.K_ACCOUNT_DLHK\n    ,CO.K_CONTACT_DLHK\n    ,C.K_CAMPAIGN_DLHK                \n    ,U.K_USER_DLHK AS K_OWNER_USER_DLHK\n    ,U2.K_USER_DLHK AS K_CREATED_BY_USER_DLHK\n    ,U3.K_USER_DLHK AS K_MODIFIED_BY_USER_DLHK\n    --BUSINESS KEYS\n    ,S.ID AS K_OPPORTUNITY_BK\n    ,A.K_ACCOUNT_BK\n    ,CO.K_CONTACT_BK\n    ,C.K_CAMPAIGN_BK        \n    ,U.K_USER_BK AS K_OWNER_USER_BK\n    ,U2.K_USER_BK AS K_CREATED_BY_USER_BK\n    ,U3.K_USER_BK AS K_MODIFIED_BY_USER_BK\n    ,S.PRICEBOOK2ID AS K_PRICEBOOK2_BK\n    ,S.LASTAMOUNTCHANGEDHISTORYID AS K_LAST_AMOUNT_CHANGED_HISTORY_BK\n    ,S.LASTCLOSEDATECHANGEDHISTORYID AS K_LAST_CLOSE_DATE_CHANGED_HISTORY_BK\n    --ATTRIBUTES\n    ,S.CLOSEDATE AS A_CLOSE_DATE\n    ,CASE\n        when S.ISWON then 'Won'\n        when not S.ISWON and S.ISCLOSED then 'Lost'\n        when not S.ISCLOSED and lower(S.FORECASTCATEGORY) in ('pipeline','forecast','bestcase') then 'Pipeline'\n        else 'Other'\n      end as A_OPPORTUNITY_STATUS\n      --QUOTES (HISTORY?) \n    ,S.CREATEDDATE AS A_CREATED_DATE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.FISCAL AS A_FISCAL\n    ,S.FORECASTCATEGORY AS A_FORECAST_CATEGORY\n    ,S.FORECASTCATEGORYNAME AS A_FORECAST_CATEGORY_NAME\n    ,S.LASTACTIVITYDATE AS A_LAST_ACTIVITY_DATE\n    ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\n    ,S.LASTREFERENCEDDATE AS A_LAST_REFERENCED_DATE\n    ,S.LASTSTAGECHANGEDATE AS A_LAST_STAGE_CHANGE_DATE\n    ,S.LASTVIEWEDDATE AS A_LAST_VIEWED_DATE\n    ,S.LEADSOURCE AS A_LEAD_SOURCE\n    ,S.NAME AS A_NAME\n    ,S.NEXTSTEP AS A_NEXT_STEP\n    --,S.NYN__CURRENTGENERATORS__C AS A_NYN__CURRENTGENERATORS__C\n    --,S.NYN__DELIVERYINSTALLATIONSTATUS__C AS A_NYN__DELIVERYINSTALLATIONSTATUS__C\n    --,S.NYN__MAINCOMPETITORS__C AS A_NYN__MAINCOMPETITORS__C\n    --,S.NYN__ORDERNUMBER__C AS A_NYN__ORDERNUMBER__C\n    --,S.NYN__TRACKINGNUMBER__C AS A_NYN__TRACKINGNUMBER__C\n    ,S.STAGENAME AS A_STAGE_NAME\n    ,S.SYSTEMMODSTAMP AS A_SYSTEM_MOD_STAMP\n    ,S.FISCALQUARTER AS A_FISCALQUARTER\n    ,S.FISCALYEAR AS A_FISCALYEAR\n    ,S.TYPE AS A_TYPE\n    ,S.HASOPENACTIVITY AS B_HAS_OPEN_ACTIVITY\n    ,S.HASOPPORTUNITYLINEITEM AS B_HAS_OPPORTUNITY_LINE_ITEM\n    ,S.HASOVERDUETASK AS B_HAS_OVERDUE_TASK\n    ,S.ISCLOSED AS B_IS_CLOSED\n    ,S.ISDELETED AS B_IS_DELETED\n    ,S.ISPRIVATE AS B_IS_PRIVATE\n    ,S.ISWON AS B_IS_WON\n    ,S.AMOUNT AS M_AMOUNT\n    ,S.EXPECTEDREVENUE AS M_EXPECTED_REVENUE\n    ,S.PROBABILITY AS M_PROBABILITY\n    ,S.PUSHCOUNT AS M_PUSH_COUNT\n    ,S.TOTALOPPORTUNITYQUANTITY AS M_TOTAL_OPPORTUNITY_QUANTITY\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM source S\n    LEFT JOIN user U ON U.K_USER_BK = S.OWNERID\n    LEFT JOIN user U2 ON U2.K_USER_BK = S.CREATEDBYID\n    LEFT JOIN user U3 ON U3.K_USER_BK = S.LASTMODIFIEDBYID\n    LEFT JOIN campaign C ON C.K_CAMPAIGN_BK = S.CAMPAIGNID\n    LEFT JOIN account A ON A.K_ACCOUNT_BK = S.ACCOUNTID\n    LEFT JOIN contact CO ON CO.K_CONTACT_BK = S.CONTACTID\nWHERE\n    NOT(S.ISDELETED)\n) \n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.OPPORTUNITY", "model.snowflake_aicd.W_CAMPAIGNS_F", "model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_USERS_D"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "OPPORTUNITIES", "V_OPPORTUNITIES_STG"], "unique_id": "model.snowflake_aicd.V_OPPORTUNITIES_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/OPPORTUNITIES/V_OPPORTUNITIES_STG.sql", "original_file_path": "models/staging/OPPORTUNITIES/V_OPPORTUNITIES_STG.sql", "name": "V_OPPORTUNITIES_STG", "alias": "V_OPPORTUNITIES_STG", "checksum": {"name": "sha256", "checksum": "e5a35f6956d3ff5dbf37c902b135386aa1348615286ebaea28e6c63f060b8071"}, "tags": ["staging", "daily"], "refs": [["W_CAMPAIGNS_F"], ["W_ACCOUNTS_D"], ["W_CONTACTS_D"], ["W_USERS_D"]], "sources": [["DEMO_SALESFORCE", "OPPORTUNITY"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_CONTRACTS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','CONTRACT')}}\n),\nusers AS (\n  SELECT * FROM  {{ref('V_USERS_STG')}}\n),\nrename AS \n(\nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.ID, '00000000000000000000000000000000')) ) AS K_CONTRACT_DLHK\n    ,MD5( TRIM(COALESCE(S.ACCOUNTID, '00000000000000000000000000000000')) ) AS K_ACCOUNT_DLHK\n    ,MD5( TRIM(COALESCE(S.ACTIVATEDBYID, '00000000000000000000000000000000')) ) AS K_ACTIVATED_BY_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.COMPANYSIGNEDID, '00000000000000000000000000000000')) ) AS K_COMPANY_SIGNED_DLHK\n    ,MD5( TRIM(COALESCE(S.CREATEDBYID, '00000000000000000000000000000000')) ) AS K_CREATED_BY_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.CUSTOMERSIGNEDID, '00000000000000000000000000000000')) ) AS K_CUSTOMER_SIGNED_DLHK\n    ,MD5( TRIM(COALESCE(S.LASTMODIFIEDBYID, '00000000000000000000000000000000')) ) AS K_LAST_MODIFIED_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.OWNERID, '00000000000000000000000000000000')) ) AS K_OWNER_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.PRICEBOOK2ID, '00000000000000000000000000000000')) ) AS K_PRICEBOOK2_DLHK\n    --BUSINESS KEYS    \n    ,S.ID AS K_CONTRACT_BK\n    ,S.ACCOUNTID AS K_ACCOUNT_BK\n    ,S.ACTIVATEDBYID AS K_ACTIVATED_BY_USER_BK\n    ,S.COMPANYSIGNEDID AS K_COMPANY_SIGNED_BK\n    ,S.CREATEDBYID AS K_CREATED_BY_USER_BK\n    ,S.CUSTOMERSIGNEDID AS K_CUSTOMER_SIGNED_BK\n    ,S.LASTMODIFIEDBYID AS K_LAST_MODIFIED_USER_BK\n    ,S.OWNERID AS K_OWNER_USER_BK\n    ,S.PRICEBOOK2ID AS K_PRICEBOOK2_BK\n    --ATTRIBUTES\n    ,U.A_FULL_NAME AS A_OWNER_FULL_NAME\n    ,S.ACTIVATEDDATE AS A_ACTIVATED_DATE    \n    ,S.BILLINGCITY AS A_BILLING_CITY\n    ,S.BILLINGCOUNTRY AS A_BILLING_COUNTRY\n    ,S.BILLINGGEOCODEACCURACY AS A_BILLING_GEOCODE_ACCURACY\n    ,S.BILLINGPOSTALCODE AS A_BILLING_POSTALCODE\n    ,S.BILLINGSTATE AS A_BILLING_STATE\n    ,S.BILLINGSTREET AS A_BILLING_STREET\n    ,S.COMPANYSIGNEDDATE AS A_COMPANY_SIGNED_DATE\n    ,S.CONTRACTNUMBER AS A_CONTRACT_NUMBER\n    ,S.CREATEDDATE AS A_CREATED_DATE\n    ,S.CUSTOMERSIGNEDDATE AS A_CUSTOMER_SIGNED_DATE\n    ,S.CUSTOMERSIGNEDTITLE AS A_CUSTOMER_SIGNED_TITLE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.ENDDATE AS A_END_DATE\n    ,S.LASTACTIVITYDATE AS A_LAST_ACTIVITY_DATE\n    ,S.LASTAPPROVEDDATE AS A_LAST_APPROVED_DATE\n    ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\n    ,S.LASTREFERENCEDDATE AS A_LAST_REFERENCED_DATE\n    ,S.LASTVIEWEDDATE AS A_LAST_VIEWED_DATE\n    ,S.OWNEREXPIRATIONNOTICE AS A_OWNER_EXPIRATION_NOTICE\n    ,S.SPECIALTERMS AS A_SPECIAL_TERMS\n    ,S.STARTDATE AS A_START_DATE\n    ,S.STATUS AS A_STATUS\n    ,S.STATUSCODE AS A_STATUS_CODE\n    ,S.SYSTEMMODSTAMP AS A_SYSTEM_MODSTAMP\n    ,S.BILLINGLATITUDE AS A_BILLING_LATITUDE\n    ,S.BILLINGLONGITUDE AS A_BILLING_LONGITUDE\n    ,S.CONTRACTTERM AS A_CONTRACT_TERM\n    --BOOLEAN\n    ,S.ISDELETED AS B_IS_DELETED\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM source S\n    LEFT JOIN users U ON U.K_USER_BK = S.OWNERID\nWHERE\n  NOT(S.ISDELETED)\n)\n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.CONTRACT", "model.snowflake_aicd.V_USERS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "CONTRACTS", "V_CONTRACTS_STG"], "unique_id": "model.snowflake_aicd.V_CONTRACTS_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/CONTRACTS/V_CONTRACTS_STG.sql", "original_file_path": "models/staging/CONTRACTS/V_CONTRACTS_STG.sql", "name": "V_CONTRACTS_STG", "alias": "V_CONTRACTS_STG", "checksum": {"name": "sha256", "checksum": "0e1ad1bb190da6c376a4ec0f156f4a7aaf4ea06046156af91403f70fce177f52"}, "tags": ["staging", "daily"], "refs": [["V_USERS_STG"]], "sources": [["DEMO_SALESFORCE", "CONTRACT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_CONTACTS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','CONTACT')}}\n),\nusers AS (\n  SELECT * FROM  {{ref('V_USERS_STG')}}\n),\nrename AS \n(\nSELECT\n    --DLHK\n    MD5(S.ID) AS K_CONTACT_DLHK\n    ,MD5( TRIM(COALESCE(S.ACCOUNTID, '00000000000000000000000000000000'))  ) AS K_ACCOUNT_DLHK\n    ,MD5( TRIM(COALESCE(S.JIGSAWCONTACTID, '00000000000000000000000000000000'))  ) AS K_JIGSAW_CONTACT_DLHK\n    ,MD5( TRIM(COALESCE(S.LASTMODIFIEDBYID, '00000000000000000000000000000000'))  ) AS K_LAST_MODIFIED_BY_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.OWNERID, '00000000000000000000000000000000'))  ) AS K_OWNER_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.REPORTSTOID, '00000000000000000000000000000000'))  ) AS K_REPORTS_TO_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.CREATEDBYID, '00000000000000000000000000000000'))  ) AS K_CREATED_BY_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.INDIVIDUALID, '00000000000000000000000000000000'))  ) AS K_INDIVIDUAL_DLHK\n    --BUSINESS KEYS\n    ,S.ID AS K_CONTACT_BK\n    ,S.ACCOUNTID AS K_ACCOUNT_BK\n    ,S.CREATEDBYID AS K_CREATED_BY_USER_BK    \n    ,S.INDIVIDUALID AS K_INDIVIDUAL_BK\n    ,S.JIGSAWCONTACTID AS K_JIGSAW_CONTACT_BK\n    ,S.LASTMODIFIEDBYID AS K_LAST_MODIFIED_BY_USER_BK\n    ,S.OWNERID AS K_OWNER_USER_BK\n    ,S.REPORTSTOID AS K_REPORTS_TO_USER_BK\n    --ATTRIBUTES\n    ,U.A_FULL_NAME AS A_OWNER_FULL_NAME\n    ,S.ASSISTANTNAME AS A_ASSISTANT_NAME\n    ,S.ASSISTANTPHONE AS A_ASSISTANT_PHONE\n    ,S.BIRTHDATE AS A_BIRTH_DATE\n    ,S.CLEANSTATUS AS A_CLEAN_STATUS\n    ,S.CREATEDDATE AS A_CREATED_DATE\n    ,S.DEPARTMENT AS A_DEPARTMENT\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.EMAIL AS A_EMAIL\n    ,S.EMAILBOUNCEDDATE AS A_EMAIL_BOUNCED_DATE\n    ,S.EMAILBOUNCEDREASON AS A_EMAIL_BOUNCED_REASON\n    ,S.FAX AS A_FAX\n    ,S.FIRSTNAME AS A_FIRST_NAME\n    ,S.HOMEPHONE AS A_HOME_PHONE\n    ,S.JIGSAW AS A_JIGSAW\n    ,S.LASTACTIVITYDATE AS A_LAST_ACTIVITY_DATE\n    ,S.LASTCUREQUESTDATE AS A_LAST_CUREQUEST_DATE\n    ,S.LASTCUUPDATEDATE AS A_LAST_CU_UPDATE_DATE\n    ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\n    ,S.LASTNAME AS A_LAST_NAME\n    ,S.LASTREFERENCEDDATE AS A_LAST_REFERENCED_DATE\n    ,S.LASTVIEWEDDATE AS A_LAST_VIEWED_DATE\n    ,S.LEADSOURCE AS A_LEAD_SOURCE\n    ,S.MAILINGGEOCODEACCURACY AS A_MAILING_GEOCODE_ACCURACY\n    ,S.MAILINGPOSTALCODE AS A_MAILING_POSTALCODE\n    ,S.MAILINGSTATE AS A_MAILING_STATE\n    ,S.MAILINGSTREET AS A_MAILING_STREET\n    ,S.MAILINGCITY AS A_MAILING_CITY\n    ,S.MAILINGCOUNTRY AS A_MAILING_COUNTRY\n    ,S.MAILINGLATITUDE AS A_MAILING_LATITUDE\n    ,S.MAILINGLONGITUDE AS A_MAILING_LONGITUDE\n    ,S.OTHERCITY AS A_OTHER_CITY\n    ,S.OTHERCOUNTRY AS A_OTHER_COUNTRY\n    ,S.OTHERLATITUDE AS A_OTHER_LATITUDE\n    ,S.OTHERLONGITUDE AS A_OTHER_LONGITUDE\n    ,S.OTHERGEOCODEACCURACY AS A_OTHER_GEOCODE_ACCURACY\n    ,S.OTHERPOSTALCODE AS A_OTHER_POSTALCODE\n    ,S.OTHERSTATE AS A_OTHER_STATE\n    ,S.OTHERSTREET AS A_OTHER_STREET\n    ,S.MOBILEPHONE AS A_MOBILE_PHONE\n    ,S.OTHERPHONE AS A_OTHER_PHONE\n    ,S.NAME AS A_NAME\n    --,S.NYN__LANGUAGES__C AS A_NYN__LANGUAGES__C\n    --,S.NYN__LEVEL__C AS A_NYN__LEVEL__C    \n    ,S.PHONE AS A_PHONE\n    ,S.PHOTOURL AS A_PHOTOURL\n    ,S.SALUTATION AS A_SALUTATION\n    ,S.SYSTEMMODSTAMP AS A_SYSTEM_MOD_STAMP\n    ,S.TITLE AS A_TITLE    \n    ,S.ISDELETED AS B_IS_DELETED\n    ,S.ISEMAILBOUNCED AS B_IS_EMAIL_BOUNCED\n     --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM source S\n    LEFT JOIN users U ON U.K_USER_BK = S.OWNERID\nWHERE\n  NOT(S.ISDELETED)\n)\n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.CONTACT", "model.snowflake_aicd.V_USERS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "CONTACTS", "V_CONTACTS_STG"], "unique_id": "model.snowflake_aicd.V_CONTACTS_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/CONTACTS/V_CONTACTS_STG.sql", "original_file_path": "models/staging/CONTACTS/V_CONTACTS_STG.sql", "name": "V_CONTACTS_STG", "alias": "V_CONTACTS_STG", "checksum": {"name": "sha256", "checksum": "a41e37d00769a99ed0a8dd4841a8c274a73d525ef3b655e99be237b140a78a91"}, "tags": ["staging", "daily"], "refs": [["V_USERS_STG"]], "sources": [["DEMO_SALESFORCE", "CONTACT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_CASES_HIERARCHY": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\n-- This is the WITH clause, of course.\nwith recursive cases \n      -- Column names for the \"view\"/CTE\n      (indent, id, parentid, CASENUMBER) \n    as\n      -- Common Table Expression\n      (\n        \n         -- Recursive Clause\n        select '' as INDENT,\n            A.id, A.PARENTID, A.CASENUMBER\n          from {{source('DEMO_SALESFORCE','CASE')}} A\n        where A.parentid is null\n        AND  NOT(A.ISDELETED)\n        \n        union all\n        \n        -- Recursive Clause\n        select INDENT || '- ',\n            A.id, A.PARENTID, A.CASENUMBER\n          from {{source('DEMO_SALESFORCE','CASE')}} A join cases C\n            on A.PARENTID = C.ID\n            WHERE\n            NOT(A.ISDELETED)\n      )\n\n  -- This is the \"main select\".\n  select indent || CASENUMBER as A_CASE_NUMBER_HIERARCHY, id AS K_CASE_BK\n    from cases", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.CASE", "source.snowflake_aicd.DEMO_SALESFORCE.CASE"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "CASES", "V_CASES_HIERARCHY"], "unique_id": "model.snowflake_aicd.V_CASES_HIERARCHY", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/CASES/V_CASES_HIERARCHY.sql", "original_file_path": "models/staging/CASES/V_CASES_HIERARCHY.sql", "name": "V_CASES_HIERARCHY", "alias": "V_CASES_HIERARCHY", "checksum": {"name": "sha256", "checksum": "4d487eb1100c3495e5bacf9a5675b6b21c88d218e6dd2761bf71e3e710ba010e"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_SALESFORCE", "CASE"], ["DEMO_SALESFORCE", "CASE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_CASES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','CASE')}}\n),\nasset AS (\n  SELECT * FROM  {{ref('W_ASSETS_D')}}\n),\naccount AS (\n  SELECT * FROM  {{ref('W_ACCOUNTS_D')}}\n),\ncontact AS (\n  SELECT * FROM  {{ref('W_CONTACTS_D')}}\n),\nuser AS (\n  SELECT * FROM  {{ref('W_USERS_D')}}\n),\nparent_cases AS (\n  SELECT * FROM  {{ref('V_CASES_HIERARCHY')}}\n),\nrename AS \n(\nSELECT\n    --DLHK\n    MD5(S.ID) AS K_CASE_DLHK\n    ,A.K_ACCOUNT_DLHK\n    ,CO.K_CONTACT_DLHK\n    ,U.K_USER_DLHK AS K_OWNER_USER_DLHK\n    ,U2.K_USER_DLHK AS K_CREATED_BY_USER_DLHK\n    ,U3.K_USER_DLHK AS K_MODIFIED_BY_USER_DLHK\n    --BUSINESS KEYS\n    ,S.ID AS K_CASE_BK\n    ,S.ACCOUNTID AS K_ACCOUNT_BK\n    ,S.ASSETID AS K_ASSET_BK\n    ,S.CONTACTID AS K_CONTACT_BK\n    ,S.CREATEDBYID AS K_CREATED_BY_USER_BK  \n    ,S.LASTMODIFIEDBYID AS K_MODIFIED_BY_USER_BK\n    ,S.MASTERRECORDID AS K_MASTER_RECORD_BK\n    ,S.OWNERID AS K_OWNER_USER_BK\n    ,S.PARENTID AS K_PARENT_BK\n    ,S.SOURCEID AS K_SOURCE_BK\n    --ATTRIBUTES\n    ,S.CASENUMBER AS A_CASE_NUMBER\n    ,P.A_CASE_NUMBER_HIERARCHY\n    ,S.CLOSEDDATE AS A_CLOSED_DATE\n    ,S.COMMENTS AS A_COMMENTS\n    ,S.CONTACTEMAIL AS A_CONTACT_EMAIL\n    ,S.CONTACTFAX AS A_CONTACT_FAX\n    ,S.CONTACTMOBILE AS A_CONTACT_MOBILE\n    ,S.CONTACTPHONE AS A_CONTACT_PHONE\n    ,S.CREATEDDATE AS A_CREATED_DATE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\n    ,S.LASTREFERENCEDDATE AS A_LAST_REFERENCED_DATE\n    ,S.LASTVIEWEDDATE AS A_LAST_VIEWED_DATE\n    --,S.NYN__ENGINEERINGREQNUMBER__C AS A_NYN__ENGINEERING_REQ_NUMBER\n    --,S.NYN__POTENTIALLIABILITY__C AS A_NYN__POTENTIALLIABILITY\n    --,S.NYN__PRODUCT__C AS A_NYN__PRODUCT\n    --,S.NYN__SLAVIOLATION__C AS A_NYN__SLA_VIOLATION\n    ,S.ORIGIN AS A_ORIGIN\n    ,S.PRIORITY AS A_PRIORITY\n    ,S.REASON AS A_REASON\n    ,S.STATUS AS A_STATUS\n    ,S.SUBJECT AS A_SUBJECT\n    ,S.SUPPLIEDCOMPANY AS A_SUPPLIED_COMPANY\n    ,S.SUPPLIEDEMAIL AS A_SUPPLIED_EMAIL\n    ,S.SUPPLIEDNAME AS A_SUPPLIED_NAME\n    ,S.SUPPLIEDPHONE AS A_SUPPLIED_PHONE\n    ,S.SYSTEMMODSTAMP AS A_SYSTEM_MOD_STAMP\n    ,S.TYPE AS A_TYPE\n    --BOOLEAN\n    ,S.ISCLOSED AS B_IS_CLOSED\n    ,S.ISDELETED AS B_ISD_ELETED\n    ,S.ISESCALATED AS B_IS_ESCALATED\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM source S\n    LEFT JOIN user U ON U.K_USER_BK = S.OWNERID\n    LEFT JOIN user U2 ON U2.K_USER_BK = S.CREATEDBYID\n    LEFT JOIN user U3 ON U3.K_USER_BK = S.LASTMODIFIEDBYID    \n    LEFT JOIN account A ON A.K_ACCOUNT_BK = S.ACCOUNTID\n    LEFT JOIN contact CO ON CO.K_CONTACT_BK = S.CONTACTID\n    LEFT JOIN parent_cases P ON P.K_CASE_BK = S.ID\nWHERE\n    NOT(S.ISDELETED)\n) \n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.CASE", "model.snowflake_aicd.W_ASSETS_D", "model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.V_CASES_HIERARCHY"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "CASES", "V_CASES_STG"], "unique_id": "model.snowflake_aicd.V_CASES_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/CASES/V_CASES_STG.sql", "original_file_path": "models/staging/CASES/V_CASES_STG.sql", "name": "V_CASES_STG", "alias": "V_CASES_STG", "checksum": {"name": "sha256", "checksum": "88a674e05d66b9f83f3005f1e20ad6e100819743477bbe56dd86aa8e41c60214"}, "tags": ["staging", "daily"], "refs": [["W_ASSETS_D"], ["W_ACCOUNTS_D"], ["W_CONTACTS_D"], ["W_USERS_D"], ["V_CASES_HIERARCHY"]], "sources": [["DEMO_SALESFORCE", "CASE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_PRODUCTS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','PRODUCT2')}}\n),\nuser AS (\n  SELECT * FROM  {{ref('W_USERS_D')}}\n),\nrename AS \n(\nSELECT\n    --DLHK\n    MD5(S.ID) AS K_PRODUCT_DLHK              \n    ,U2.K_USER_DLHK AS K_CREATED_BY_USER_DLHK\n    ,U3.K_USER_DLHK AS K_LAST_MODIFIED_BY_USER_DLHK\n    --BUSINESS_KEYS\n    ,S.ID AS K_PRODUCT_BK\n    ,S.CREATEDBYID AS K_CREATED_BY_USER_BK\n    ,S.EXTERNALDATASOURCEID AS K_EXTERNAL_DATA_SOURCE_BK\n    ,S.EXTERNALID AS K_EXTERNAL_BK\n    ,S.LASTMODIFIEDBYID AS K_LAST_MODIFIED_BY_USER_BK\n    --ATTRIBUTES\n    ,S.CREATEDDATE AS A_CREATED_DATE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.DISPLAYURL AS A_DISPLAY_URL\n    ,S.FAMILY AS A_FAMILY\n    ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\n    ,S.LASTREFERENCEDDATE AS A_LAST_REFERENCED_DATE\n    ,S.LASTVIEWEDDATE AS A_LAST_VIEWED_DATE\n    ,S.NAME AS A_NAME\n    ,S.PRODUCTCODE AS A_PRODUCT_CODE\n    ,S.QUANTITYUNITOFMEASURE AS A_QUANTITY_UNIT_OF_MEASURE\n    ,S.STOCKKEEPINGUNIT AS A_STOCK_KEEPING_UNIT\n    ,S.SYSTEMMODSTAMP AS A_SYSTEM_MOD_STAMP    \n    ,S.ISACTIVE AS B_IS_ACTIVE\n    ,S.ISARCHIVED AS B_IS_ARCHIVED\n    ,S.ISDELETED AS B_IS_DELETED\n     --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source S\n    LEFT JOIN user U2 ON U2.K_USER_BK = S.CREATEDBYID\n    LEFT JOIN user U3 ON U3.K_USER_BK = S.LASTMODIFIEDBYID \nWHERE\n    NOT(S.ISDELETED)\n)\n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.PRODUCT2", "model.snowflake_aicd.W_USERS_D"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "PRODUCT", "V_PRODUCTS_STG"], "unique_id": "model.snowflake_aicd.V_PRODUCTS_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/PRODUCT/V_PRODUCTS_STG.sql", "original_file_path": "models/staging/PRODUCT/V_PRODUCTS_STG.sql", "name": "V_PRODUCTS_STG", "alias": "V_PRODUCTS_STG", "checksum": {"name": "sha256", "checksum": "0ae63a755c66092a9db58aba77ba2bad3dcab8fe60191758cd20526d1bdc5465"}, "tags": ["staging", "daily"], "refs": [["W_USERS_D"]], "sources": [["DEMO_SALESFORCE", "PRODUCT2"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','PRICEBOOKENTRY')}}\n),\nuser AS (\n  SELECT * FROM  {{ref('W_USERS_D')}}\n),\nproduct AS (\n  SELECT * FROM  {{ref('V_PRODUCTS_STG')}}\n),\npricebook AS (\n  SELECT * FROM {{source('DEMO_SALESFORCE','PRICEBOOK2')}}\n),\nrename AS \n(\nSELECT\n    --DLHK\n    MD5(S.ID) AS K_PRODUCT_PRICES_DLHK\n    ,MD5(S.PRICEBOOK2ID) AS K_PRICEBOOK_DLHK\n    ,P.K_PRODUCT_DLHK AS K_PRODUCT_DLHK\n    ,U2.K_USER_DLHK AS K_CREATED_BY_USER_DLHK\n    ,U3.K_USER_DLHK AS K_MODIFIED_BY_USER_DLHK\n    --BUSINESS KEYS\n    ,S.ID AS K_PRODUCT_PRICES_BK\n    ,S.PRICEBOOK2ID AS K_PRICEBOOK_BK\n    ,P.K_PRODUCT_BK AS K_PRODUCT_BK\n    ,U2.K_USER_BK AS K_CREATED_BY_USER_BK\n    ,U3.K_USER_BK AS K_MODIFIED_BY_USER_BK\n    ,S.CREATEDDATE AS A_CREATED_DATE\n    ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\n    --ATTRIBUTES\n    ,PR.NAME AS A_PRICEBOOK_NAME\n    ,S.NAME AS A_PRICEBOOK_ENTRY_NAME    \n    ,S.SYSTEMMODSTAMP AS A_SYSTEM_MOD_STAMP\n    --PRODUCT\n    ,P.A_DESCRIPTION AS A_PRODUCT_DESCRIPTION    \n    ,P.A_FAMILY AS A_PRODUCT_FAMILY\n    ,P.A_NAME AS A_PRODUCT_NAME\n    ,P.A_PRODUCT_CODE AS A_PRODUCT_CODE\n    ,P.A_QUANTITY_UNIT_OF_MEASURE AS A_PRODUCT_QUANTITY_UNIT_OF_MEASURE\n    ,P.A_STOCK_KEEPING_UNIT AS A_PRODUCT_STOCK_KEEPING_UNIT\n    --BOOLEAN\n    ,P.B_IS_ACTIVE AS B_IS_ACTIVE_PRODUCT\n    ,P.B_IS_ARCHIVED AS B_IS_ARCHIVED_PRODUCT\n    ,S.ISACTIVE AS B_IS_ACTIVE_PRICEBOOK_ENTRY\n    ,S.ISARCHIVED AS B_IS_ARCHIVED_PRICEBOOK_ENTRY\n    ,S.ISDELETED AS B_IS_DELETED_PRICEBOOK_ENTRY\n    ,S.USESTANDARDPRICE AS B_USE_STANDARD_PRICE\n    --METRICS\n    ,S.UNITPRICE AS M_UNIT_PRICE\n     --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source S\n    LEFT JOIN user U2 ON U2.K_USER_BK = S.CREATEDBYID\n    LEFT JOIN user U3 ON U3.K_USER_BK = S.LASTMODIFIEDBYID \n    LEFT JOIN product P ON P.K_PRODUCT_DLHK = S.PRODUCT2ID\n    LEFT JOIN pricebook PR ON PR.ID = s.PRICEBOOK2ID\nWHERE\n  NOT(S.ISDELETED)\n)\n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOKENTRY", "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOK2", "model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.V_PRODUCTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "PRODUCT", "V_PRICEBOOK_ENTRY_STG"], "unique_id": "model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/PRODUCT/V_PRICEBOOK_ENTRY_STG.sql", "original_file_path": "models/staging/PRODUCT/V_PRICEBOOK_ENTRY_STG.sql", "name": "V_PRICEBOOK_ENTRY_STG", "alias": "V_PRICEBOOK_ENTRY_STG", "checksum": {"name": "sha256", "checksum": "850fff70ef720c1933520a4e7ea9d0974a77c82d420a70b189aa8357a707c725"}, "tags": ["staging", "daily"], "refs": [["W_USERS_D"], ["V_PRODUCTS_STG"]], "sources": [["DEMO_SALESFORCE", "PRICEBOOKENTRY"], ["DEMO_SALESFORCE", "PRICEBOOK2"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_LEADS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','LEAD')}}\n),\ncampaign AS (\n  SELECT * FROM  {{ref('W_CAMPAIGNS_F')}}\n),\naccount AS (\n  SELECT * FROM  {{ref('W_ACCOUNTS_D')}}\n),\ncontact AS (\n  SELECT * FROM  {{ref('W_CONTACTS_D')}}\n),\nuser AS (\n  SELECT * FROM  {{ref('W_USERS_D')}}\n),\nrename AS \n(\nSELECT\n  --DLHK\n  MD5(S.ID) AS K_LEAD_DLHK\n  ,A.K_ACCOUNT_DLHK AS K_CONVERTED_ACCOUNT_DLHK\n  ,CO.K_CONTACT_DLHK AS K_CONVERTED_CONTACT_DLHK   \n  ,U.K_USER_DLHK AS K_OWNER_USER_DLHK\n  ,U2.K_USER_DLHK AS K_CREATED_BY_USER_DLHK\n  ,U3.K_USER_DLHK AS K_MODIFIED_BY_USER_DLHK\n  --BUSINESS KEYS\n  ,S.ID AS K_LEAD_BK  \n  ,S.CONVERTEDACCOUNTID AS K_CONVERTED_ACCOUNT_BK\n  ,S.CONVERTEDCONTACTID AS K_CONVERTED_CONTACT_BK\n  ,S.CONVERTEDOPPORTUNITYID AS K_CONVERTED_OPPORTUNITY_BK\n  ,S.CREATEDBYID AS K_CREATED_BY_USER_BK\n  ,S.DANDBCOMPANYID AS K_DAN_DB_COMPANY_BK\n  ,S.INDIVIDUALID AS K_INDIVIDUAL_BK\n  ,S.JIGSAWCONTACTID AS K_JIGSAW_CONTACT_BK\n  ,S.LASTMODIFIEDBYID AS K_LAST_MODIFIED_BY_USER_BK\n  ,S.MASTERRECORDID AS K_MASTER_RECORD_BK\n  ,S.OWNERID AS K_OWNER_USER_BK\n  --ATTRIBUTES\n  ,S.ADDRESS AS A_ADDRESS\n  ,S.STATE AS A_STATE\n  ,S.STREET AS A_STREET\n  ,S.CITY AS A_CITY\n  ,S.CLEANSTATUS AS A_CLEAN_STATUS\n  ,S.COMPANY AS A_COMPANY\n  ,S.COMPANYDUNSNUMBER AS A_COMPANY_DUNS_NUMBER\n  ,S.CONVERTEDDATE AS A_CONVERTED_DATE\n  ,S.COUNTRY AS A_COUNTRY\n  ,S.CREATEDDATE AS A_CREATED_DATE\n  ,S.DESCRIPTION AS A_DESCRIPTION\n  ,S.EMAIL AS A_EMAIL\n  ,S.EMAILBOUNCEDDATE AS A_EMAIL_BOUNCED_DATE\n  ,S.EMAILBOUNCEDREASON AS A_EMAIL_BOUNCED_REASON\n  ,S.FAX AS A_FAX\n  ,S.NAME AS A_NAME\n  ,S.FIRSTNAME AS A_FIRST_NAME\n  ,S.LASTNAME AS A_LAST_NAME\n  ,S.GEOCODEACCURACY AS A_GEOCODE_ACCURACY\n  ,S.INDUSTRY AS A_INDUSTRY\n  ,S.JIGSAW AS A_JIGSAW\n  ,S.LASTACTIVITYDATE AS A_LAST_ACTIVITY_DATE\n  ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE  \n  ,S.LASTREFERENCEDDATE AS A_LAST_REFERENCED_DATE\n  ,S.LASTVIEWEDDATE AS A_LAST_VIEWED_DATE\n  ,S.LEADSOURCE AS A_LEAD_SOURCE\n  ,S.MOBILEPHONE AS A_MOBILE_PHONE  \n  --,S.NYN__CURRENTGENERATORS__C AS A_NYN__CURRENTGENERATORS__C\n  --,S.NYN__PRIMARY__C AS A_NYN__PRIMARY__C\n  --,S.NYN__PRODUCTINTEREST__C AS A_NYN__PRODUCTINTEREST__C\n  --,S.NYN__SICCODE__C AS A_NYN__SICCODE__C\n  ,S.PHONE AS A_PHONE\n  ,S.PHOTOURL AS A_PHOTOURL\n  ,S.POSTALCODE AS A_POSTALCODE\n  ,S.RATING AS A_RATING\n  ,S.SALUTATION AS A_SALUTATION\n  ,S.STATUS AS A_STATUS\n  ,S.SYSTEMMODSTAMP AS A_SYSTEM_MOD_STAMP\n  ,S.TITLE AS A_TITLE\n  ,S.WEBSITE AS A_WEBSITE\n  ,S.LATITUDE AS A_LATITUDE\n  ,S.LONGITUDE AS A_LONGITUDE\n  --BOOLEAN\n  ,S.ISCONVERTED AS B_IS_CONVERTED\n  ,S.ISDELETED AS B_IS_DELETED\n  ,S.ISUNREADBYOWNER AS B_IS_UNREAD_BY_OWNER\n  --METRICS\n  ,S.ANNUALREVENUE AS M_ANNUAL_REVENUE  \n  ,S.NUMBEROFEMPLOYEES AS M_NUMBER_OF_EMPLOYEES\n  --,S.NYN__NUMBEROFLOCATIONS__C AS M_NYN__NUMBER_OF_LOCATIONS__C\n    --METADATA\n  ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n  ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM source S\n    LEFT JOIN user U ON U.K_USER_BK = S.OWNERID\n    LEFT JOIN user U2 ON U2.K_USER_BK = S.CREATEDBYID\n    LEFT JOIN user U3 ON U3.K_USER_BK = S.LASTMODIFIEDBYID    \n    LEFT JOIN account A ON A.K_ACCOUNT_BK = S.CONVERTEDACCOUNTID\n    LEFT JOIN contact CO ON CO.K_CONTACT_BK = S.CONVERTEDCONTACTID\nWHERE\n  NOT(S.ISDELETED)\n) \n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.LEAD", "model.snowflake_aicd.W_CAMPAIGNS_F", "model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_USERS_D"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "LEAD", "V_LEADS_STG"], "unique_id": "model.snowflake_aicd.V_LEADS_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/LEAD/V_LEADS_STG.sql", "original_file_path": "models/staging/LEAD/V_LEADS_STG.sql", "name": "V_LEADS_STG", "alias": "V_LEADS_STG", "checksum": {"name": "sha256", "checksum": "b6d9433baadcb9995a0a74921628ef1654de01e5167a8c2803607ecfe5b62c36"}, "tags": ["staging", "daily"], "refs": [["W_CAMPAIGNS_F"], ["W_ACCOUNTS_D"], ["W_CONTACTS_D"], ["W_USERS_D"]], "sources": [["DEMO_SALESFORCE", "LEAD"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_ACCOUNTS_STG": {"raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= 'SALESFORCE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source('DEMO_SALESFORCE','ACCOUNT')}}\r\n),\r\nusers AS (\r\n  SELECT * FROM  {{ref('V_USERS_STG')}}\r\n),\r\nparent_accounts AS (\r\n  SELECT * FROM  {{ref('V_ACCOUNTS_HIERARCHY')}}\r\n),\r\n\r\nrename AS \r\n(\r\n SELECT\r\n--DLHK\r\n  MD5(S.ID) AS K_ACCOUNT_DLHK\r\n  ,MD5( TRIM(COALESCE(S.JIGSAWCOMPANYID, '00000000000000000000000000000000'))  ) AS K_JIGSAW_COMPANY_DLHK\r\n  ,MD5( TRIM(COALESCE(S.LASTMODIFIEDBYID, '00000000000000000000000000000000'))  ) AS K_LAST_MODIFIED_BY_USER_DLHK\r\n  ,K_USER_DLHK AS K_OWNER_USER_DLHK\r\n  ,MD5( TRIM(COALESCE(S.PARENTID, '00000000000000000000000000000000'))  ) AS K_PARENT_DLHK\r\n  ,MD5( TRIM(COALESCE(S.CREATEDBYID, '00000000000000000000000000000000'))  ) AS K_CREATED_BY_USER_DLHK\r\n  ,MD5( TRIM(COALESCE(S.DANDBCOMPANYID,  '00000000000000000000000000000000'))  ) AS K_DAN_DB_COMPANY_DLHK\r\n  --BUSINESS KEYS\r\n  ,S.ID AS K_ACCOUNT_BK\r\n  ,S.JIGSAWCOMPANYID AS K_JIGSAW_COMPANY_BK\r\n  ,S.LASTMODIFIEDBYID AS K_LAST_MODIFIED_BY_USER_BK\r\n  ,S.OWNERID AS K_OWNER_USER_BK\r\n  ,S.PARENTID AS K_PARENT_BK\r\n  ,S.CREATEDBYID AS K_CREATED_BY_USER_BK\r\n  ,S.DANDBCOMPANYID AS K_DAN_DB_COMPANY_BK\r\n  \r\n  --ATTRIBUTES\r\n  ,U.A_FULL_NAME AS A_OWNER_FULL_NAME\r\n  ,U.A_USER_ROLE_FULL_NAME AS A_OWNER_ROLE\r\n  ,U.A_USER_PROFILE_NAME AS A_OWNER_PROFILE\r\n  ,S.ACCOUNTNUMBER AS A_ACCOUNT_NUMBER\r\n  ,S.ACCOUNTSOURCE AS A_ACCOUNT_SOURCE\r\n  ,S.BILLINGCITY AS A_BILLING_CITY\r\n  ,S.BILLINGCOUNTRY AS A_BILLING_COUNTRY\r\n  ,S.BILLINGGEOCODEACCURACY AS A_BILLING_GEOCODE_ACCURACY\r\n  ,S.BILLINGPOSTALCODE AS A_BILLING_POSTALCODE\r\n  ,S.BILLINGSTATE AS A_BILLING_STATE\r\n  ,S.BILLINGSTREET AS A_BILLING_STREET\r\n  ,S.SHIPPINGCITY AS A_SHIPPING_CITY\r\n  ,S.SHIPPINGCOUNTRY AS A_SHIPPING_COUNTRY\r\n  ,S.SHIPPINGGEOCODEACCURACY AS A_SHIPPING_GEOCODE_ACCURACY\r\n  ,S.SHIPPINGPOSTALCODE AS A_SHIPPING_POSTALCODE\r\n  ,S.SHIPPINGSTATE AS A_SHIPPING_STATE\r\n  ,S.SHIPPINGSTREET AS A_SHIPPING_STREET\r\n  ,S.BILLINGLATITUDE AS A_BILLING_LATITUDE\r\n  ,S.BILLINGLONGITUDE AS A_BILLING_LONGITUDE\r\n  ,S.SHIPPINGLATITUDE AS A_SHIPPING_LATITUDE\r\n  ,S.SHIPPINGLONGITUDE AS A_SHIPPING_LONGITUDE\r\n  ,S.CLEANSTATUS AS A_CLEAN_STATUS\r\n  ,S.CREATEDDATE AS A_CREATED_DATE\r\n  ,S.DESCRIPTION AS A_DESCRIPTION\r\n  ,S.DUNSNUMBER AS A_DUNSNUMBER\r\n  ,S.FAX AS A_FAX\r\n  ,S.INDUSTRY AS A_INDUSTRY\r\n  ,S.JIGSAW AS A_JIGSAW\r\n  ,S.LASTACTIVITYDATE AS A_LAST_ACTIVITY_DATE\r\n  ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\r\n  ,S.LASTREFERENCEDDATE AS A_LAST_REFERENCED_DATE\r\n  ,S.LASTVIEWEDDATE AS A_LAST_VIEWED_DATE\r\n  ,S.NAICSCODE AS A_NAICS_CODE\r\n  ,S.NAICSDESC AS A_NAICS_DESC\r\n  ,S.NAME AS A_NAME\r\n  ,P.A_ACCOUNT_FULL_NAME AS A_ACCOUNT_FULL_NAME\r\n  --,S.NYN__ACTIVE__C AS A_NYN__ACTIVE__C\r\n  --,S.NYN__CUSTOMERPRIORITY__C AS A_NYN__CUSTOMERPRIORITY__C\r\n  --,S.NYN__SLAEXPIRATIONDATE__C AS A_NYN__SLAEXPIRATIONDATE__C\r\n  --,S.NYN__SLASERIALNUMBER__C AS A_NYN__SLASERIALNUMBER__C\r\n  --,S.NYN__SLA__C AS A_NYN__SLA__C\r\n  --,S.NYN__UPSELLOPPORTUNITY__C AS A_NYN__UPSELLOPPORTUNITY__C\r\n  ,S.OWNERSHIP AS A_OWNERSHIP\r\n  ,S.PHONE AS A_PHONE\r\n  ,S.PHOTOURL AS A_PHOTO_URL\r\n  ,S.RATING AS A_RATING\r\n  ,S.SIC AS A_SIC\r\n  ,S.SICDESC AS A_SICDESC\r\n  ,S.SITE AS A_SITE\r\n  ,S.SYSTEMMODSTAMP AS A_SYSTEM_MODSTAMP\r\n  ,S.TICKERSYMBOL AS A_TICKER_SYMBOL\r\n  ,S.TRADESTYLE AS A_TRADE_STYLE\r\n  ,S.TYPE AS A_TYPE\r\n  ,S.WEBSITE AS A_WEBSITE\r\n  ,S.YEARSTARTED AS A_YEAR_STARTED  \r\n    --BOOLEAN\r\n  ,S.ISDELETED AS B_IS_DELETED\r\n  --METRICS\r\n  ,S.ANNUALREVENUE AS M_ANNUALREVENUE\r\n  ,S.NUMBEROFEMPLOYEES AS M_NUMBEROFEMPLOYEES\r\n  --,S.NYN__NUMBEROFLOCATIONS__C AS M_NYN__NUMBEROFLOCATIONS__C\r\n    --METADATA\r\n  ,CURRENT_TIMESTAMP as MD_LOAD_DTS\r\n  ,'{{invocation_id}}' AS MD_INTGR_ID\r\nFROM source S\r\n  LEFT JOIN users U on U.K_USER_BK = S.OWNERID\r\n  LEFT JOIN parent_accounts P ON P.K_ACCOUNT_BK = S.ID\r\nWHERE\r\n    NOT(S.ISDELETED)\r\n)\r\n\r\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT", "model.snowflake_aicd.V_USERS_STG", "model.snowflake_aicd.V_ACCOUNTS_HIERARCHY"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "ACCOUNTS", "V_ACCOUNTS_STG"], "unique_id": "model.snowflake_aicd.V_ACCOUNTS_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/ACCOUNTS/V_ACCOUNTS_STG.sql", "original_file_path": "models/staging/ACCOUNTS/V_ACCOUNTS_STG.sql", "name": "V_ACCOUNTS_STG", "alias": "V_ACCOUNTS_STG", "checksum": {"name": "sha256", "checksum": "803483e3270bd390454c0615d717cf862665f94254bcab0e791fd8cd4ba2ce9f"}, "tags": ["staging", "daily"], "refs": [["V_USERS_STG"], ["V_ACCOUNTS_HIERARCHY"]], "sources": [["DEMO_SALESFORCE", "ACCOUNT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_ACCOUNTS_HIERARCHY": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\n-- This is the WITH clause, of course.\nwith recursive accounts \n      -- Column names for the \"view\"/CTE\n      (indent, id, parentroleid, name) \n    as\n      -- Common Table Expression\n      (\n        \n         -- Recursive Clause\n        select '' as INDENT,\n            A.id, A.PARENTID, A.NAME\n          from {{source('DEMO_SALESFORCE','ACCOUNT')}} A\n        where A.parentid is null\n        AND NOT(A.ISDELETED)\n        \n        union all\n        \n        -- Recursive Clause\n        select INDENT || '- ',\n            A.id, A.PARENTID, A.NAME\n          from {{source('DEMO_SALESFORCE','ACCOUNT')}} A join accounts AP\n            on A.PARENTID = AP.ID\n        WHERE NOT(A.ISDELETED)\n      )\n\n  -- This is the \"main select\".\n  select indent || name as A_ACCOUNT_FULL_NAME, id AS K_ACCOUNT_BK\n    from accounts", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT", "source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "ACCOUNTS", "V_ACCOUNTS_HIERARCHY"], "unique_id": "model.snowflake_aicd.V_ACCOUNTS_HIERARCHY", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/ACCOUNTS/V_ACCOUNTS_HIERARCHY.sql", "original_file_path": "models/staging/ACCOUNTS/V_ACCOUNTS_HIERARCHY.sql", "name": "V_ACCOUNTS_HIERARCHY", "alias": "V_ACCOUNTS_HIERARCHY", "checksum": {"name": "sha256", "checksum": "a75efde5bc8aadf33696b79fb7d21d1ed0c3153a7cc01bbb3701111d262a3257"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_SALESFORCE", "ACCOUNT"], ["DEMO_SALESFORCE", "ACCOUNT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_USER_ROLE_HIERARCHY": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\n-- This is the WITH clause, of course.\nwith recursive userroles \n      -- Column names for the \"view\"/CTE\n      (indent, id, parentroleid, name) \n    as\n      -- Common Table Expression\n      (\n        \n         -- Recursive Clause\n        select '' as INDENT,\n            ur.id, ur.parentroleid, ur.name\n          from {{source('DEMO_SALESFORCE','USERROLE')}} UR\n        where ur.parentroleid is null\n        \n        \n        union all\n        \n        -- Recursive Clause\n        select INDENT || '- ',\n            ur.id, ur.parentroleid, ur.name\n          from {{source('DEMO_SALESFORCE','USERROLE')}} UR join userroles URP\n            on UR.parentroleid = URP.id\n        \n      )\n\n  -- This is the \"main select\".\n  select indent || name as A_USER_ROLE_FULL_NAME, id AS K_USER_ROLE_BK, name A_USER_ROLE_NAME\n    from userroles", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.USERROLE", "source.snowflake_aicd.DEMO_SALESFORCE.USERROLE"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "USERS", "V_USER_ROLE_HIERARCHY"], "unique_id": "model.snowflake_aicd.V_USER_ROLE_HIERARCHY", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/USERS/V_USER_ROLE_HIERARCHY.sql", "original_file_path": "models/staging/USERS/V_USER_ROLE_HIERARCHY.sql", "name": "V_USER_ROLE_HIERARCHY", "alias": "V_USER_ROLE_HIERARCHY", "checksum": {"name": "sha256", "checksum": "e5e2950cb237b3d7f158f845b525b5e6882ed99738be83837cdf52115fc3c385"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_SALESFORCE", "USERROLE"], ["DEMO_SALESFORCE", "USERROLE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_USERS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','USER')}}\n),\nuser_role_hierarchy AS (\n  SELECT * FROM  {{ref('V_USER_ROLE_HIERARCHY')}}\n),\nuser_profile AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','PROFILE')}}\n),\nrename AS \n(\nSELECT\n    --DLHK\n    MD5(TRIM(COALESCE(U.ID,'00000000000000000000000000000000')) ) AS K_USER_DLHK\n    ,MD5(TRIM(COALESCE(U.ACCOUNTID,'00000000000000000000000000000000')) ) AS K_ACCOUNT_DLHK\n    ,MD5(TRIM(COALESCE(U.CONTACTID,'00000000000000000000000000000000')) ) AS K_CONTACT_DLHK\n    ,MD5(TRIM(COALESCE(U.INDIVIDUALID,'00000000000000000000000000000000')) ) AS K_INDIVIDUAL_DLHK\n    ,MD5(TRIM(COALESCE(U.MANAGERID,'00000000000000000000000000000000')) ) AS K_MANAGER_DLHK\n    ,MD5(TRIM(COALESCE(U.PROFILEID,'00000000000000000000000000000000')) ) AS K_PROFILE_DLHK\n    ,MD5(TRIM(COALESCE(U.USERROLEID,'00000000000000000000000000000000')) ) AS K_USER_ROLE_DLHK\n      \n    --BUSINESS KEYS\n    ,U.ID AS K_USER_BK\n    ,U.ACCOUNTID AS K_ACCOUNT_BK \n    ,U.CONTACTID AS K_CONTACT_BK\n    ,U.INDIVIDUALID AS K_INDIVIDUAL_BK\n    ,U.MANAGERID AS K_MANAGER_BK\n    ,U.PROFILEID AS K_PROFILE_BK \n    ,U.USERROLEID AS K_USER_ROLE_BK  \n    ,U.TIMEZONESIDKEY AS K_TIME_ZONE_BK\n    ,U.LASTMODIFIEDBYID AS K_LAST_MODIFIED_USER_BK\n    ,U.DELEGATEDAPPROVERID AS K_DELEGATED_APPROVER_BK\n    ,U.FEDERATIONIDENTIFIER AS K_FEDERATION_IDENTIFIER_BK\n    ,U.CALLCENTERID AS K_CALL_CENTER_BK\n    ,U.CREATEDBYID AS K_CREATED_BY_USER_BK\n    ,U.JIGSAWIMPORTLIMITOVERRIDE AS K_JIGSAW_IMPORT_LIMIT_OVERRIDE_BK    \n    ,U.LOCALESIDKEY AS K_LOCALES_BK\n    --ATTRIBUTES\n    ,U.NAME AS A_FULL_NAME\n    ,U.FIRSTNAME AS A_FIRST_NAME    \n    ,U.LASTNAME AS A_LAST_NAME\n    ,UR.A_USER_ROLE_NAME AS A_USER_ROLE_NAME\n    ,UR.A_USER_ROLE_FULL_NAME AS A_USER_ROLE_FULL_NAME\n    ,UP.NAME AS A_USER_PROFILE_NAME\n    ,U.ALIAS AS A_ALIAS\n    ,U.COMPANYNAME AS A_COMPANY_NAME\n    ,U.CREATEDDATE AS A_CREATED_DATE\n    ,U.DEPARTMENT AS A_DEPARTMENT\n    ,U.DIGESTFREQUENCY AS A_DIGEST_FREQUENCY\n    ,U.DIVISION AS A_DIVISION\n    ,U.EMAIL AS A_EMAIL\n    ,U.EMPLOYEENUMBER AS A_EMPLOYEE_NUMBER\n    ,U.EXTENSION AS A_EXTENSION\n    ,U.FAX AS A_FAX     \n    ,U.LASTLOGINDATE AS A_LAST_LOGIN_DATE\n    ,U.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\n    ,U.MOBILEPHONE AS A_MOBILE_PHONE\n    ,U.PHONE AS A_PHONE\n    ,U.SENDEREMAIL AS A_SENDER_EMAIL\n    ,U.SENDERNAME AS A_SENDER_NAME\n    ,U.COUNTRY AS A_COUNTRY\n    ,U.CITY AS A_CITY\n    ,U.STATE AS A_STATE\n    ,U.STREET AS A_STREET\n    ,U.POSTALCODE AS A_POSTAL_CODE\n    ,U.GEOCODEACCURACY AS A_GEO_CODE_ACCURACY\n    ,U.LATITUDE AS A_LATITUDE\n    ,U.LONGITUDE AS A_LONGITUDE\n    ,U.SYSTEMMODSTAMP AS A_SYSTEM_MOD_STAMP\n    ,U.TITLE AS A_TITLE\n    ,U.USERNAME AS A_USERNAME\n    ,U.USERTYPE AS A_USER_TYPE\n    --BOOLEAN\n    ,U.ISACTIVE AS B_IS_ACTIVE\n    --METRIC    \n    ,U.NUMBEROFFAILEDLOGINS AS M_NUMBEROFFAILEDLOGINS\n     --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source U\n    LEFT JOIN user_role_hierarchy UR ON UR.K_USER_ROLE_BK = U.USERROLEID\n    LEFT JOIN user_profile UP ON UP.ID = U.PROFILEID\n)\n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.USER", "source.snowflake_aicd.DEMO_SALESFORCE.PROFILE", "model.snowflake_aicd.V_USER_ROLE_HIERARCHY"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "USERS", "V_USERS_STG"], "unique_id": "model.snowflake_aicd.V_USERS_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/USERS/V_USERS_STG.sql", "original_file_path": "models/staging/USERS/V_USERS_STG.sql", "name": "V_USERS_STG", "alias": "V_USERS_STG", "checksum": {"name": "sha256", "checksum": "7996c5b26ad4204f076c09f6e2cf15701f61f45ad38e7f89e7f891aafb00cc44"}, "tags": ["staging", "daily"], "refs": [["V_USER_ROLE_HIERARCHY"]], "sources": [["DEMO_SALESFORCE", "USER"], ["DEMO_SALESFORCE", "PROFILE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_CAMPAIGNS_HIERARCHY": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\n-- This is the WITH clause, of course.\nwith recursive campaigns \n      -- Column names for the \"view\"/CTE\n      (indent, id, parentid, name) \n    as\n      -- Common Table Expression\n      (\n        \n         -- Recursive Clause\n        select '' as INDENT,\n            C.id, C.PARENTID, C.NAME\n          from {{source('DEMO_SALESFORCE','CAMPAIGN')}} C\n        where C.parentid is null\n        AND NOT(C.ISDELETED)\n        \n        union all\n        \n        -- Recursive Clause\n        select INDENT || '- ',\n            C.id, C.PARENTID, C.NAME\n          from {{source('DEMO_SALESFORCE','CAMPAIGN')}} C join campaigns CA\n            on C.PARENTID = CA.ID\n          WHERE\n           NOT(C.ISDELETED)\n      )\n\n  -- This is the \"main select\".\n  select indent || name as A_CAMPAIGN_FULL_NAME, id AS K_CAMPAIGN_BK\n    from campaigns", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN", "source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "CAMPAIGNS", "V_CAMPAIGNS_HIERARCHY"], "unique_id": "model.snowflake_aicd.V_CAMPAIGNS_HIERARCHY", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/CAMPAIGNS/V_CAMPAIGNS_HIERARCHY.sql", "original_file_path": "models/staging/CAMPAIGNS/V_CAMPAIGNS_HIERARCHY.sql", "name": "V_CAMPAIGNS_HIERARCHY", "alias": "V_CAMPAIGNS_HIERARCHY", "checksum": {"name": "sha256", "checksum": "ec5c96034ba774253ab7ecb3b2e3d9cbfe99a520806d039910675d2fa95715a9"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_SALESFORCE", "CAMPAIGN"], ["DEMO_SALESFORCE", "CAMPAIGN"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_CAMPAIGNS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','CAMPAIGN')}}\n),\nuser AS (\n  SELECT * FROM  {{ref('W_USERS_D')}}\n),\nparent_campaign AS (\n  SELECT * FROM  {{ref('V_CAMPAIGNS_HIERARCHY')}}\n),\nrename AS \n(\nSELECT\n  --DLHK\n  MD5(S.ID) AS K_CAMPAIGN_DLHK\n  ,U.K_USER_DLHK AS K_OWNER_USER_DLHK\n  ,U2.K_USER_DLHK AS K_MODIFIED_BY_USER_DLHK\n  ,U3.K_USER_DLHK AS K_CREATED_BY_USER_DLHK\n  --BUSINESS KEYS\n  ,S.ID AS K_CAMPAIGN_BK\n  ,S.CAMPAIGNMEMBERRECORDTYPEID AS K_CAMPAIGN_MEMBER_RECORD_TYPE_BK\n  ,S.CREATEDBYID AS K_CREATED_BY_USER_BK\n  ,S.LASTMODIFIEDBYID AS K_MODIFIED_BY_USER_BK\n  ,S.OWNERID AS K_OWNER_USER_BK\n\n  ,S.PARENTID AS K_PARENTID\n  --ATTRIBUTES\n  ,P.A_CAMPAIGN_FULL_NAME AS A_CAMPAIGN_FULL_NAME\n  ,S.CREATEDDATE AS A_CREATED_DATE\n  ,S.DESCRIPTION AS A_DESCRIPTION\n  ,S.ENDDATE AS A_END_DATE\n  ,S.LASTACTIVITYDATE AS A_LAST_ACTIVITY_DATE\n  ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\n  ,S.LASTREFERENCEDDATE AS A_LAST_REFERENCED_DATE\n  ,S.LASTVIEWEDDATE AS A_LAST_VIEWED_DATE\n  ,S.NAME AS A_NAME\n  ,S.STARTDATE AS A_START_DATE\n  ,S.STATUS AS A_STATUS\n  ,S.SYSTEMMODSTAMP AS A_SYSTEM_MOD_STAMP\n  ,S.TYPE AS A_TYPE\n  --BOOLEAN\n  ,S.ISACTIVE AS B_IS_ACTIVE\n  ,S.ISDELETED AS B_IS_DELETED\n  --METRICS\n  ,S.ACTUALCOST AS M_ACTUAL_COST\n  ,S.AMOUNTALLOPPORTUNITIES AS M_AMOUNT_ALL_OPPORTUNITIES\n  ,S.AMOUNTWONOPPORTUNITIES AS M_AMOUNT_WON_OPPORTUNITIES\n  ,S.BUDGETEDCOST AS M_BUDGETED_COST\n  ,S.EXPECTEDRESPONSE AS M_EXPECTED_RESPONSE\n  ,S.EXPECTEDREVENUE AS M_EXPECTED_REVENUE\n  ,S.NUMBEROFCONTACTS AS M_NUMBER_OF_CONTACTS\n  ,S.NUMBEROFCONVERTEDLEADS AS M_NUMBER_OF_CONVERTED_LEADS\n  ,S.NUMBEROFLEADS AS M_NUMBER_OF_LEADS\n  ,S.NUMBEROFOPPORTUNITIES AS M_NUMBER_OF_OPPORTUNITIES\n  ,S.NUMBEROFRESPONSES AS M_NUMBER_OF_RESPONSES\n  ,S.NUMBEROFWONOPPORTUNITIES AS M_NUMBER_OF_WON_OPPORTUNITIES\n  ,S.NUMBERSENT AS M_NUMBER_SENT\n  --METADATA\n  ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n  ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM source S\n    LEFT JOIN user U ON U.K_USER_BK = S.OWNERID\n    LEFT JOIN user U2 ON U2.K_USER_BK = S.LASTMODIFIEDBYID\n    LEFT JOIN user U3 ON U3.K_USER_BK = S.LASTMODIFIEDBYID\n    LEFT JOIN parent_campaign P ON P.K_CAMPAIGN_BK = S.ID\nWHERE\n  NOT(S.ISDELETED)\n) \n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN", "model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.V_CAMPAIGNS_HIERARCHY"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "CAMPAIGNS", "V_CAMPAIGNS_STG"], "unique_id": "model.snowflake_aicd.V_CAMPAIGNS_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/CAMPAIGNS/V_CAMPAIGNS_STG.sql", "original_file_path": "models/staging/CAMPAIGNS/V_CAMPAIGNS_STG.sql", "name": "V_CAMPAIGNS_STG", "alias": "V_CAMPAIGNS_STG", "checksum": {"name": "sha256", "checksum": "e4768e35b682c30fbb6e3742fffd8d8d063b8efcc6a9d33034b226dcb01e20ed"}, "tags": ["staging", "daily"], "refs": [["W_USERS_D"], ["V_CAMPAIGNS_HIERARCHY"]], "sources": [["DEMO_SALESFORCE", "CAMPAIGN"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.V_ASSETS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT * FROM  {{source('DEMO_SALESFORCE','ASSET')}}\n),\nusers AS (\n  SELECT * FROM  {{ref('V_USERS_STG')}}\n),\nrename AS \n(\n  SELECT\n    --DLHK\n    MD5(S.ID) AS K_ASSET_DLHK\n    ,MD5( TRIM(COALESCE(S.ACCOUNTID, '00000000000000000000000000000000'))  ) AS K_ACCOUNT_DLHK\n    ,MD5( TRIM(COALESCE(S.CONTACTID, '00000000000000000000000000000000'))  ) AS K_CONTACT_DLHK\n    ,MD5( TRIM(COALESCE(S.LASTMODIFIEDBYID, '00000000000000000000000000000000'))  ) AS K_LAST_MODIFIED_BY_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.OWNERID, '00000000000000000000000000000000'))  ) AS K_OWNER_USER_DLHK\n    ,MD5( TRIM(COALESCE(S.PARENTID, '00000000000000000000000000000000'))  ) AS K_PARENT_DLHK\n    ,MD5( TRIM(COALESCE(S.ROOTASSETID, '00000000000000000000000000000000'))  ) AS K_ROOT_ASSET_DLHK\n    ,MD5( TRIM(COALESCE(S.PRODUCT2ID, '00000000000000000000000000000000'))  ) AS K_PRODUCT2_DLHK\n    ,MD5( TRIM(COALESCE(S.ASSETPROVIDEDBYID, '00000000000000000000000000000000'))  ) AS K_ASSET_PROVIDED_BY_DLHK\n    ,MD5( TRIM(COALESCE(S.ASSETSERVICEDBYID, '00000000000000000000000000000000'))  ) AS K_ASSET_SERVICE_BY_DLHK\n    ,MD5( TRIM(COALESCE(S.CREATEDBYID, '00000000000000000000000000000000'))  ) AS K_CREATED_BY_USER_DLHK\n    --BUSINESS KEYS\n    ,S.ID AS K_ASSET_BK\n    ,S.ACCOUNTID AS K_ACCOUNT_BK\n    ,S.CONTACTID AS K_CONTACT_BK\n    ,S.LASTMODIFIEDBYID AS K_LAST_MODIFIED_BY_USER_BK\n    ,S.OWNERID AS K_OWNER_USER_BK\n    ,S.PARENTID AS K_PARENT_BK    \n    ,S.ROOTASSETID AS K_ROOT_ASSET_BK    \n    ,S.PRODUCT2ID AS K_PRODUCT2_BK\n    ,S.ASSETPROVIDEDBYID AS K_ASSET_PROVIDED_BY_BK\n    ,S.ASSETSERVICEDBYID AS K_ASSET_SERVICE_BY_BK    \n    ,S.CREATEDBYID AS K_CREATED_BY_USER_BK\n    --ATTRIBUTES\n    ,U.A_FULL_NAME AS A_OWNER_FULL_NAME\n    ,S.CREATEDDATE AS A_CREATED_DATE\n    ,S.CURRENTLIFECYCLEENDDATE AS A_CURRENT_LIFE_CYCLE_END_DATE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.INSTALLDATE AS A_INSTALL_DATE\n    ,S.LASTMODIFIEDDATE AS A_LAST_MODIFIED_DATE\n    ,S.LASTREFERENCEDDATE AS A_LAST_REFERENCED_DATE\n    ,S.LASTVIEWEDDATE AS A_LAST_VIEWED_DATE\n    ,S.LIFECYCLEENDDATE AS A_LIFE_CYCLE_END_DATE\n    ,S.LIFECYCLESTARTDATE AS A_LIFE_CYCLE_START_DATE\n    ,S.NAME AS A_NAME\n    ,S.PRODUCTCODE AS A_PRODUCT_CODE\n    ,S.PURCHASEDATE AS A_PURCHASE_DATE\n    ,S.SERIALNUMBER AS A_SERIAL_NUMBER\n    ,S.STATUS AS A_STATUS\n    ,S.STOCKKEEPINGUNIT AS A_STOCK_KEEPING_UNIT\n    ,S.SYSTEMMODSTAMP AS A_SYSTEM_MOD_STAMP\n    ,S.USAGEENDDATE AS A_USAGE_END_DATE    \n    --BOOLEANS\n    ,S.HASLIFECYCLEMANAGEMENT AS B_HAS_LIFE_CYCLE_MANAGEMENT\n    ,S.ISCOMPETITORPRODUCT AS B_IS_COMPETITOR_PRODUCT\n    ,S.ISDELETED AS B_IS_DELETED\n    ,S.ISINTERNAL AS B_IS_INTERNAL    \n    ,S.ASSETLEVEL AS A_ASSET_LEVEL\n    --METRICS\n    ,S.CURRENTAMOUNT AS M_CURRENTAMOUNT\n    ,S.CURRENTMRR AS M_CURRENTMRR\n    ,S.CURRENTQUANTITY AS M_CURRENTQUANTITY\n    ,S.PRICE AS M_PRICE\n    ,S.QUANTITY AS M_QUANTITY\n    ,S.TOTALLIFECYCLEAMOUNT AS M_TOTAL_LIFE_CYCLE_AMOUNT\n     --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM source S\n    LEFT JOIN users U ON U.K_USER_BK = S.OWNERID\nWHERE\n    NOT(S.ISDELETED)\n) \n\nSELECT * FROM rename", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.snowflake_aicd.DEMO_SALESFORCE.ASSET", "model.snowflake_aicd.V_USERS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "staging", "ASSETS", "V_ASSETS_STG"], "unique_id": "model.snowflake_aicd.V_ASSETS_STG", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "staging/ASSETS/V_ASSETS_STG.sql", "original_file_path": "models/staging/ASSETS/V_ASSETS_STG.sql", "name": "V_ASSETS_STG", "alias": "V_ASSETS_STG", "checksum": {"name": "sha256", "checksum": "283588a3ebdd455f02a0faf47867ef8bc56fc13026472ab023cb5ae62bbd04b5"}, "tags": ["staging", "daily"], "refs": [["V_USERS_STG"]], "sources": [["DEMO_SALESFORCE", "ASSET"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SALESFORCE", "tags": ["staging", "daily"]}, "created_at": 1646141225}, "model.snowflake_aicd.W_ACCOUNTS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_ACCOUNTS_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_ACCOUNTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_ACCOUNTS_D"], "unique_id": "model.snowflake_aicd.W_ACCOUNTS_D", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_ACCOUNTS_D.sql", "original_file_path": "models/master/W_ACCOUNTS_D.sql", "name": "W_ACCOUNTS_D", "alias": "W_ACCOUNTS_D", "checksum": {"name": "sha256", "checksum": "5e07f6cc25fab1c9e4e996a070d588c278390ceea191a62c9ddeb4341882c14a"}, "tags": ["staging", "daily"], "refs": [["V_ACCOUNTS_STG"]], "sources": [], "description": "This is the accounts dimension table", "columns": {"K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "DataLakeHouse key of the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "model.snowflake_aicd.W_USERS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_USERS_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_USERS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_USERS_D"], "unique_id": "model.snowflake_aicd.W_USERS_D", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_USERS_D.sql", "original_file_path": "models/master/W_USERS_D.sql", "name": "W_USERS_D", "alias": "W_USERS_D", "checksum": {"name": "sha256", "checksum": "817fc78f336c46dd42ab57d8174fa738aaba443742f28628ab8af37d696f778a"}, "tags": ["staging", "daily"], "refs": [["V_USERS_STG"]], "sources": [], "description": "This is the user dimension table", "columns": {"K_USER_DLHK": {"name": "K_USER_DLHK", "description": "DataLakeHouse key of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "model.snowflake_aicd.W_LEADS_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_LEADS_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_LEADS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_LEADS_F"], "unique_id": "model.snowflake_aicd.W_LEADS_F", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_LEADS_F.sql", "original_file_path": "models/master/W_LEADS_F.sql", "name": "W_LEADS_F", "alias": "W_LEADS_F", "checksum": {"name": "sha256", "checksum": "60fb90b3924d346dee2b388c5364e81bbaae096746ef55d00836a087c3e01cc6"}, "tags": ["staging", "daily"], "refs": [["V_LEADS_STG"]], "sources": [], "description": "This is the leads fact table", "columns": {"K_LEAD_DLHK": {"name": "K_LEAD_DLHK", "description": "DataLakeHouse key of the lead", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_OWNER_USER_DLHK": {"name": "K_OWNER_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_MODIFIED_BY_USER_DLHK": {"name": "K_MODIFIED_BY_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CREATED_BY_USER_DLHK": {"name": "K_CREATED_BY_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CONVERTED_ACCOUNT_DLHK": {"name": "K_CONVERTED_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CONVERTED_CONTACT_DLHK": {"name": "K_CONVERTED_CONTACT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "model.snowflake_aicd.W_ASSETS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_ASSETS_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_ASSETS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_ASSETS_D"], "unique_id": "model.snowflake_aicd.W_ASSETS_D", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_ASSETS_D.sql", "original_file_path": "models/master/W_ASSETS_D.sql", "name": "W_ASSETS_D", "alias": "W_ASSETS_D", "checksum": {"name": "sha256", "checksum": "452e9d1fe8d82cceb487b0c3240712f66a397e3f14feb1e23a89125ed6136b28"}, "tags": ["staging", "daily"], "refs": [["V_ASSETS_STG"]], "sources": [], "description": "This is the assets dimension table", "columns": {"K_ASSET_DLHK": {"name": "K_ASSET_DLHK", "description": "DataLakeHouse key of the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "model.snowflake_aicd.W_CASES_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_CASES_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_CASES_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_CASES_F"], "unique_id": "model.snowflake_aicd.W_CASES_F", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_CASES_F.sql", "original_file_path": "models/master/W_CASES_F.sql", "name": "W_CASES_F", "alias": "W_CASES_F", "checksum": {"name": "sha256", "checksum": "9d1efb6b48b1f5f9276023d571a262a5edce995d8b6add6501df29aadf3a4e11"}, "tags": ["staging", "daily"], "refs": [["V_CASES_STG"]], "sources": [], "description": "This is the cases fact table", "columns": {"K_CASE_DLHK": {"name": "K_CASE_DLHK", "description": "DataLakeHouse key of the case", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_OWNER_USER_DLHK": {"name": "K_OWNER_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_MODIFIED_BY_USER_DLHK": {"name": "K_MODIFIED_BY_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CREATED_BY_USER_DLHK": {"name": "K_CREATED_BY_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CONTACT_DLHK": {"name": "K_CONTACT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "model.snowflake_aicd.W_OPPORTUNITIES_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_OPPORTUNITIES_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_OPPORTUNITIES_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_OPPORTUNITIES_F"], "unique_id": "model.snowflake_aicd.W_OPPORTUNITIES_F", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_OPPORTUNITIES_F.sql", "original_file_path": "models/master/W_OPPORTUNITIES_F.sql", "name": "W_OPPORTUNITIES_F", "alias": "W_OPPORTUNITIES_F", "checksum": {"name": "sha256", "checksum": "493b08106d3d080179a6e7d1139a561d930794ad41e57bfeab8b21b1fae644ec"}, "tags": ["staging", "daily"], "refs": [["V_OPPORTUNITIES_STG"]], "sources": [], "description": "This is the opportunities fact table", "columns": {"K_OPPORTUNITY_DLHK": {"name": "K_OPPORTUNITY_DLHK", "description": "DataLakeHouse key of the opportunity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_OWNER_USER_DLHK": {"name": "K_OWNER_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_MODIFIED_BY_USER_DLHK": {"name": "K_MODIFIED_BY_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CREATED_BY_USER_DLHK": {"name": "K_CREATED_BY_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CONTACT_DLHK": {"name": "K_CONTACT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CAMPAIGN_DLHK": {"name": "K_CAMPAIGN_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "model.snowflake_aicd.W_PRODUCT_PRICES_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_PRICEBOOK_ENTRY_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_PRODUCT_PRICES_D"], "unique_id": "model.snowflake_aicd.W_PRODUCT_PRICES_D", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_PRODUCT_PRICES_D.sql", "original_file_path": "models/master/W_PRODUCT_PRICES_D.sql", "name": "W_PRODUCT_PRICES_D", "alias": "W_PRODUCT_PRICES_D", "checksum": {"name": "sha256", "checksum": "11d6d8d8f746978ca88209e6701d0c1abef483faa07764576112b25be0ed7849"}, "tags": ["staging", "daily"], "refs": [["V_PRICEBOOK_ENTRY_STG"]], "sources": [], "description": "This is the product prices dimension table", "columns": {"K_PRODUCT_PRICES_DLHK": {"name": "K_PRODUCT_PRICES_DLHK", "description": "DataLakeHouse key of the product price", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "model.snowflake_aicd.W_CAMPAIGNS_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_CAMPAIGNS_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_CAMPAIGNS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_CAMPAIGNS_F"], "unique_id": "model.snowflake_aicd.W_CAMPAIGNS_F", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_CAMPAIGNS_F.sql", "original_file_path": "models/master/W_CAMPAIGNS_F.sql", "name": "W_CAMPAIGNS_F", "alias": "W_CAMPAIGNS_F", "checksum": {"name": "sha256", "checksum": "dc0282af1c1bcb9bd455500d61d526a0ee93f6cc3f67ee340384864df14580a1"}, "tags": ["staging", "daily"], "refs": [["V_CAMPAIGNS_STG"]], "sources": [], "description": "This is the campaigns fact table", "columns": {"K_CAMPAIGN_DLHK": {"name": "K_CAMPAIGN_DLHK", "description": "DataLakeHouse key of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_OWNER_USER_DLHK": {"name": "K_OWNER_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_MODIFIED_BY_USER_DLHK": {"name": "K_MODIFIED_BY_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CREATED_BY_USER_DLHK": {"name": "K_CREATED_BY_USER_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "model.snowflake_aicd.W_CONTACTS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_CONTACTS_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_CONTACTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_CONTACTS_D"], "unique_id": "model.snowflake_aicd.W_CONTACTS_D", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_CONTACTS_D.sql", "original_file_path": "models/master/W_CONTACTS_D.sql", "name": "W_CONTACTS_D", "alias": "W_CONTACTS_D", "checksum": {"name": "sha256", "checksum": "25ae2f390ce342d6dd44dbd780dd1355d7c0303ec9c6a1a13a8a21af90c514a4"}, "tags": ["staging", "daily"], "refs": [["V_CONTACTS_STG"]], "sources": [], "description": "This is the contacts dimension table", "columns": {"K_CONTACT_DLHK": {"name": "K_CONTACT_DLHK", "description": "DataLakeHouse key of the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "model.snowflake_aicd.W_CONTRACTS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= 'SALESFORCE',\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT\n  *\nFROM\n  {{ref('V_CONTRACTS_STG')}} AS C", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.snowflake_aicd.V_CONTRACTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "SALESFORCE", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "snowflake_aicd": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SALESFORCE", "fqn": ["snowflake_aicd", "master", "W_CONTRACTS_D"], "unique_id": "model.snowflake_aicd.W_CONTRACTS_D", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "master/W_CONTRACTS_D.sql", "original_file_path": "models/master/W_CONTRACTS_D.sql", "name": "W_CONTRACTS_D", "alias": "W_CONTRACTS_D", "checksum": {"name": "sha256", "checksum": "57e543233fc23d11804f398b156a334979380427261f7c8cdf8c0e460da47209"}, "tags": ["staging", "daily"], "refs": [["V_CONTRACTS_STG"]], "sources": [], "description": "This is the contracts dimension table", "columns": {"K_CONTRACT_DLHK": {"name": "K_CONTRACT_DLHK", "description": "DataLakeHouse key of the contract", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SALESFORCE", "tags": ["staging", "daily"], "transient": false}, "created_at": 1646141225}, "test.snowflake_aicd.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_ACCOUNTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "alias": "unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_ACCOUNT_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_ACCOUNTS_D\nwhere K_ACCOUNT_DLHK is not null\ngroup by K_ACCOUNT_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.snowflake_aicd.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_ACCOUNTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "alias": "not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_ACCOUNTS_D\nwhere K_ACCOUNT_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.snowflake_aicd.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_ASSET_DLHK", "model": "{{ get_where_subquery(ref('W_ASSETS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_ASSETS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_ASSETS_D_K_ASSET_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_ASSETS_D_K_ASSET_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_ASSETS_D_K_ASSET_DLHK", "alias": "unique_W_ASSETS_D_K_ASSET_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ASSETS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_ASSETS_D_K_ASSET_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_ASSETS_D_K_ASSET_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_ASSET_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_ASSETS_D\nwhere K_ASSET_DLHK is not null\ngroup by K_ASSET_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ASSET_DLHK"}, "test.snowflake_aicd.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_ASSET_DLHK", "model": "{{ get_where_subquery(ref('W_ASSETS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_ASSETS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_ASSETS_D_K_ASSET_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_ASSETS_D_K_ASSET_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_ASSETS_D_K_ASSET_DLHK", "alias": "not_null_W_ASSETS_D_K_ASSET_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ASSETS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_ASSETS_D_K_ASSET_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_ASSETS_D_K_ASSET_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_ASSETS_D\nwhere K_ASSET_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ASSET_DLHK"}, "test.snowflake_aicd.unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.647e8a8922": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_CAMPAIGN_DLHK", "model": "{{ get_where_subquery(ref('W_CAMPAIGNS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CAMPAIGNS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.647e8a8922", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK", "alias": "unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CAMPAIGNS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_CAMPAIGN_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CAMPAIGNS_F\nwhere K_CAMPAIGN_DLHK is not null\ngroup by K_CAMPAIGN_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CAMPAIGN_DLHK"}, "test.snowflake_aicd.not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.fdd9db7e7e": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_CAMPAIGN_DLHK", "model": "{{ get_where_subquery(ref('W_CAMPAIGNS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CAMPAIGNS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.fdd9db7e7e", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK", "alias": "not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CAMPAIGNS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CAMPAIGNS_F\nwhere K_CAMPAIGN_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CAMPAIGN_DLHK"}, "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.84ed325df4": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_CAMPAIGNS_F_6d71d6c493ea347889183dd49eb18b16\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_OWNER_USER_DLHK", "model": "{{ get_where_subquery(ref('W_CAMPAIGNS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_CAMPAIGNS_F"]}, "config": {"enabled": true, "alias": "relationships_W_CAMPAIGNS_F_6d71d6c493ea347889183dd49eb18b16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_CAMPAIGNS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.84ed325df4", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_CAMPAIGNS_F_6d71d6c493ea347889183dd49eb18b16.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_CAMPAIGNS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_CAMPAIGNS_F_6d71d6c493ea347889183dd49eb18b16", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_CAMPAIGNS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CAMPAIGNS_F_6d71d6c493ea347889183dd49eb18b16.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CAMPAIGNS_F_6d71d6c493ea347889183dd49eb18b16.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_CAMPAIGNS_F_6d71d6c493ea347889183dd49eb18b16"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_OWNER_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CAMPAIGNS_F\n    where K_OWNER_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_OWNER_USER_DLHK"}, "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.9c2933ba77": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_CAMPAIGNS_F_80a8d5785f7fe4933a43bd93c29737c9\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_MODIFIED_BY_USER_DLHK", "model": "{{ get_where_subquery(ref('W_CAMPAIGNS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_CAMPAIGNS_F"]}, "config": {"enabled": true, "alias": "relationships_W_CAMPAIGNS_F_80a8d5785f7fe4933a43bd93c29737c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_CAMPAIGNS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.9c2933ba77", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_CAMPAIGNS_F_80a8d5785f7fe4933a43bd93c29737c9.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_CAMPAIGNS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_CAMPAIGNS_F_80a8d5785f7fe4933a43bd93c29737c9", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_CAMPAIGNS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CAMPAIGNS_F_80a8d5785f7fe4933a43bd93c29737c9.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CAMPAIGNS_F_80a8d5785f7fe4933a43bd93c29737c9.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_CAMPAIGNS_F_80a8d5785f7fe4933a43bd93c29737c9"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_MODIFIED_BY_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CAMPAIGNS_F\n    where K_MODIFIED_BY_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_MODIFIED_BY_USER_DLHK"}, "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.f45bd1288d": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_CAMPAIGNS_F_e80536e919d97feccf809163b76d75e4\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_CREATED_BY_USER_DLHK", "model": "{{ get_where_subquery(ref('W_CAMPAIGNS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_CAMPAIGNS_F"]}, "config": {"enabled": true, "alias": "relationships_W_CAMPAIGNS_F_e80536e919d97feccf809163b76d75e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_CAMPAIGNS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.f45bd1288d", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_CAMPAIGNS_F_e80536e919d97feccf809163b76d75e4.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_CAMPAIGNS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_CAMPAIGNS_F_e80536e919d97feccf809163b76d75e4", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_CAMPAIGNS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CAMPAIGNS_F_e80536e919d97feccf809163b76d75e4.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CAMPAIGNS_F_e80536e919d97feccf809163b76d75e4.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_CAMPAIGNS_F_e80536e919d97feccf809163b76d75e4"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CREATED_BY_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CAMPAIGNS_F\n    where K_CREATED_BY_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CREATED_BY_USER_DLHK"}, "test.snowflake_aicd.unique_W_CASES_F_K_CASE_DLHK.3ea81e75b7": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_CASE_DLHK", "model": "{{ get_where_subquery(ref('W_CASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CASES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_CASES_F_K_CASE_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_CASES_F_K_CASE_DLHK.3ea81e75b7", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_CASES_F_K_CASE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_CASES_F_K_CASE_DLHK", "alias": "unique_W_CASES_F_K_CASE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_CASES_F_K_CASE_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_CASES_F_K_CASE_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_CASE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CASES_F\nwhere K_CASE_DLHK is not null\ngroup by K_CASE_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CASE_DLHK"}, "test.snowflake_aicd.not_null_W_CASES_F_K_CASE_DLHK.108486fab6": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_CASE_DLHK", "model": "{{ get_where_subquery(ref('W_CASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CASES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_CASES_F_K_CASE_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_CASES_F_K_CASE_DLHK.108486fab6", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_CASES_F_K_CASE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_CASES_F_K_CASE_DLHK", "alias": "not_null_W_CASES_F_K_CASE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_CASES_F_K_CASE_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_CASES_F_K_CASE_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CASES_F\nwhere K_CASE_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CASE_DLHK"}, "test.snowflake_aicd.relationships_W_CASES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.fd03243b9a": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_CASES_F_dbbe3574ee683717b939d2c81ca091b7\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_OWNER_USER_DLHK", "model": "{{ get_where_subquery(ref('W_CASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_CASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_CASES_F_dbbe3574ee683717b939d2c81ca091b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_CASES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_CASES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.fd03243b9a", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_CASES_F_dbbe3574ee683717b939d2c81ca091b7.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_CASES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_CASES_F_dbbe3574ee683717b939d2c81ca091b7", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_CASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_dbbe3574ee683717b939d2c81ca091b7.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_dbbe3574ee683717b939d2c81ca091b7.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_CASES_F_dbbe3574ee683717b939d2c81ca091b7"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_OWNER_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CASES_F\n    where K_OWNER_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_OWNER_USER_DLHK"}, "test.snowflake_aicd.relationships_W_CASES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.3ae209e2cf": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_CASES_F_f39362837b534373d3183f2fd9da5847\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_MODIFIED_BY_USER_DLHK", "model": "{{ get_where_subquery(ref('W_CASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_CASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_CASES_F_f39362837b534373d3183f2fd9da5847", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_CASES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_CASES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.3ae209e2cf", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_CASES_F_f39362837b534373d3183f2fd9da5847.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_CASES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_CASES_F_f39362837b534373d3183f2fd9da5847", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_CASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_f39362837b534373d3183f2fd9da5847.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_f39362837b534373d3183f2fd9da5847.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_CASES_F_f39362837b534373d3183f2fd9da5847"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_MODIFIED_BY_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CASES_F\n    where K_MODIFIED_BY_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_MODIFIED_BY_USER_DLHK"}, "test.snowflake_aicd.relationships_W_CASES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.7c27b08225": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_CASES_F_503b286364559086ed4140cb7483cf65\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_CREATED_BY_USER_DLHK", "model": "{{ get_where_subquery(ref('W_CASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_CASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_CASES_F_503b286364559086ed4140cb7483cf65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_CASES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_CASES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.7c27b08225", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_CASES_F_503b286364559086ed4140cb7483cf65.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_CASES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_CASES_F_503b286364559086ed4140cb7483cf65", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_CASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_503b286364559086ed4140cb7483cf65.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_503b286364559086ed4140cb7483cf65.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_CASES_F_503b286364559086ed4140cb7483cf65"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CREATED_BY_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CASES_F\n    where K_CREATED_BY_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CREATED_BY_USER_DLHK"}, "test.snowflake_aicd.relationships_W_CASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.76f260c382": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_CASES_F_5e5a42615cc850440ab7023b984d1cb5\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_CASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_CASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_CASES_F_5e5a42615cc850440ab7023b984d1cb5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_CASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_CASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.76f260c382", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_CASES_F_5e5a42615cc850440ab7023b984d1cb5.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_CASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_CASES_F_5e5a42615cc850440ab7023b984d1cb5", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_CASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_5e5a42615cc850440ab7023b984d1cb5.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_5e5a42615cc850440ab7023b984d1cb5.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_CASES_F_5e5a42615cc850440ab7023b984d1cb5"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CASES_F\n    where K_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.snowflake_aicd.relationships_W_CASES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.55c45dca2a": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_CASES_F_66059a75d7d85d9638abdd43821c5fcd\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CONTACTS_D')", "field": "K_CONTACT_DLHK", "column_name": "K_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_CASES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_CASES_F"]}, "config": {"enabled": true, "alias": "relationships_W_CASES_F_66059a75d7d85d9638abdd43821c5fcd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_CASES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_CASES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.55c45dca2a", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_CASES_F_66059a75d7d85d9638abdd43821c5fcd.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_CASES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_", "alias": "relationships_W_CASES_F_66059a75d7d85d9638abdd43821c5fcd", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"], ["W_CASES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_66059a75d7d85d9638abdd43821c5fcd.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_CASES_F_66059a75d7d85d9638abdd43821c5fcd.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_CASES_F_66059a75d7d85d9638abdd43821c5fcd"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CONTACT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CASES_F\n    where K_CONTACT_DLHK is not null\n),\n\nparent as (\n    select K_CONTACT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CONTACTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTACT_DLHK"}, "test.snowflake_aicd.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_CONTACTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CONTACTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_CONTACTS_D_K_CONTACT_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_CONTACTS_D_K_CONTACT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_CONTACTS_D_K_CONTACT_DLHK", "alias": "unique_W_CONTACTS_D_K_CONTACT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_CONTACTS_D_K_CONTACT_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_CONTACTS_D_K_CONTACT_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_CONTACT_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CONTACTS_D\nwhere K_CONTACT_DLHK is not null\ngroup by K_CONTACT_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTACT_DLHK"}, "test.snowflake_aicd.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_CONTACTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CONTACTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_CONTACTS_D_K_CONTACT_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_CONTACTS_D_K_CONTACT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_CONTACTS_D_K_CONTACT_DLHK", "alias": "not_null_W_CONTACTS_D_K_CONTACT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_CONTACTS_D_K_CONTACT_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_CONTACTS_D_K_CONTACT_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CONTACTS_D\nwhere K_CONTACT_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTACT_DLHK"}, "test.snowflake_aicd.unique_W_CONTRACTS_D_K_CONTRACT_DLHK.ec5d71be62": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_CONTRACT_DLHK", "model": "{{ get_where_subquery(ref('W_CONTRACTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CONTRACTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_CONTRACTS_D_K_CONTRACT_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_CONTRACTS_D_K_CONTRACT_DLHK.ec5d71be62", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_CONTRACTS_D_K_CONTRACT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_CONTRACTS_D_K_CONTRACT_DLHK", "alias": "unique_W_CONTRACTS_D_K_CONTRACT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTRACTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_CONTRACTS_D_K_CONTRACT_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_CONTRACTS_D_K_CONTRACT_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_CONTRACT_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CONTRACTS_D\nwhere K_CONTRACT_DLHK is not null\ngroup by K_CONTRACT_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTRACT_DLHK"}, "test.snowflake_aicd.not_null_W_CONTRACTS_D_K_CONTRACT_DLHK.c882697e1b": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_CONTRACT_DLHK", "model": "{{ get_where_subquery(ref('W_CONTRACTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CONTRACTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_CONTRACTS_D_K_CONTRACT_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_CONTRACTS_D_K_CONTRACT_DLHK.c882697e1b", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_CONTRACTS_D_K_CONTRACT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_CONTRACTS_D_K_CONTRACT_DLHK", "alias": "not_null_W_CONTRACTS_D_K_CONTRACT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTRACTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_CONTRACTS_D_K_CONTRACT_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_CONTRACTS_D_K_CONTRACT_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CONTRACTS_D\nwhere K_CONTRACT_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTRACT_DLHK"}, "test.snowflake_aicd.unique_W_LEADS_F_K_LEAD_DLHK.f2b18b89af": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_LEAD_DLHK", "model": "{{ get_where_subquery(ref('W_LEADS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_LEADS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_LEADS_F_K_LEAD_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_LEADS_F_K_LEAD_DLHK.f2b18b89af", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_LEADS_F_K_LEAD_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_LEADS_F_K_LEAD_DLHK", "alias": "unique_W_LEADS_F_K_LEAD_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_LEADS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_LEADS_F_K_LEAD_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_LEADS_F_K_LEAD_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_LEAD_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_LEADS_F\nwhere K_LEAD_DLHK is not null\ngroup by K_LEAD_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_LEAD_DLHK"}, "test.snowflake_aicd.not_null_W_LEADS_F_K_LEAD_DLHK.8e32562cfc": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_LEAD_DLHK", "model": "{{ get_where_subquery(ref('W_LEADS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_LEADS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_LEADS_F_K_LEAD_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_LEADS_F_K_LEAD_DLHK.8e32562cfc", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_LEADS_F_K_LEAD_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_LEADS_F_K_LEAD_DLHK", "alias": "not_null_W_LEADS_F_K_LEAD_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_LEADS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_LEADS_F_K_LEAD_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_LEADS_F_K_LEAD_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_LEADS_F\nwhere K_LEAD_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_LEAD_DLHK"}, "test.snowflake_aicd.relationships_W_LEADS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.6734ce124f": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_LEADS_F_5ddc5b0ac3c85606ef394b3e3fe342c5\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_OWNER_USER_DLHK", "model": "{{ get_where_subquery(ref('W_LEADS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_LEADS_F"]}, "config": {"enabled": true, "alias": "relationships_W_LEADS_F_5ddc5b0ac3c85606ef394b3e3fe342c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_LEADS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_LEADS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.6734ce124f", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_LEADS_F_5ddc5b0ac3c85606ef394b3e3fe342c5.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_LEADS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_LEADS_F_5ddc5b0ac3c85606ef394b3e3fe342c5", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_LEADS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_5ddc5b0ac3c85606ef394b3e3fe342c5.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_5ddc5b0ac3c85606ef394b3e3fe342c5.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_LEADS_F_5ddc5b0ac3c85606ef394b3e3fe342c5"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_OWNER_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_LEADS_F\n    where K_OWNER_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_OWNER_USER_DLHK"}, "test.snowflake_aicd.relationships_W_LEADS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.4ee4ccb6f9": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_LEADS_F_989e1e5c7494d35ae86c2b06c3e84f81\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_MODIFIED_BY_USER_DLHK", "model": "{{ get_where_subquery(ref('W_LEADS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_LEADS_F"]}, "config": {"enabled": true, "alias": "relationships_W_LEADS_F_989e1e5c7494d35ae86c2b06c3e84f81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_LEADS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_LEADS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.4ee4ccb6f9", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_LEADS_F_989e1e5c7494d35ae86c2b06c3e84f81.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_LEADS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_LEADS_F_989e1e5c7494d35ae86c2b06c3e84f81", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_LEADS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_989e1e5c7494d35ae86c2b06c3e84f81.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_989e1e5c7494d35ae86c2b06c3e84f81.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_LEADS_F_989e1e5c7494d35ae86c2b06c3e84f81"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_MODIFIED_BY_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_LEADS_F\n    where K_MODIFIED_BY_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_MODIFIED_BY_USER_DLHK"}, "test.snowflake_aicd.relationships_W_LEADS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.90ca78a95e": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_LEADS_F_f585e794192366d0350dac448334f7b1\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_CREATED_BY_USER_DLHK", "model": "{{ get_where_subquery(ref('W_LEADS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_LEADS_F"]}, "config": {"enabled": true, "alias": "relationships_W_LEADS_F_f585e794192366d0350dac448334f7b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_LEADS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_LEADS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.90ca78a95e", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_LEADS_F_f585e794192366d0350dac448334f7b1.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_LEADS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_LEADS_F_f585e794192366d0350dac448334f7b1", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_LEADS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_f585e794192366d0350dac448334f7b1.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_f585e794192366d0350dac448334f7b1.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_LEADS_F_f585e794192366d0350dac448334f7b1"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CREATED_BY_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_LEADS_F\n    where K_CREATED_BY_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CREATED_BY_USER_DLHK"}, "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.45e88789be": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_LEADS_F_7e300d88d0d8c2622f202ef18fa35caa\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_CONVERTED_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_LEADS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_LEADS_F"]}, "config": {"enabled": true, "alias": "relationships_W_LEADS_F_7e300d88d0d8c2622f202ef18fa35caa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_LEADS_F_K_CONVERTED_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.45e88789be", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_LEADS_F_7e300d88d0d8c2622f202ef18fa35caa.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_LEADS_F_K_CONVERTED_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_LEADS_F_7e300d88d0d8c2622f202ef18fa35caa", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_LEADS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_7e300d88d0d8c2622f202ef18fa35caa.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_7e300d88d0d8c2622f202ef18fa35caa.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_LEADS_F_7e300d88d0d8c2622f202ef18fa35caa"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CONVERTED_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_LEADS_F\n    where K_CONVERTED_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONVERTED_ACCOUNT_DLHK"}, "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.d4ec40aefd": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_LEADS_F_650d96d35244966f0a25a2f2d66bc38c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CONTACTS_D')", "field": "K_CONTACT_DLHK", "column_name": "K_CONVERTED_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_LEADS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_LEADS_F"]}, "config": {"enabled": true, "alias": "relationships_W_LEADS_F_650d96d35244966f0a25a2f2d66bc38c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_LEADS_F_K_CONVERTED_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.d4ec40aefd", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_LEADS_F_650d96d35244966f0a25a2f2d66bc38c.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_LEADS_F_K_CONVERTED_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_", "alias": "relationships_W_LEADS_F_650d96d35244966f0a25a2f2d66bc38c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"], ["W_LEADS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_650d96d35244966f0a25a2f2d66bc38c.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_LEADS_F_650d96d35244966f0a25a2f2d66bc38c.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_LEADS_F_650d96d35244966f0a25a2f2d66bc38c"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CONVERTED_CONTACT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_LEADS_F\n    where K_CONVERTED_CONTACT_DLHK is not null\n),\n\nparent as (\n    select K_CONTACT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CONTACTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONVERTED_CONTACT_DLHK"}, "test.snowflake_aicd.unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.29a3913d97": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_OPPORTUNITY_DLHK", "model": "{{ get_where_subquery(ref('W_OPPORTUNITIES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_OPPORTUNITIES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.29a3913d97", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK", "alias": "unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_OPPORTUNITIES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_OPPORTUNITY_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_OPPORTUNITIES_F\nwhere K_OPPORTUNITY_DLHK is not null\ngroup by K_OPPORTUNITY_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_OPPORTUNITY_DLHK"}, "test.snowflake_aicd.not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.e88e444c3e": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_OPPORTUNITY_DLHK", "model": "{{ get_where_subquery(ref('W_OPPORTUNITIES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_OPPORTUNITIES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.e88e444c3e", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK", "alias": "not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_OPPORTUNITIES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_OPPORTUNITIES_F\nwhere K_OPPORTUNITY_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_OPPORTUNITY_DLHK"}, "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.e54465c5db": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_OPPORTUNITIES__66f6dbd583703a9dbac69000a0dca580\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_OWNER_USER_DLHK", "model": "{{ get_where_subquery(ref('W_OPPORTUNITIES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_OPPORTUNITIES_F"]}, "config": {"enabled": true, "alias": "relationships_W_OPPORTUNITIES__66f6dbd583703a9dbac69000a0dca580", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_OPPORTUNITIES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.e54465c5db", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_OPPORTUNITIES__66f6dbd583703a9dbac69000a0dca580.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_OPPORTUNITIES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_OPPORTUNITIES__66f6dbd583703a9dbac69000a0dca580", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_OPPORTUNITIES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__66f6dbd583703a9dbac69000a0dca580.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__66f6dbd583703a9dbac69000a0dca580.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_OPPORTUNITIES__66f6dbd583703a9dbac69000a0dca580"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_OWNER_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_OPPORTUNITIES_F\n    where K_OWNER_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_OWNER_USER_DLHK"}, "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.ec5202c69e": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_OPPORTUNITIES__df0398bd4ab6630d414238ef187ffebc\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_MODIFIED_BY_USER_DLHK", "model": "{{ get_where_subquery(ref('W_OPPORTUNITIES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_OPPORTUNITIES_F"]}, "config": {"enabled": true, "alias": "relationships_W_OPPORTUNITIES__df0398bd4ab6630d414238ef187ffebc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_OPPORTUNITIES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.ec5202c69e", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_OPPORTUNITIES__df0398bd4ab6630d414238ef187ffebc.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_OPPORTUNITIES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_OPPORTUNITIES__df0398bd4ab6630d414238ef187ffebc", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_OPPORTUNITIES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__df0398bd4ab6630d414238ef187ffebc.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__df0398bd4ab6630d414238ef187ffebc.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_OPPORTUNITIES__df0398bd4ab6630d414238ef187ffebc"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_MODIFIED_BY_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_OPPORTUNITIES_F\n    where K_MODIFIED_BY_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_MODIFIED_BY_USER_DLHK"}, "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.848245f09d": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_OPPORTUNITIES__1cb554bd2d7f5b2e583770bded0f2c13\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_USERS_D')", "field": "K_USER_DLHK", "column_name": "K_CREATED_BY_USER_DLHK", "model": "{{ get_where_subquery(ref('W_OPPORTUNITIES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D", "model.snowflake_aicd.W_OPPORTUNITIES_F"]}, "config": {"enabled": true, "alias": "relationships_W_OPPORTUNITIES__1cb554bd2d7f5b2e583770bded0f2c13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_OPPORTUNITIES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.848245f09d", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_OPPORTUNITIES__1cb554bd2d7f5b2e583770bded0f2c13.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_OPPORTUNITIES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_", "alias": "relationships_W_OPPORTUNITIES__1cb554bd2d7f5b2e583770bded0f2c13", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"], ["W_OPPORTUNITIES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__1cb554bd2d7f5b2e583770bded0f2c13.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__1cb554bd2d7f5b2e583770bded0f2c13.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_OPPORTUNITIES__1cb554bd2d7f5b2e583770bded0f2c13"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CREATED_BY_USER_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_OPPORTUNITIES_F\n    where K_CREATED_BY_USER_DLHK is not null\n),\n\nparent as (\n    select K_USER_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CREATED_BY_USER_DLHK"}, "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.70ac0b2d48": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_OPPORTUNITIES__a1a38a6f98a3e5bf81708be81c8eb0b0\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_OPPORTUNITIES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_OPPORTUNITIES_F"]}, "config": {"enabled": true, "alias": "relationships_W_OPPORTUNITIES__a1a38a6f98a3e5bf81708be81c8eb0b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_OPPORTUNITIES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.70ac0b2d48", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_OPPORTUNITIES__a1a38a6f98a3e5bf81708be81c8eb0b0.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_OPPORTUNITIES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_OPPORTUNITIES__a1a38a6f98a3e5bf81708be81c8eb0b0", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_OPPORTUNITIES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__a1a38a6f98a3e5bf81708be81c8eb0b0.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__a1a38a6f98a3e5bf81708be81c8eb0b0.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_OPPORTUNITIES__a1a38a6f98a3e5bf81708be81c8eb0b0"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_OPPORTUNITIES_F\n    where K_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.cd0e27a0f1": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_OPPORTUNITIES__cbb6571e57052986132ac30323a5ed0c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CONTACTS_D')", "field": "K_CONTACT_DLHK", "column_name": "K_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_OPPORTUNITIES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_OPPORTUNITIES_F"]}, "config": {"enabled": true, "alias": "relationships_W_OPPORTUNITIES__cbb6571e57052986132ac30323a5ed0c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_OPPORTUNITIES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_"], "unique_id": "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.cd0e27a0f1", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_OPPORTUNITIES__cbb6571e57052986132ac30323a5ed0c.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_OPPORTUNITIES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_", "alias": "relationships_W_OPPORTUNITIES__cbb6571e57052986132ac30323a5ed0c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"], ["W_OPPORTUNITIES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__cbb6571e57052986132ac30323a5ed0c.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__cbb6571e57052986132ac30323a5ed0c.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_OPPORTUNITIES__cbb6571e57052986132ac30323a5ed0c"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CONTACT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_OPPORTUNITIES_F\n    where K_CONTACT_DLHK is not null\n),\n\nparent as (\n    select K_CONTACT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CONTACTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTACT_DLHK"}, "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CAMPAIGN_DLHK__K_CAMPAIGN_DLHK__ref_W_CAMPAIGNS_F_.f78730e1db": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_OPPORTUNITIES__b18b77b1eb3833fb32cd82c7624a2974\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CAMPAIGNS_F')", "field": "K_CAMPAIGN_DLHK", "column_name": "K_CAMPAIGN_DLHK", "model": "{{ get_where_subquery(ref('W_OPPORTUNITIES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_CAMPAIGNS_F", "model.snowflake_aicd.W_OPPORTUNITIES_F"]}, "config": {"enabled": true, "alias": "relationships_W_OPPORTUNITIES__b18b77b1eb3833fb32cd82c7624a2974", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "relationships_W_OPPORTUNITIES_F_K_CAMPAIGN_DLHK__K_CAMPAIGN_DLHK__ref_W_CAMPAIGNS_F_"], "unique_id": "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CAMPAIGN_DLHK__K_CAMPAIGN_DLHK__ref_W_CAMPAIGNS_F_.f78730e1db", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/relationships_W_OPPORTUNITIES__b18b77b1eb3833fb32cd82c7624a2974.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_OPPORTUNITIES_F_K_CAMPAIGN_DLHK__K_CAMPAIGN_DLHK__ref_W_CAMPAIGNS_F_", "alias": "relationships_W_OPPORTUNITIES__b18b77b1eb3833fb32cd82c7624a2974", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CAMPAIGNS_F"], ["W_OPPORTUNITIES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__b18b77b1eb3833fb32cd82c7624a2974.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/relationships_W_OPPORTUNITIES__b18b77b1eb3833fb32cd82c7624a2974.sql", "deferred": false, "unrendered_config": {"alias": "relationships_W_OPPORTUNITIES__b18b77b1eb3833fb32cd82c7624a2974"}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CAMPAIGN_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_OPPORTUNITIES_F\n    where K_CAMPAIGN_DLHK is not null\n),\n\nparent as (\n    select K_CAMPAIGN_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_SALESFORCE.W_CAMPAIGNS_F\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CAMPAIGN_DLHK"}, "test.snowflake_aicd.unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f74f98d8f": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_PRODUCT_PRICES_DLHK", "model": "{{ get_where_subquery(ref('W_PRODUCT_PRICES_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_PRODUCT_PRICES_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f74f98d8f", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK", "alias": "unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_PRODUCT_PRICES_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_PRODUCT_PRICES_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_PRODUCT_PRICES_D\nwhere K_PRODUCT_PRICES_DLHK is not null\ngroup by K_PRODUCT_PRICES_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PRODUCT_PRICES_DLHK"}, "test.snowflake_aicd.not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f05aab904": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_PRODUCT_PRICES_DLHK", "model": "{{ get_where_subquery(ref('W_PRODUCT_PRICES_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_PRODUCT_PRICES_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f05aab904", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK", "alias": "not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_PRODUCT_PRICES_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_PRODUCT_PRICES_D\nwhere K_PRODUCT_PRICES_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PRODUCT_PRICES_DLHK"}, "test.snowflake_aicd.unique_W_USERS_D_K_USER_DLHK.b1556b2586": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_USER_DLHK", "model": "{{ get_where_subquery(ref('W_USERS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_USERS_D_K_USER_DLHK"], "unique_id": "test.snowflake_aicd.unique_W_USERS_D_K_USER_DLHK.b1556b2586", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/unique_W_USERS_D_K_USER_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_USERS_D_K_USER_DLHK", "alias": "unique_W_USERS_D_K_USER_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/unique_W_USERS_D_K_USER_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/unique_W_USERS_D_K_USER_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect\n    K_USER_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\nwhere K_USER_DLHK is not null\ngroup by K_USER_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_USER_DLHK"}, "test.snowflake_aicd.not_null_W_USERS_D_K_USER_DLHK.0d40ac6240": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_USER_DLHK", "model": "{{ get_where_subquery(ref('W_USERS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.snowflake_aicd.W_USERS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_USERS_D_K_USER_DLHK"], "unique_id": "test.snowflake_aicd.not_null_W_USERS_D_K_USER_DLHK.0d40ac6240", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "schema_test/not_null_W_USERS_D_K_USER_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_USERS_D_K_USER_DLHK", "alias": "not_null_W_USERS_D_K_USER_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_USERS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/snowflake_aicd/models/schema.yml/schema_test/not_null_W_USERS_D_K_USER_DLHK.sql", "build_path": "target/run/snowflake_aicd/models/schema.yml/schema_test/not_null_W_USERS_D_K_USER_DLHK.sql", "deferred": false, "unrendered_config": {}, "created_at": 1646141225, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_SALESFORCE.W_USERS_D\nwhere K_USER_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_USER_DLHK"}}, "sources": {"source.snowflake_aicd.DEMO_SALESFORCE.LEAD": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "LEAD"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.LEAD", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "LEAD", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "LEAD", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"LEAD\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "ACCOUNT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ACCOUNT", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "ACCOUNT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"ACCOUNT\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.CONTACT": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "CONTACT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.CONTACT", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CONTACT", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "CONTACT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"CONTACT\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.OPPORTUNITY": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "OPPORTUNITY"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.OPPORTUNITY", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "OPPORTUNITY", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "OPPORTUNITY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"OPPORTUNITY\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "CAMPAIGN"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CAMPAIGN", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "CAMPAIGN", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"CAMPAIGN\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.CASE": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "CASE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.CASE", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CASE", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "CASE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"CASE\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.ASSET": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "ASSET"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.ASSET", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ASSET", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "ASSET", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"ASSET\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.CONTRACT": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "CONTRACT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.CONTRACT", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CONTRACT", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "CONTRACT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"CONTRACT\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.USER": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "USER"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.USER", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "USER", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "USER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"USER\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.USERROLE": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "USERROLE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.USERROLE", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "USERROLE", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "USERROLE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"USERROLE\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.PROFILE": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "PROFILE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.PROFILE", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PROFILE", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "PROFILE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"PROFILE\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.PRODUCT2": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "PRODUCT2"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.PRODUCT2", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PRODUCT2", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "PRODUCT2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"PRODUCT2\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOK2": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "PRICEBOOK2"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOK2", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PRICEBOOK2", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "PRICEBOOK2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"PRICEBOOK2\"", "created_at": 1646141225}, "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOKENTRY": {"fqn": ["snowflake_aicd", "sources", "DEMO_SALESFORCE", "PRICEBOOKENTRY"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_SALESFORCE", "unique_id": "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOKENTRY", "package_name": "snowflake_aicd", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/DLH-Core/Salesforce-Analytics/Models/DBT", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PRICEBOOKENTRY", "source_name": "DEMO_SALESFORCE", "source_description": "", "loader": "", "identifier": "PRICEBOOKENTRY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_SALESFORCE.\"PRICEBOOKENTRY\"", "created_at": 1646141225}}, "macros": {"macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1646141225}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.snowflake_aicd.V_OPPORTUNITIES_STG": ["model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_CAMPAIGNS_F", "model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_USERS_D", "source.snowflake_aicd.DEMO_SALESFORCE.OPPORTUNITY"], "model.snowflake_aicd.V_CONTRACTS_STG": ["model.snowflake_aicd.V_USERS_STG", "source.snowflake_aicd.DEMO_SALESFORCE.CONTRACT"], "model.snowflake_aicd.V_CONTACTS_STG": ["model.snowflake_aicd.V_USERS_STG", "source.snowflake_aicd.DEMO_SALESFORCE.CONTACT"], "model.snowflake_aicd.V_CASES_HIERARCHY": ["source.snowflake_aicd.DEMO_SALESFORCE.CASE", "source.snowflake_aicd.DEMO_SALESFORCE.CASE"], "model.snowflake_aicd.V_CASES_STG": ["model.snowflake_aicd.V_CASES_HIERARCHY", "model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_ASSETS_D", "model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_USERS_D", "source.snowflake_aicd.DEMO_SALESFORCE.CASE"], "model.snowflake_aicd.V_PRODUCTS_STG": ["model.snowflake_aicd.W_USERS_D", "source.snowflake_aicd.DEMO_SALESFORCE.PRODUCT2"], "model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG": ["model.snowflake_aicd.V_PRODUCTS_STG", "model.snowflake_aicd.W_USERS_D", "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOK2", "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOKENTRY"], "model.snowflake_aicd.V_LEADS_STG": ["model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_CAMPAIGNS_F", "model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_USERS_D", "source.snowflake_aicd.DEMO_SALESFORCE.LEAD"], "model.snowflake_aicd.V_ACCOUNTS_STG": ["model.snowflake_aicd.V_ACCOUNTS_HIERARCHY", "model.snowflake_aicd.V_USERS_STG", "source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT"], "model.snowflake_aicd.V_ACCOUNTS_HIERARCHY": ["source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT", "source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT"], "model.snowflake_aicd.V_USER_ROLE_HIERARCHY": ["source.snowflake_aicd.DEMO_SALESFORCE.USERROLE", "source.snowflake_aicd.DEMO_SALESFORCE.USERROLE"], "model.snowflake_aicd.V_USERS_STG": ["model.snowflake_aicd.V_USER_ROLE_HIERARCHY", "source.snowflake_aicd.DEMO_SALESFORCE.PROFILE", "source.snowflake_aicd.DEMO_SALESFORCE.USER"], "model.snowflake_aicd.V_CAMPAIGNS_HIERARCHY": ["source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN", "source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN"], "model.snowflake_aicd.V_CAMPAIGNS_STG": ["model.snowflake_aicd.V_CAMPAIGNS_HIERARCHY", "model.snowflake_aicd.W_USERS_D", "source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN"], "model.snowflake_aicd.V_ASSETS_STG": ["model.snowflake_aicd.V_USERS_STG", "source.snowflake_aicd.DEMO_SALESFORCE.ASSET"], "model.snowflake_aicd.W_ACCOUNTS_D": ["model.snowflake_aicd.V_ACCOUNTS_STG"], "model.snowflake_aicd.W_USERS_D": ["model.snowflake_aicd.V_USERS_STG"], "model.snowflake_aicd.W_LEADS_F": ["model.snowflake_aicd.V_LEADS_STG"], "model.snowflake_aicd.W_ASSETS_D": ["model.snowflake_aicd.V_ASSETS_STG"], "model.snowflake_aicd.W_CASES_F": ["model.snowflake_aicd.V_CASES_STG"], "model.snowflake_aicd.W_OPPORTUNITIES_F": ["model.snowflake_aicd.V_OPPORTUNITIES_STG"], "model.snowflake_aicd.W_PRODUCT_PRICES_D": ["model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG"], "model.snowflake_aicd.W_CAMPAIGNS_F": ["model.snowflake_aicd.V_CAMPAIGNS_STG"], "model.snowflake_aicd.W_CONTACTS_D": ["model.snowflake_aicd.V_CONTACTS_STG"], "model.snowflake_aicd.W_CONTRACTS_D": ["model.snowflake_aicd.V_CONTRACTS_STG"], "test.snowflake_aicd.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78": ["model.snowflake_aicd.W_ACCOUNTS_D"], "test.snowflake_aicd.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908": ["model.snowflake_aicd.W_ACCOUNTS_D"], "test.snowflake_aicd.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96": ["model.snowflake_aicd.W_ASSETS_D"], "test.snowflake_aicd.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1": ["model.snowflake_aicd.W_ASSETS_D"], "test.snowflake_aicd.unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.647e8a8922": ["model.snowflake_aicd.W_CAMPAIGNS_F"], "test.snowflake_aicd.not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.fdd9db7e7e": ["model.snowflake_aicd.W_CAMPAIGNS_F"], "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.84ed325df4": ["model.snowflake_aicd.W_CAMPAIGNS_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.9c2933ba77": ["model.snowflake_aicd.W_CAMPAIGNS_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.f45bd1288d": ["model.snowflake_aicd.W_CAMPAIGNS_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.unique_W_CASES_F_K_CASE_DLHK.3ea81e75b7": ["model.snowflake_aicd.W_CASES_F"], "test.snowflake_aicd.not_null_W_CASES_F_K_CASE_DLHK.108486fab6": ["model.snowflake_aicd.W_CASES_F"], "test.snowflake_aicd.relationships_W_CASES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.fd03243b9a": ["model.snowflake_aicd.W_CASES_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_CASES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.3ae209e2cf": ["model.snowflake_aicd.W_CASES_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_CASES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.7c27b08225": ["model.snowflake_aicd.W_CASES_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_CASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.76f260c382": ["model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_CASES_F"], "test.snowflake_aicd.relationships_W_CASES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.55c45dca2a": ["model.snowflake_aicd.W_CASES_F", "model.snowflake_aicd.W_CONTACTS_D"], "test.snowflake_aicd.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b": ["model.snowflake_aicd.W_CONTACTS_D"], "test.snowflake_aicd.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5": ["model.snowflake_aicd.W_CONTACTS_D"], "test.snowflake_aicd.unique_W_CONTRACTS_D_K_CONTRACT_DLHK.ec5d71be62": ["model.snowflake_aicd.W_CONTRACTS_D"], "test.snowflake_aicd.not_null_W_CONTRACTS_D_K_CONTRACT_DLHK.c882697e1b": ["model.snowflake_aicd.W_CONTRACTS_D"], "test.snowflake_aicd.unique_W_LEADS_F_K_LEAD_DLHK.f2b18b89af": ["model.snowflake_aicd.W_LEADS_F"], "test.snowflake_aicd.not_null_W_LEADS_F_K_LEAD_DLHK.8e32562cfc": ["model.snowflake_aicd.W_LEADS_F"], "test.snowflake_aicd.relationships_W_LEADS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.6734ce124f": ["model.snowflake_aicd.W_LEADS_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_LEADS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.4ee4ccb6f9": ["model.snowflake_aicd.W_LEADS_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_LEADS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.90ca78a95e": ["model.snowflake_aicd.W_LEADS_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.45e88789be": ["model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_LEADS_F"], "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.d4ec40aefd": ["model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_LEADS_F"], "test.snowflake_aicd.unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.29a3913d97": ["model.snowflake_aicd.W_OPPORTUNITIES_F"], "test.snowflake_aicd.not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.e88e444c3e": ["model.snowflake_aicd.W_OPPORTUNITIES_F"], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.e54465c5db": ["model.snowflake_aicd.W_OPPORTUNITIES_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.ec5202c69e": ["model.snowflake_aicd.W_OPPORTUNITIES_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.848245f09d": ["model.snowflake_aicd.W_OPPORTUNITIES_F", "model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.70ac0b2d48": ["model.snowflake_aicd.W_ACCOUNTS_D", "model.snowflake_aicd.W_OPPORTUNITIES_F"], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.cd0e27a0f1": ["model.snowflake_aicd.W_CONTACTS_D", "model.snowflake_aicd.W_OPPORTUNITIES_F"], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CAMPAIGN_DLHK__K_CAMPAIGN_DLHK__ref_W_CAMPAIGNS_F_.f78730e1db": ["model.snowflake_aicd.W_CAMPAIGNS_F", "model.snowflake_aicd.W_OPPORTUNITIES_F"], "test.snowflake_aicd.unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f74f98d8f": ["model.snowflake_aicd.W_PRODUCT_PRICES_D"], "test.snowflake_aicd.not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f05aab904": ["model.snowflake_aicd.W_PRODUCT_PRICES_D"], "test.snowflake_aicd.unique_W_USERS_D_K_USER_DLHK.b1556b2586": ["model.snowflake_aicd.W_USERS_D"], "test.snowflake_aicd.not_null_W_USERS_D_K_USER_DLHK.0d40ac6240": ["model.snowflake_aicd.W_USERS_D"], "source.snowflake_aicd.DEMO_SALESFORCE.LEAD": [], "source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT": [], "source.snowflake_aicd.DEMO_SALESFORCE.CONTACT": [], "source.snowflake_aicd.DEMO_SALESFORCE.OPPORTUNITY": [], "source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN": [], "source.snowflake_aicd.DEMO_SALESFORCE.CASE": [], "source.snowflake_aicd.DEMO_SALESFORCE.ASSET": [], "source.snowflake_aicd.DEMO_SALESFORCE.CONTRACT": [], "source.snowflake_aicd.DEMO_SALESFORCE.USER": [], "source.snowflake_aicd.DEMO_SALESFORCE.USERROLE": [], "source.snowflake_aicd.DEMO_SALESFORCE.PROFILE": [], "source.snowflake_aicd.DEMO_SALESFORCE.PRODUCT2": [], "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOK2": [], "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOKENTRY": []}, "child_map": {"model.snowflake_aicd.V_OPPORTUNITIES_STG": ["model.snowflake_aicd.W_OPPORTUNITIES_F"], "model.snowflake_aicd.V_CONTRACTS_STG": ["model.snowflake_aicd.W_CONTRACTS_D"], "model.snowflake_aicd.V_CONTACTS_STG": ["model.snowflake_aicd.W_CONTACTS_D"], "model.snowflake_aicd.V_CASES_HIERARCHY": ["model.snowflake_aicd.V_CASES_STG"], "model.snowflake_aicd.V_CASES_STG": ["model.snowflake_aicd.W_CASES_F"], "model.snowflake_aicd.V_PRODUCTS_STG": ["model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG"], "model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG": ["model.snowflake_aicd.W_PRODUCT_PRICES_D"], "model.snowflake_aicd.V_LEADS_STG": ["model.snowflake_aicd.W_LEADS_F"], "model.snowflake_aicd.V_ACCOUNTS_STG": ["model.snowflake_aicd.W_ACCOUNTS_D"], "model.snowflake_aicd.V_ACCOUNTS_HIERARCHY": ["model.snowflake_aicd.V_ACCOUNTS_STG"], "model.snowflake_aicd.V_USER_ROLE_HIERARCHY": ["model.snowflake_aicd.V_USERS_STG"], "model.snowflake_aicd.V_USERS_STG": ["model.snowflake_aicd.V_ACCOUNTS_STG", "model.snowflake_aicd.V_ASSETS_STG", "model.snowflake_aicd.V_CONTACTS_STG", "model.snowflake_aicd.V_CONTRACTS_STG", "model.snowflake_aicd.W_USERS_D"], "model.snowflake_aicd.V_CAMPAIGNS_HIERARCHY": ["model.snowflake_aicd.V_CAMPAIGNS_STG"], "model.snowflake_aicd.V_CAMPAIGNS_STG": ["model.snowflake_aicd.W_CAMPAIGNS_F"], "model.snowflake_aicd.V_ASSETS_STG": ["model.snowflake_aicd.W_ASSETS_D"], "model.snowflake_aicd.W_ACCOUNTS_D": ["model.snowflake_aicd.V_CASES_STG", "model.snowflake_aicd.V_LEADS_STG", "model.snowflake_aicd.V_OPPORTUNITIES_STG", "test.snowflake_aicd.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908", "test.snowflake_aicd.relationships_W_CASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.76f260c382", "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.45e88789be", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.70ac0b2d48", "test.snowflake_aicd.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78"], "model.snowflake_aicd.W_USERS_D": ["model.snowflake_aicd.V_CAMPAIGNS_STG", "model.snowflake_aicd.V_CASES_STG", "model.snowflake_aicd.V_LEADS_STG", "model.snowflake_aicd.V_OPPORTUNITIES_STG", "model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG", "model.snowflake_aicd.V_PRODUCTS_STG", "test.snowflake_aicd.not_null_W_USERS_D_K_USER_DLHK.0d40ac6240", "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.f45bd1288d", "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.9c2933ba77", "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.84ed325df4", "test.snowflake_aicd.relationships_W_CASES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.7c27b08225", "test.snowflake_aicd.relationships_W_CASES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.3ae209e2cf", "test.snowflake_aicd.relationships_W_CASES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.fd03243b9a", "test.snowflake_aicd.relationships_W_LEADS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.90ca78a95e", "test.snowflake_aicd.relationships_W_LEADS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.4ee4ccb6f9", "test.snowflake_aicd.relationships_W_LEADS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.6734ce124f", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.848245f09d", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.ec5202c69e", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.e54465c5db", "test.snowflake_aicd.unique_W_USERS_D_K_USER_DLHK.b1556b2586"], "model.snowflake_aicd.W_LEADS_F": ["test.snowflake_aicd.not_null_W_LEADS_F_K_LEAD_DLHK.8e32562cfc", "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.45e88789be", "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.d4ec40aefd", "test.snowflake_aicd.relationships_W_LEADS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.90ca78a95e", "test.snowflake_aicd.relationships_W_LEADS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.4ee4ccb6f9", "test.snowflake_aicd.relationships_W_LEADS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.6734ce124f", "test.snowflake_aicd.unique_W_LEADS_F_K_LEAD_DLHK.f2b18b89af"], "model.snowflake_aicd.W_ASSETS_D": ["model.snowflake_aicd.V_CASES_STG", "test.snowflake_aicd.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1", "test.snowflake_aicd.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96"], "model.snowflake_aicd.W_CASES_F": ["test.snowflake_aicd.not_null_W_CASES_F_K_CASE_DLHK.108486fab6", "test.snowflake_aicd.relationships_W_CASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.76f260c382", "test.snowflake_aicd.relationships_W_CASES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.55c45dca2a", "test.snowflake_aicd.relationships_W_CASES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.7c27b08225", "test.snowflake_aicd.relationships_W_CASES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.3ae209e2cf", "test.snowflake_aicd.relationships_W_CASES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.fd03243b9a", "test.snowflake_aicd.unique_W_CASES_F_K_CASE_DLHK.3ea81e75b7"], "model.snowflake_aicd.W_OPPORTUNITIES_F": ["test.snowflake_aicd.not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.e88e444c3e", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.70ac0b2d48", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CAMPAIGN_DLHK__K_CAMPAIGN_DLHK__ref_W_CAMPAIGNS_F_.f78730e1db", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.cd0e27a0f1", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.848245f09d", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.ec5202c69e", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.e54465c5db", "test.snowflake_aicd.unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.29a3913d97"], "model.snowflake_aicd.W_PRODUCT_PRICES_D": ["test.snowflake_aicd.not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f05aab904", "test.snowflake_aicd.unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f74f98d8f"], "model.snowflake_aicd.W_CAMPAIGNS_F": ["model.snowflake_aicd.V_LEADS_STG", "model.snowflake_aicd.V_OPPORTUNITIES_STG", "test.snowflake_aicd.not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.fdd9db7e7e", "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.f45bd1288d", "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.9c2933ba77", "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.84ed325df4", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CAMPAIGN_DLHK__K_CAMPAIGN_DLHK__ref_W_CAMPAIGNS_F_.f78730e1db", "test.snowflake_aicd.unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.647e8a8922"], "model.snowflake_aicd.W_CONTACTS_D": ["model.snowflake_aicd.V_CASES_STG", "model.snowflake_aicd.V_LEADS_STG", "model.snowflake_aicd.V_OPPORTUNITIES_STG", "test.snowflake_aicd.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5", "test.snowflake_aicd.relationships_W_CASES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.55c45dca2a", "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.d4ec40aefd", "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.cd0e27a0f1", "test.snowflake_aicd.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b"], "model.snowflake_aicd.W_CONTRACTS_D": ["test.snowflake_aicd.not_null_W_CONTRACTS_D_K_CONTRACT_DLHK.c882697e1b", "test.snowflake_aicd.unique_W_CONTRACTS_D_K_CONTRACT_DLHK.ec5d71be62"], "test.snowflake_aicd.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78": [], "test.snowflake_aicd.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908": [], "test.snowflake_aicd.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96": [], "test.snowflake_aicd.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1": [], "test.snowflake_aicd.unique_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.647e8a8922": [], "test.snowflake_aicd.not_null_W_CAMPAIGNS_F_K_CAMPAIGN_DLHK.fdd9db7e7e": [], "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.84ed325df4": [], "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.9c2933ba77": [], "test.snowflake_aicd.relationships_W_CAMPAIGNS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.f45bd1288d": [], "test.snowflake_aicd.unique_W_CASES_F_K_CASE_DLHK.3ea81e75b7": [], "test.snowflake_aicd.not_null_W_CASES_F_K_CASE_DLHK.108486fab6": [], "test.snowflake_aicd.relationships_W_CASES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.fd03243b9a": [], "test.snowflake_aicd.relationships_W_CASES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.3ae209e2cf": [], "test.snowflake_aicd.relationships_W_CASES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.7c27b08225": [], "test.snowflake_aicd.relationships_W_CASES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.76f260c382": [], "test.snowflake_aicd.relationships_W_CASES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.55c45dca2a": [], "test.snowflake_aicd.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b": [], "test.snowflake_aicd.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5": [], "test.snowflake_aicd.unique_W_CONTRACTS_D_K_CONTRACT_DLHK.ec5d71be62": [], "test.snowflake_aicd.not_null_W_CONTRACTS_D_K_CONTRACT_DLHK.c882697e1b": [], "test.snowflake_aicd.unique_W_LEADS_F_K_LEAD_DLHK.f2b18b89af": [], "test.snowflake_aicd.not_null_W_LEADS_F_K_LEAD_DLHK.8e32562cfc": [], "test.snowflake_aicd.relationships_W_LEADS_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.6734ce124f": [], "test.snowflake_aicd.relationships_W_LEADS_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.4ee4ccb6f9": [], "test.snowflake_aicd.relationships_W_LEADS_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.90ca78a95e": [], "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.45e88789be": [], "test.snowflake_aicd.relationships_W_LEADS_F_K_CONVERTED_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.d4ec40aefd": [], "test.snowflake_aicd.unique_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.29a3913d97": [], "test.snowflake_aicd.not_null_W_OPPORTUNITIES_F_K_OPPORTUNITY_DLHK.e88e444c3e": [], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_OWNER_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.e54465c5db": [], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_MODIFIED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.ec5202c69e": [], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CREATED_BY_USER_DLHK__K_USER_DLHK__ref_W_USERS_D_.848245f09d": [], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.70ac0b2d48": [], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.cd0e27a0f1": [], "test.snowflake_aicd.relationships_W_OPPORTUNITIES_F_K_CAMPAIGN_DLHK__K_CAMPAIGN_DLHK__ref_W_CAMPAIGNS_F_.f78730e1db": [], "test.snowflake_aicd.unique_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f74f98d8f": [], "test.snowflake_aicd.not_null_W_PRODUCT_PRICES_D_K_PRODUCT_PRICES_DLHK.8f05aab904": [], "test.snowflake_aicd.unique_W_USERS_D_K_USER_DLHK.b1556b2586": [], "test.snowflake_aicd.not_null_W_USERS_D_K_USER_DLHK.0d40ac6240": [], "source.snowflake_aicd.DEMO_SALESFORCE.LEAD": ["model.snowflake_aicd.V_LEADS_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.ACCOUNT": ["model.snowflake_aicd.V_ACCOUNTS_HIERARCHY", "model.snowflake_aicd.V_ACCOUNTS_HIERARCHY", "model.snowflake_aicd.V_ACCOUNTS_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.CONTACT": ["model.snowflake_aicd.V_CONTACTS_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.OPPORTUNITY": ["model.snowflake_aicd.V_OPPORTUNITIES_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.CAMPAIGN": ["model.snowflake_aicd.V_CAMPAIGNS_HIERARCHY", "model.snowflake_aicd.V_CAMPAIGNS_HIERARCHY", "model.snowflake_aicd.V_CAMPAIGNS_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.CASE": ["model.snowflake_aicd.V_CASES_HIERARCHY", "model.snowflake_aicd.V_CASES_HIERARCHY", "model.snowflake_aicd.V_CASES_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.ASSET": ["model.snowflake_aicd.V_ASSETS_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.CONTRACT": ["model.snowflake_aicd.V_CONTRACTS_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.USER": ["model.snowflake_aicd.V_USERS_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.USERROLE": ["model.snowflake_aicd.V_USER_ROLE_HIERARCHY", "model.snowflake_aicd.V_USER_ROLE_HIERARCHY"], "source.snowflake_aicd.DEMO_SALESFORCE.PROFILE": ["model.snowflake_aicd.V_USERS_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.PRODUCT2": ["model.snowflake_aicd.V_PRODUCTS_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOK2": ["model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG"], "source.snowflake_aicd.DEMO_SALESFORCE.PRICEBOOKENTRY": ["model.snowflake_aicd.V_PRICEBOOK_ENTRY_STG"]}}