{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v2.json", "dbt_version": "0.20.2", "generated_at": "2021-11-11T21:51:54.628868Z", "invocation_id": "a7015203-5729-48e2-8cc3-0fb4e008645a", "env": {}, "project_id": "87a161afd1ee6eb5247c2bdcf1288c37", "user_id": "52a73f95-4ee0-471f-9962-d9e37fa4d111", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.snowflake_aicd.W_CATALOG_ITEM_D": {"raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  --MD5 KEYS\r\n  K_POS_CATALOG_OBJECT_VARIATION_DLHK AS K_POS_CATALOG_OBJECT_DLHK\r\n  ,K_POS_CATALOG_OBJECT_DLHK AS K_POS_CATALOG_OBJECT_ITEM_DLHK\r\n  --BUSINESS KEYS\r\n  ,K_POS_CATALOG_OBJECT_VARIATION_BK AS K_POS_CATALOG_OBJECT_BK\r\n  ,K_POS_CATALOG_OBJECT_BK AS K_POS_CATALOG_OBJECT_ITEM_BK\r\n  --ATTRIBUTUES\r\n  ,A_POS_PRODUCT_VARIATION_NAME AS A_POS_CATALOG_OBJECT_NAME\r\n  ,A_POS_PRODUCT_NAME\r\n  ,A_POS_PRODUCT_SUB_NAME\r\n  ,A_POS_CATEGORY_NAME\r\n  ,A_POS_USAGE\r\n  ,A_POS_VARIATION_PRICE_MONEY_CURRENCY AS A_POS_PRICE_MONEY_CURRENY\r\n  ,A_POS_VARIATION_PRICING_TYPE AS A_POS_PRICING_TYPE\r\n  --METRICS\r\n  ,M_POS_PRICE_MONEY_AMOUNT\r\n  --METADATA\r\n  ,MD_LOAD_DTS\r\n  ,MD_INTGR_ID\r\nFROM\r\n  {{ref('V_CATALOG_ITEM_VARIATION_STG')}} AS CIV\r\n\r\nUNION ALL\r\n\r\nSELECT\r\n    --MD5 KEYS\r\n    K_POS_CATALOG_MODIFIER_DLHK\r\n    ,K_POS_CATALOG_OBJECT_DLHK\r\n    --BUSINESS KEYS\r\n    ,K_POS_CATALOG_MODIFIER_BK\r\n    ,K_POS_CATALOG_OBJECT_BK\r\n    --ATTRIBUTES  \r\n    ,A_POS_CATALOG_MODIFIER_NAME\r\n    ,A_POS_PRODUCT_NAME\r\n    ,A_POS_PRODUCT_SUB_NAME\r\n    ,A_POS_CATEGORY_NAME\r\n    ,A_POS_USAGE\r\n    ,A_POS_PRICE_MONEY_CURRENCY\r\n    ,NULL AS A_POS_PRICING_TYPE\r\n    --METRICS\r\n    ,M_PRICE_MONEY_AMOUNT\r\n    --METADATA (MD)\r\n    ,MD_LOAD_DTS\r\n    ,MD_INTGR_ID\r\nFROM\r\n  {{ref('V_CATALOG_ITEM_MODIFIER_STG')}} AS CIM", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG", "model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "master", "W_CATALOG_ITEM_D"], "unique_id": "model.snowflake_aicd.W_CATALOG_ITEM_D", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "master\\W_CATALOG_ITEM_D.sql", "original_file_path": "models\\master\\W_CATALOG_ITEM_D.sql", "name": "W_CATALOG_ITEM_D", "alias": "W_CATALOG_ITEM_D", "checksum": {"name": "sha256", "checksum": "944b66a67ec40a6e600a6fcd5e70493e6531d1c4b0f6c5e82a41c94f6a64ceec"}, "tags": ["staging", "daily"], "refs": [["V_CATALOG_ITEM_VARIATION_STG"], ["V_CATALOG_ITEM_MODIFIER_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\master\\W_CATALOG_ITEM_D.sql", "build_path": "target\\run\\snowflake_aicd\\models\\master\\W_CATALOG_ITEM_D.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\n\nSELECT\n  --MD5 KEYS\n  K_POS_CATALOG_OBJECT_VARIATION_DLHK AS K_POS_CATALOG_OBJECT_DLHK\n  ,K_POS_CATALOG_OBJECT_DLHK AS K_POS_CATALOG_OBJECT_ITEM_DLHK\n  --BUSINESS KEYS\n  ,K_POS_CATALOG_OBJECT_VARIATION_BK AS K_POS_CATALOG_OBJECT_BK\n  ,K_POS_CATALOG_OBJECT_BK AS K_POS_CATALOG_OBJECT_ITEM_BK\n  --ATTRIBUTUES\n  ,A_POS_PRODUCT_VARIATION_NAME AS A_POS_CATALOG_OBJECT_NAME\n  ,A_POS_PRODUCT_NAME\n  ,A_POS_PRODUCT_SUB_NAME\n  ,A_POS_CATEGORY_NAME\n  ,A_POS_USAGE\n  ,A_POS_VARIATION_PRICE_MONEY_CURRENCY AS A_POS_PRICE_MONEY_CURRENY\n  ,A_POS_VARIATION_PRICING_TYPE AS A_POS_PRICING_TYPE\n  --METRICS\n  ,M_POS_PRICE_MONEY_AMOUNT\n  --METADATA\n  ,MD_LOAD_DTS\n  ,MD_INTGR_ID\nFROM\n  DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_ITEM_VARIATION_STG AS CIV\n\nUNION ALL\n\nSELECT\n    --MD5 KEYS\n    K_POS_CATALOG_MODIFIER_DLHK\n    ,K_POS_CATALOG_OBJECT_DLHK\n    --BUSINESS KEYS\n    ,K_POS_CATALOG_MODIFIER_BK\n    ,K_POS_CATALOG_OBJECT_BK\n    --ATTRIBUTES  \n    ,A_POS_CATALOG_MODIFIER_NAME\n    ,A_POS_PRODUCT_NAME\n    ,A_POS_PRODUCT_SUB_NAME\n    ,A_POS_CATEGORY_NAME\n    ,A_POS_USAGE\n    ,A_POS_PRICE_MONEY_CURRENCY\n    ,NULL AS A_POS_PRICING_TYPE\n    --METRICS\n    ,M_PRICE_MONEY_AMOUNT\n    --METADATA (MD)\n    ,MD_LOAD_DTS\n    ,MD_INTGR_ID\nFROM\n  DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_ITEM_MODIFIER_STG AS CIM", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.W_CATALOG_ITEM_D"}, "model.snowflake_aicd.W_CURRENCY_D": {"raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  *\r\nFROM\r\n  {{ref('V_CURRENCY_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.snowflake_aicd.V_CURRENCY_STG"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "master", "W_CURRENCY_D"], "unique_id": "model.snowflake_aicd.W_CURRENCY_D", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "master\\W_CURRENCY_D.sql", "original_file_path": "models\\master\\W_CURRENCY_D.sql", "name": "W_CURRENCY_D", "alias": "W_CURRENCY_D", "checksum": {"name": "sha256", "checksum": "f391e72c51a5a79d6b23c85d797f17d654d1a977520738492baac927e3c908d3"}, "tags": ["staging", "daily"], "refs": [["V_CURRENCY_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\master\\W_CURRENCY_D.sql", "build_path": "target\\run\\snowflake_aicd\\models\\master\\W_CURRENCY_D.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_SQUARE.V_CURRENCY_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.W_CURRENCY_D"}, "model.snowflake_aicd.W_CUSTOMERS_D": {"raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  *\r\nFROM\r\n  {{ref('V_CUSTOMER_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.snowflake_aicd.V_CUSTOMER_STG"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "master", "W_CUSTOMERS_D"], "unique_id": "model.snowflake_aicd.W_CUSTOMERS_D", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "master\\W_CUSTOMERS_D.sql", "original_file_path": "models\\master\\W_CUSTOMERS_D.sql", "name": "W_CUSTOMERS_D", "alias": "W_CUSTOMERS_D", "checksum": {"name": "sha256", "checksum": "2ea423614ebebe4faf4d3c565bd8f249e9eceefac18e34fc266a45eda3d1d9d4"}, "tags": ["staging", "daily"], "refs": [["V_CUSTOMER_STG"]], "sources": [], "description": "This is the customers dimension table", "columns": {"CUSTOMER_ID": {"name": "CUSTOMER_ID", "description": "ID of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models\\schema.yml", "compiled_path": "target\\compiled\\snowflake_aicd\\models\\master\\W_CUSTOMERS_D.sql", "build_path": "target\\run\\snowflake_aicd\\models\\master\\W_CUSTOMERS_D.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_SQUARE.V_CUSTOMER_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.W_CUSTOMERS_D"}, "model.snowflake_aicd.W_MERCHANT_LOCATION_D": {"raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\n\r\nSELECT\r\n  *\r\nFROM\r\n  {{ref('V_MERCHANT_LOCATION_STG')}} AS M", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.snowflake_aicd.V_MERCHANT_LOCATION_STG"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "master", "W_MERCHANT_LOCATION_D"], "unique_id": "model.snowflake_aicd.W_MERCHANT_LOCATION_D", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "master\\W_MERCHANT_LOCATION_D.sql", "original_file_path": "models\\master\\W_MERCHANT_LOCATION_D.sql", "name": "W_MERCHANT_LOCATION_D", "alias": "W_MERCHANT_LOCATION_D", "checksum": {"name": "sha256", "checksum": "7804076995c7a68f40b845335fceb6620fff8f50ac45f2932630fc9aa89dd67b"}, "tags": ["staging", "daily"], "refs": [["V_MERCHANT_LOCATION_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\master\\W_MERCHANT_LOCATION_D.sql", "build_path": "target\\run\\snowflake_aicd\\models\\master\\W_MERCHANT_LOCATION_D.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT.V_MERCHANT_LOCATION_STG AS M", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.W_MERCHANT_LOCATION_D"}, "model.snowflake_aicd.W_ORDERS_F": {"raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source_item_allocated as (\r\n  select \r\n        MAX(OLI.M_ORDER_LINE_BASE_PRICE_AMT)/COUNT(1) AS M_POS_ITEM_BASE_PRICE_AMT\r\n        ,MAX(OLI.M_ORDER_LINE_GROSS_SALES_AMT)/COUNT(DISTINCT COALESCE(OLIM.K_POS_ORDER_ITEM_MODIFIER_DLHK,OLI.K_POS_ORDER_LINE_DLHK)) AS M_ORDER_LINE_GROSS_SALES_AMT\r\n        ,K_POS_ORDER_LINE_BK\r\n        ,OLI.K_POS_ORDER_BK\r\n        FROM \r\n        {{ref('V_ORDER_LINE_ITEM_STG')}} OLI\r\n        LEFT JOIN {{ref('V_ORDER_LINE_ITEM_MODIFIER_STG')}} OLIM ON OLIM.K_POS_ORDER_LINE_ITEM_BK = OLI.K_POS_ORDER_LINE_BK AND OLIM.K_POS_ORDER_BK = OLI.K_POS_ORDER_BK\r\n        GROUP BY K_POS_ORDER_LINE_BK, OLI.K_POS_ORDER_BK\r\n),\r\nsource_order_allocated as (\r\n  select MAX(O.M_NET_TIP_MONEY_AMT)/COUNT(1) AS M_NET_TIP_MONEY_AMT\r\n        ,MAX(O.M_TOTAL_SERVICE_CHARGE_AMT)/COUNT(1) AS M_TOTAL_SERVICE_CHARGE_AMT        \r\n        ,O.K_POS_ORDER_DLHK  \r\n        FROM \r\n\r\n        {{ref('V_ORDER_HEADER_STG')}} O\r\n        LEFT JOIN {{ref('V_ORDER_LINE_ITEM_STG')}} OLI ON OLI.K_POS_ORDER_DLHK = O.K_POS_ORDER_DLHK AND OLI.K_POS_ORDER_BK = O.K_POS_ORDER_BK\r\n        LEFT JOIN {{ref('V_ORDER_LINE_ITEM_MODIFIER_STG')}} OLIM ON OLIM.K_POS_ORDER_LINE_ITEM_BK = OLI.K_POS_ORDER_LINE_BK AND OLIM.K_POS_ORDER_BK = OLI.K_POS_ORDER_BK\r\n        GROUP BY O.K_POS_ORDER_DLHK\r\n),\r\nfinal as (\r\nSELECT\r\n  O.K_POS_ORDER_DLHK\r\n  ,O.K_POS_LOCATION_DLHK\r\n  ,O.K_POS_REFERENCE_DLHK\r\n  ,O.K_POS_CUSTOMER_DLHK  \r\n  ,O.K_POS_ORDER_BK\r\n  ,O.K_POS_LOCATION_BK\r\n  ,O.K_POS_CUSTOMER_BK\r\n  ,O.K_POS_REFERENCE_BK\r\n  ,O.A_ORDER_CREATED_DTS\r\n  ,O.A_ORDER_UPDATED_DTS\r\n  ,O.A_ORDER_CLOSED_DTS  \r\n  ,O.A_ORDER_STATE\r\n  ,O.A_ORDER_SOURCE \r\n  ,OLI.K_POS_ORDER_LINE_DLHK  \r\n  ,OLI.K_POS_CATALOG_OBJECT_DLHK\r\n  ,OLI.K_CURRENCY_DLHK\r\n  ,OLI.K_POS_ORDER_LINE_BK  \r\n  ,COALESCE(OLIM.K_POS_CATALOG_OBJECT_BK,OLI.K_POS_CATALOG_OBJECT_BK) AS K_POS_CATALOG_OBJECT_BK\r\n  ,OLI.A_POS_ORDER_LINE_NAME\r\n  ,OLI.M_POS_ORDER_LINE_QUANTITY\r\n  ,OLI.A_POS_ORDER_LINE_NOTE  \r\n  ,OLI.A_POS_ORDER_LINE_VARIATION_NAME\r\n  --,COALESCE(SIA.M_POS_ITEM_BASE_PRICE_AMT,0) + COALESCE(OLIM.M_BASE_PRICE_AMT,OLI.M_ORDER_LINE_BASE_PRICE_AMT) AS M_ALLOCATED_BASE_PRICE_AMT \r\n  ,ROUND(DIV0((OLI.M_ORDER_LINE_GROSS_SALES_AMT * SIA.M_ORDER_LINE_GROSS_SALES_AMT), OLI.M_ORDER_LINE_GROSS_SALES_AMT),4)::decimal(15,4) AS M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT  \r\n  ,ROUND(DIV0((OLI.M_ORDER_LINE_TOTAL_TAX_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT), OLI.M_ORDER_LINE_GROSS_SALES_AMT),4)::decimal(15,4) AS M_ALLOCATED_ORDER_LINE_TOTAL_TAX_AMT  \r\n  ,ROUND(DIV0((OLI.M_ORDER_LINE_TOTAL_DISCOUNT_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT), OLI.M_ORDER_LINE_GROSS_SALES_AMT),4)::decimal(15,4) AS M_ALLOCATED_ORDER_LINE_TOTAL_DISCOUNT_AMT  \r\n  ,ROUND(DIV0((OLI.M_POS_ITEM_NET_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT), OLI.M_ORDER_LINE_GROSS_SALES_AMT),4)::decimal(15,4) AS M_ALLOCATED_POS_ITEM_NET_AMT  \r\n  ,M_ALLOCATED_POS_ITEM_NET_AMT + M_ALLOCATED_ORDER_LINE_TOTAL_TAX_AMT AS M_ALLOCATED_POS_TOTAL_AMT\r\n  ,ROUND(DIV0((O.M_NET_TIP_MONEY_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT),O.M_TOTAL_AMT - O.M_TAX_TOTAL_AMT + O.M_DISCOUNT_TOTAL_AMT - O.M_NET_TIP_MONEY_AMT),4)::decimal(15,4) as M_ALLOCATED_NET_TIP_MONEY_AMT\r\n  ,ROUND(DIV0((O.M_TOTAL_SERVICE_CHARGE_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT),O.M_TOTAL_AMT - O.M_TAX_TOTAL_AMT + O.M_DISCOUNT_TOTAL_AMT - O.M_NET_TIP_MONEY_AMT),4)::decimal(15,4) as M_ALLOCATED_TOTAL_SERVICE_CHARGE_AMT\r\n  ,NVL(OLIM.M_BASE_PRICE_AMT,000)::decimal(15,4) AS M_POS_ITEM_MOD_PRICE_AMT\r\n  ,NVL(OLIM.M_TOTAL_PRICE_AMOUNT,000)::decimal(15,4) AS M_POS_ITEM_MOD_TOTAL_AMT  \r\n  ,O.MD_LOAD_DTS\r\n  ,O.MD_INTGR_ID\r\nFROM\r\n  {{ref('V_ORDER_HEADER_STG')}} AS O \r\n  LEFT JOIN {{ref('V_ORDER_LINE_ITEM_STG')}} OLI ON OLI.K_POS_ORDER_DLHK = O.K_POS_ORDER_DLHK\r\n  LEFT JOIN {{ref('V_ORDER_LINE_ITEM_MODIFIER_STG')}} OLIM ON OLIM.K_POS_ORDER_LINE_ITEM_BK = OLI.K_POS_ORDER_LINE_BK AND OLIM.K_POS_ORDER_BK = OLI.K_POS_ORDER_BK\r\n  LEFT JOIN source_item_allocated SIA ON SIA.K_POS_ORDER_LINE_BK = OLI.K_POS_ORDER_LINE_BK AND SIA.K_POS_ORDER_BK = OLI.K_POS_ORDER_BK\r\n  LEFT JOIN source_order_allocated SOA ON SOA.K_POS_ORDER_DLHK = O.K_POS_ORDER_DLHK  \r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.snowflake_aicd.V_ORDER_LINE_ITEM_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_ORDER_HEADER_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_ORDER_HEADER_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "master", "W_ORDERS_F"], "unique_id": "model.snowflake_aicd.W_ORDERS_F", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "master\\W_ORDERS_F.sql", "original_file_path": "models\\master\\W_ORDERS_F.sql", "name": "W_ORDERS_F", "alias": "W_ORDERS_F", "checksum": {"name": "sha256", "checksum": "aabebfd9f423749c42190366d6ac1f2bc943b16f3333ec3df80ab0b027805b3a"}, "tags": ["staging", "daily"], "refs": [["V_ORDER_LINE_ITEM_STG"], ["V_ORDER_LINE_ITEM_MODIFIER_STG"], ["V_ORDER_HEADER_STG"], ["V_ORDER_LINE_ITEM_STG"], ["V_ORDER_LINE_ITEM_MODIFIER_STG"], ["V_ORDER_HEADER_STG"], ["V_ORDER_LINE_ITEM_STG"], ["V_ORDER_LINE_ITEM_MODIFIER_STG"]], "sources": [], "description": "This is the fact orders table", "columns": {"CREATED_AT": {"name": "CREATED_AT", "description": "Date of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDER_ID": {"name": "ORDER_ID", "description": "ID of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ID": {"name": "CUSTOMER_ID", "description": "ID of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "snowflake_aicd://models\\schema.yml", "compiled_path": "target\\compiled\\snowflake_aicd\\models\\master\\W_ORDERS_F.sql", "build_path": "target\\run\\snowflake_aicd\\models\\master\\W_ORDERS_F.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\nWITH source_item_allocated as (\n  select \n        MAX(OLI.M_ORDER_LINE_BASE_PRICE_AMT)/COUNT(1) AS M_POS_ITEM_BASE_PRICE_AMT\n        ,MAX(OLI.M_ORDER_LINE_GROSS_SALES_AMT)/COUNT(DISTINCT COALESCE(OLIM.K_POS_ORDER_ITEM_MODIFIER_DLHK,OLI.K_POS_ORDER_LINE_DLHK)) AS M_ORDER_LINE_GROSS_SALES_AMT\n        ,K_POS_ORDER_LINE_BK\n        ,OLI.K_POS_ORDER_BK\n        FROM \n        DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_STG OLI\n        LEFT JOIN DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_MODIFIER_STG OLIM ON OLIM.K_POS_ORDER_LINE_ITEM_BK = OLI.K_POS_ORDER_LINE_BK AND OLIM.K_POS_ORDER_BK = OLI.K_POS_ORDER_BK\n        GROUP BY K_POS_ORDER_LINE_BK, OLI.K_POS_ORDER_BK\n),\nsource_order_allocated as (\n  select MAX(O.M_NET_TIP_MONEY_AMT)/COUNT(1) AS M_NET_TIP_MONEY_AMT\n        ,MAX(O.M_TOTAL_SERVICE_CHARGE_AMT)/COUNT(1) AS M_TOTAL_SERVICE_CHARGE_AMT        \n        ,O.K_POS_ORDER_DLHK  \n        FROM \n\n        DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_HEADER_STG O\n        LEFT JOIN DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_STG OLI ON OLI.K_POS_ORDER_DLHK = O.K_POS_ORDER_DLHK AND OLI.K_POS_ORDER_BK = O.K_POS_ORDER_BK\n        LEFT JOIN DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_MODIFIER_STG OLIM ON OLIM.K_POS_ORDER_LINE_ITEM_BK = OLI.K_POS_ORDER_LINE_BK AND OLIM.K_POS_ORDER_BK = OLI.K_POS_ORDER_BK\n        GROUP BY O.K_POS_ORDER_DLHK\n),\nfinal as (\nSELECT\n  O.K_POS_ORDER_DLHK\n  ,O.K_POS_LOCATION_DLHK\n  ,O.K_POS_REFERENCE_DLHK\n  ,O.K_POS_CUSTOMER_DLHK  \n  ,O.K_POS_ORDER_BK\n  ,O.K_POS_LOCATION_BK\n  ,O.K_POS_CUSTOMER_BK\n  ,O.K_POS_REFERENCE_BK\n  ,O.A_ORDER_CREATED_DTS\n  ,O.A_ORDER_UPDATED_DTS\n  ,O.A_ORDER_CLOSED_DTS  \n  ,O.A_ORDER_STATE\n  ,O.A_ORDER_SOURCE \n  ,OLI.K_POS_ORDER_LINE_DLHK  \n  ,OLI.K_POS_CATALOG_OBJECT_DLHK\n  ,OLI.K_CURRENCY_DLHK\n  ,OLI.K_POS_ORDER_LINE_BK  \n  ,COALESCE(OLIM.K_POS_CATALOG_OBJECT_BK,OLI.K_POS_CATALOG_OBJECT_BK) AS K_POS_CATALOG_OBJECT_BK\n  ,OLI.A_POS_ORDER_LINE_NAME\n  ,OLI.M_POS_ORDER_LINE_QUANTITY\n  ,OLI.A_POS_ORDER_LINE_NOTE  \n  ,OLI.A_POS_ORDER_LINE_VARIATION_NAME\n  --,COALESCE(SIA.M_POS_ITEM_BASE_PRICE_AMT,0) + COALESCE(OLIM.M_BASE_PRICE_AMT,OLI.M_ORDER_LINE_BASE_PRICE_AMT) AS M_ALLOCATED_BASE_PRICE_AMT \n  ,ROUND(DIV0((OLI.M_ORDER_LINE_GROSS_SALES_AMT * SIA.M_ORDER_LINE_GROSS_SALES_AMT), OLI.M_ORDER_LINE_GROSS_SALES_AMT),4)::decimal(15,4) AS M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT  \n  ,ROUND(DIV0((OLI.M_ORDER_LINE_TOTAL_TAX_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT), OLI.M_ORDER_LINE_GROSS_SALES_AMT),4)::decimal(15,4) AS M_ALLOCATED_ORDER_LINE_TOTAL_TAX_AMT  \n  ,ROUND(DIV0((OLI.M_ORDER_LINE_TOTAL_DISCOUNT_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT), OLI.M_ORDER_LINE_GROSS_SALES_AMT),4)::decimal(15,4) AS M_ALLOCATED_ORDER_LINE_TOTAL_DISCOUNT_AMT  \n  ,ROUND(DIV0((OLI.M_POS_ITEM_NET_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT), OLI.M_ORDER_LINE_GROSS_SALES_AMT),4)::decimal(15,4) AS M_ALLOCATED_POS_ITEM_NET_AMT  \n  ,M_ALLOCATED_POS_ITEM_NET_AMT + M_ALLOCATED_ORDER_LINE_TOTAL_TAX_AMT AS M_ALLOCATED_POS_TOTAL_AMT\n  ,ROUND(DIV0((O.M_NET_TIP_MONEY_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT),O.M_TOTAL_AMT - O.M_TAX_TOTAL_AMT + O.M_DISCOUNT_TOTAL_AMT - O.M_NET_TIP_MONEY_AMT),4)::decimal(15,4) as M_ALLOCATED_NET_TIP_MONEY_AMT\n  ,ROUND(DIV0((O.M_TOTAL_SERVICE_CHARGE_AMT * M_ALLOCATED_ORDER_LINE_GROSS_SALES_AMT),O.M_TOTAL_AMT - O.M_TAX_TOTAL_AMT + O.M_DISCOUNT_TOTAL_AMT - O.M_NET_TIP_MONEY_AMT),4)::decimal(15,4) as M_ALLOCATED_TOTAL_SERVICE_CHARGE_AMT\n  ,NVL(OLIM.M_BASE_PRICE_AMT,000)::decimal(15,4) AS M_POS_ITEM_MOD_PRICE_AMT\n  ,NVL(OLIM.M_TOTAL_PRICE_AMOUNT,000)::decimal(15,4) AS M_POS_ITEM_MOD_TOTAL_AMT  \n  ,O.MD_LOAD_DTS\n  ,O.MD_INTGR_ID\nFROM\n  DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_HEADER_STG AS O \n  LEFT JOIN DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_STG OLI ON OLI.K_POS_ORDER_DLHK = O.K_POS_ORDER_DLHK\n  LEFT JOIN DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_MODIFIER_STG OLIM ON OLIM.K_POS_ORDER_LINE_ITEM_BK = OLI.K_POS_ORDER_LINE_BK AND OLIM.K_POS_ORDER_BK = OLI.K_POS_ORDER_BK\n  LEFT JOIN source_item_allocated SIA ON SIA.K_POS_ORDER_LINE_BK = OLI.K_POS_ORDER_LINE_BK AND SIA.K_POS_ORDER_BK = OLI.K_POS_ORDER_BK\n  LEFT JOIN source_order_allocated SOA ON SOA.K_POS_ORDER_DLHK = O.K_POS_ORDER_DLHK  \n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.W_ORDERS_F"}, "model.snowflake_aicd.W_PAYMENTS_F": {"raw_sql": "{{ config (\r\n  materialized= 'table',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nSELECT\r\n    K_POS_PAYMENT_DLHK \r\n    ,K_POS_MERCH_LOC_DLHK\r\n    ,K_POS_ORDER_DLHK\r\n    ,K_POS_CUSTOMER_DLHK \r\n    ,K_CURRENCY_DLHK\r\n    ,K_EMPLOYEE_DLHK\r\n    ,K_DATE_ID\r\n    ,K_POS_PAYMENT_BK\r\n    ,K_POS_PAYMENT_LOCATION_BK\r\n    ,K_POS_PAYMENT_ORDER_BK\r\n    ,K_POS_PAYMENT_CUSTOMER_BK\r\n    ,K_EMPLOYEE_BK\r\n    ,M_PAYMENT_MONEY_AMT\r\n    ,M_PAYMENT_APP_FEE_AMT\r\n    ,M_PAYMENT_REFUND_MONEY_AMT\r\n    ,M_PAYMENT_TIP_AMT\r\n    ,A_POS_PAYMENT_CURRENCY\r\n    ,A_POS_PAYMENT_RECEIPT_NUMBER\r\n    ,A_POS_PAYMENT_RECEIPT_URL\r\n    ,A_POS_PAYMENT_SOURCE_TYPE\r\n    ,A_POS_PAYMENT_STATUS\r\n    ,A_POS_PAYMENT_CREATED_DTS\r\n    ,A_POS_PAYMENT_UPDATED_DTS   \r\n    ,MD_LOAD_DTS\r\n    ,MD_HASH_COL\r\n    ,MD_INTGR_ID\r\nFROM\r\n  {{ref('V_PAYMENT_STG')}} AS P", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.snowflake_aicd.V_PAYMENT_STG"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "master", "W_PAYMENTS_F"], "unique_id": "model.snowflake_aicd.W_PAYMENTS_F", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "master\\W_PAYMENTS_F.sql", "original_file_path": "models\\master\\W_PAYMENTS_F.sql", "name": "W_PAYMENTS_F", "alias": "W_PAYMENTS_F", "checksum": {"name": "sha256", "checksum": "721240fe38136108cb4a6a3ac323b7d1fe3f5b1be7c4f3a0c402b6c64ff30a95"}, "tags": ["staging", "daily"], "refs": [["V_PAYMENT_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\master\\W_PAYMENTS_F.sql", "build_path": "target\\run\\snowflake_aicd\\models\\master\\W_PAYMENTS_F.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "table", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\nSELECT\n    K_POS_PAYMENT_DLHK \n    ,K_POS_MERCH_LOC_DLHK\n    ,K_POS_ORDER_DLHK\n    ,K_POS_CUSTOMER_DLHK \n    ,K_CURRENCY_DLHK\n    ,K_EMPLOYEE_DLHK\n    ,K_DATE_ID\n    ,K_POS_PAYMENT_BK\n    ,K_POS_PAYMENT_LOCATION_BK\n    ,K_POS_PAYMENT_ORDER_BK\n    ,K_POS_PAYMENT_CUSTOMER_BK\n    ,K_EMPLOYEE_BK\n    ,M_PAYMENT_MONEY_AMT\n    ,M_PAYMENT_APP_FEE_AMT\n    ,M_PAYMENT_REFUND_MONEY_AMT\n    ,M_PAYMENT_TIP_AMT\n    ,A_POS_PAYMENT_CURRENCY\n    ,A_POS_PAYMENT_RECEIPT_NUMBER\n    ,A_POS_PAYMENT_RECEIPT_URL\n    ,A_POS_PAYMENT_SOURCE_TYPE\n    ,A_POS_PAYMENT_STATUS\n    ,A_POS_PAYMENT_CREATED_DTS\n    ,A_POS_PAYMENT_UPDATED_DTS   \n    ,MD_LOAD_DTS\n    ,MD_HASH_COL\n    ,MD_INTGR_ID\nFROM\n  DEVELOPER_SANDBOX.DBT_SQUARE.V_PAYMENT_STG AS P", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.W_PAYMENTS_F"}, "model.snowflake_aicd.V_CATALOG_CATEGORY_STG": {"raw_sql": "{{ config(\r\n    enabled=true,\r\n    materialized= 'view',\r\n    schema= 'SQUARE',\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','CATALOG_CATEGORY')}}\r\n),\r\n\r\nrename as (\r\n\r\n\r\nSELECT\r\n       --MD5 KEYS\r\n        MD5( ID ) AS K_POS_CATALOG_CATEGORY_DLHK        \r\n        --BUSINESS KEYS\r\n        ,ID AS K_POS_CATALOG_CATEGORY_BK        \r\n        --DESCRIPTION\r\n        ,NAME AS A_POS_PRODUCT_CATEGORY        \r\n        --metadata (MD)\r\n        , CURRENT_TIMESTAMP AS MD_LOAD_DTS        \r\n        , '{{invocation_id}}' AS MD_INTGR_ID\r\nFROM\r\n    source\r\n)\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.CATALOG_CATEGORY"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "CATALOG", "V_CATALOG_CATEGORY_STG"], "unique_id": "model.snowflake_aicd.V_CATALOG_CATEGORY_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\CATALOG\\V_CATALOG_CATEGORY_STG.sql", "original_file_path": "models\\staging\\CATALOG\\V_CATALOG_CATEGORY_STG.sql", "name": "V_CATALOG_CATEGORY_STG", "alias": "V_CATALOG_CATEGORY_STG", "checksum": {"name": "sha256", "checksum": "d7687663dd9576496fe9676ee539371ac808c7651f40d36d485de450dbc0549c"}, "tags": ["staging", "daily"], "refs": [], "sources": [["OLD_SQUARE", "CATALOG_CATEGORY"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_CATEGORY_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_CATEGORY_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "enabled": true, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_CATEGORY\"\n),\n\nrename as (\n\n\nSELECT\n       --MD5 KEYS\n        MD5( ID ) AS K_POS_CATALOG_CATEGORY_DLHK        \n        --BUSINESS KEYS\n        ,ID AS K_POS_CATALOG_CATEGORY_BK        \n        --DESCRIPTION\n        ,NAME AS A_POS_PRODUCT_CATEGORY        \n        --metadata (MD)\n        , CURRENT_TIMESTAMP AS MD_LOAD_DTS        \n        , 'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\nFROM\n    source\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_CATEGORY_STG"}, "model.snowflake_aicd.V_CATALOG_DISCOUNT": {"raw_sql": "{{ config(\r\n    enabled=true,\r\n    materialized= 'view',\r\n    schema= 'SQUARE',\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','CATALOG_DISCOUNT')}}\r\n),\r\n\r\nrename as (\r\nSELECT DISTINCT\r\n    --MD5 KEYS    \r\n    MD5( TRIM(ID) ) AS K_POS_CATALOG_OBJECT_DLHK\r\n    --BUSINESS KEYS\r\n    ,ID AS K_POS_CATALOG_OBJECT_BK\r\n    --ATTRIBUTES\r\n    ,NAME AS A_POS_PRODUCT_NAME\r\n    ,COALESCE(NAME, 'N/A') AS A_POS_PRODUCT_SUB_NAME\r\n    ,'TAX' AS A_POS_CATEGORY_NAME\r\n    ,'CATALOG TAX' AS A_POS_USAGE\r\n    ,0.00::decimal(15,2) AS M_POS_ITEM_BASE_COST_AMT\r\n    ,0.00::decimal(15,2) AS M_POS_ITEM_BASE_PRICE_AMT\r\n    ,0.00::decimal(15,2) AS M_POS_PRICE_AMT\r\n    ,'USD' AS POS_PRICE_CCY\r\n    --METADATA (MD)\r\n    ,CURRENT_TIMESTAMP AS MD_LOAD_DTS        \r\n    ,'{{invocation_id}}' AS MD_INTGR_ID\r\nFROM\r\n    source\r\n)\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.CATALOG_DISCOUNT"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "CATALOG", "V_CATALOG_DISCOUNT"], "unique_id": "model.snowflake_aicd.V_CATALOG_DISCOUNT", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\CATALOG\\V_CATALOG_DISCOUNT.sql", "original_file_path": "models\\staging\\CATALOG\\V_CATALOG_DISCOUNT.sql", "name": "V_CATALOG_DISCOUNT", "alias": "V_CATALOG_DISCOUNT", "checksum": {"name": "sha256", "checksum": "68b8a1deb151ca45e7337c1441854c303a1c3ce12a44774971f892e0752fe85d"}, "tags": ["staging", "daily"], "refs": [], "sources": [["OLD_SQUARE", "CATALOG_DISCOUNT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_DISCOUNT.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_DISCOUNT.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "enabled": true, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_DISCOUNT\"\n),\n\nrename as (\nSELECT DISTINCT\n    --MD5 KEYS    \n    MD5( TRIM(ID) ) AS K_POS_CATALOG_OBJECT_DLHK\n    --BUSINESS KEYS\n    ,ID AS K_POS_CATALOG_OBJECT_BK\n    --ATTRIBUTES\n    ,NAME AS A_POS_PRODUCT_NAME\n    ,COALESCE(NAME, 'N/A') AS A_POS_PRODUCT_SUB_NAME\n    ,'TAX' AS A_POS_CATEGORY_NAME\n    ,'CATALOG TAX' AS A_POS_USAGE\n    ,0.00::decimal(15,2) AS M_POS_ITEM_BASE_COST_AMT\n    ,0.00::decimal(15,2) AS M_POS_ITEM_BASE_PRICE_AMT\n    ,0.00::decimal(15,2) AS M_POS_PRICE_AMT\n    ,'USD' AS POS_PRICE_CCY\n    --METADATA (MD)\n    ,CURRENT_TIMESTAMP AS MD_LOAD_DTS        \n    ,'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\nFROM\n    source\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_DISCOUNT"}, "model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG": {"raw_sql": "{{ config(\r\n    enabled=true,\r\n    materialized= 'view',\r\n    schema= 'SQUARE',\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source_catalog_modifier AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','CATALOG_MODIFIER')}}\r\n),\r\nsource_order_line_item_modifier AS (\r\nSELECT DISTINCT  K_POS_ORDER_LINE_ITEM_BK,K_POS_CATALOG_OBJECT_BK FROM  {{ref('V_ORDER_LINE_ITEM_MODIFIER_STG')}}\r\n),\r\nsource_order_line_item AS (\r\nSELECT DISTINCT K_POS_CATALOG_OBJECT_DLHK,K_POS_CATALOG_OBJECT_BK, K_POS_ORDER_LINE_BK,A_POS_ORDER_LINE_NAME,A_POS_ORDER_LINE_VARIATION_NAME FROM  {{ref('V_ORDER_LINE_ITEM_STG')}}\r\n),\r\nsource_catalog_item AS (\r\nSELECT DISTINCT K_POS_CATALOG_OBJECT_VARIATION_DLHK,K_POS_CATALOG_OBJECT_VARIATION_BK,A_POS_CATEGORY_NAME,A_POS_PRODUCT_NAME,K_POS_CATALOG_OBJECT_BK,K_POS_CATALOG_OBJECT_DLHK FROM  {{ref('V_CATALOG_ITEM_VARIATION_STG')}}\r\n),\r\nsource_category AS (\r\n  SELECT * FROM  {{ref('V_CATALOG_CATEGORY_STG')}}\r\n),\r\nrename as (\r\nSELECT DISTINCT\r\n       --MD5 KEYS\r\n         MD5( TRIM(COALESCE(CM.ID, '00000000000000000000000000000000'))  ) AS K_POS_CATALOG_MODIFIER_DLHK\r\n         ,CI.K_POS_CATALOG_OBJECT_DLHK         \r\n        --BUSINESS KEYS        \r\n        ,CM.ID AS K_POS_CATALOG_MODIFIER_BK      \r\n        ,CI.K_POS_CATALOG_OBJECT_BK\r\n        --ATTRIBUTES\r\n        ,COALESCE(CI.A_POS_PRODUCT_NAME, OLI.A_POS_ORDER_LINE_NAME) AS A_POS_PRODUCT_NAME\r\n        ,COALESCE(OLI.A_POS_ORDER_LINE_VARIATION_NAME, 'N/A') AS A_POS_PRODUCT_SUB_NAME        \r\n        ,CI.A_POS_CATEGORY_NAME\r\n        ,'ORDER LINE ITEM MODIFIER' AS A_POS_USAGE       \r\n        --METRICS\r\n        ,CM.PRICE_MONEY_AMOUNT AS M_PRICE_MONEY_AMOUNT        \r\n        --DESCRIPTION\r\n        ,CM.PRICE_MONEY_CURRENCY AS A_POS_PRICE_MONEY_CURRENCY\r\n        ,CM.NAME AS A_POS_CATALOG_MODIFIER_NAME\r\n        --metadata (MD)\r\n        ,CURRENT_TIMESTAMP AS MD_LOAD_DTS        \r\n        ,'{{invocation_id}}' AS MD_INTGR_ID\r\nFROM\r\n    source_order_line_item_modifier AS OLIM\r\n    INNER JOIN source_catalog_modifier AS CM ON CM.ID = OLIM.K_POS_CATALOG_OBJECT_BK    \r\n    INNER JOIN source_order_line_item as OLI ON OLI.K_POS_ORDER_LINE_BK = OLIM.K_POS_ORDER_LINE_ITEM_BK    \r\n    LEFT JOIN source_catalog_item CI ON CI.K_POS_CATALOG_OBJECT_VARIATION_BK = OLI.K_POS_CATALOG_OBJECT_BK    \r\n)\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.CATALOG_MODIFIER", "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG", "model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG", "model.snowflake_aicd.V_CATALOG_CATEGORY_STG"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "CATALOG", "V_CATALOG_ITEM_MODIFIER_STG"], "unique_id": "model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\CATALOG\\V_CATALOG_ITEM_MODIFIER_STG.sql", "original_file_path": "models\\staging\\CATALOG\\V_CATALOG_ITEM_MODIFIER_STG.sql", "name": "V_CATALOG_ITEM_MODIFIER_STG", "alias": "V_CATALOG_ITEM_MODIFIER_STG", "checksum": {"name": "sha256", "checksum": "c1498104c5a05c655ec22b495ef53ac80d9f56995165bf424235b935bae44314"}, "tags": ["staging", "daily"], "refs": [["V_ORDER_LINE_ITEM_MODIFIER_STG"], ["V_ORDER_LINE_ITEM_STG"], ["V_CATALOG_ITEM_VARIATION_STG"], ["V_CATALOG_CATEGORY_STG"]], "sources": [["OLD_SQUARE", "CATALOG_MODIFIER"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_ITEM_MODIFIER_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_ITEM_MODIFIER_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "enabled": true, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n \n\nWITH source_catalog_modifier AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_MODIFIER\"\n),\nsource_order_line_item_modifier AS (\nSELECT DISTINCT  K_POS_ORDER_LINE_ITEM_BK,K_POS_CATALOG_OBJECT_BK FROM  DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_MODIFIER_STG\n),\nsource_order_line_item AS (\nSELECT DISTINCT K_POS_CATALOG_OBJECT_DLHK,K_POS_CATALOG_OBJECT_BK, K_POS_ORDER_LINE_BK,A_POS_ORDER_LINE_NAME,A_POS_ORDER_LINE_VARIATION_NAME FROM  DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_STG\n),\nsource_catalog_item AS (\nSELECT DISTINCT K_POS_CATALOG_OBJECT_VARIATION_DLHK,K_POS_CATALOG_OBJECT_VARIATION_BK,A_POS_CATEGORY_NAME,A_POS_PRODUCT_NAME,K_POS_CATALOG_OBJECT_BK,K_POS_CATALOG_OBJECT_DLHK FROM  DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_ITEM_VARIATION_STG\n),\nsource_category AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_CATEGORY_STG\n),\nrename as (\nSELECT DISTINCT\n       --MD5 KEYS\n         MD5( TRIM(COALESCE(CM.ID, '00000000000000000000000000000000'))  ) AS K_POS_CATALOG_MODIFIER_DLHK\n         ,CI.K_POS_CATALOG_OBJECT_DLHK         \n        --BUSINESS KEYS        \n        ,CM.ID AS K_POS_CATALOG_MODIFIER_BK      \n        ,CI.K_POS_CATALOG_OBJECT_BK\n        --ATTRIBUTES\n        ,COALESCE(CI.A_POS_PRODUCT_NAME, OLI.A_POS_ORDER_LINE_NAME) AS A_POS_PRODUCT_NAME\n        ,COALESCE(OLI.A_POS_ORDER_LINE_VARIATION_NAME, 'N/A') AS A_POS_PRODUCT_SUB_NAME        \n        ,CI.A_POS_CATEGORY_NAME\n        ,'ORDER LINE ITEM MODIFIER' AS A_POS_USAGE       \n        --METRICS\n        ,CM.PRICE_MONEY_AMOUNT AS M_PRICE_MONEY_AMOUNT        \n        --DESCRIPTION\n        ,CM.PRICE_MONEY_CURRENCY AS A_POS_PRICE_MONEY_CURRENCY\n        ,CM.NAME AS A_POS_CATALOG_MODIFIER_NAME\n        --metadata (MD)\n        ,CURRENT_TIMESTAMP AS MD_LOAD_DTS        \n        ,'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\nFROM\n    source_order_line_item_modifier AS OLIM\n    INNER JOIN source_catalog_modifier AS CM ON CM.ID = OLIM.K_POS_CATALOG_OBJECT_BK    \n    INNER JOIN source_order_line_item as OLI ON OLI.K_POS_ORDER_LINE_BK = OLIM.K_POS_ORDER_LINE_ITEM_BK    \n    LEFT JOIN source_catalog_item CI ON CI.K_POS_CATALOG_OBJECT_VARIATION_BK = OLI.K_POS_CATALOG_OBJECT_BK    \n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_ITEM_MODIFIER_STG"}, "model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG": {"raw_sql": "{{ config(\r\n    enabled=true,\r\n    materialized= 'view',\r\n    schema= 'SQUARE',\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','CATALOG_ITEM')}}\r\n),\r\nsource_variation AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','CATALOG_ITEM_VARIATION')}}\r\n),\r\nsource_category AS (\r\n  SELECT * FROM  {{ref('V_CATALOG_CATEGORY_STG')}}\r\n),\r\nsource_order_line_item AS (\r\nSELECT DISTINCT K_POS_CATALOG_OBJECT_DLHK,K_POS_CATALOG_OBJECT_BK, K_POS_ORDER_LINE_BK,A_POS_ORDER_LINE_VARIATION_NAME,A_POS_ORDER_LINE_NAME  FROM  {{ref('V_ORDER_LINE_ITEM_STG')}}\r\n),\r\nrename as (\r\n\r\n\r\nSELECT DISTINCT\r\n       --MD5 KEYS        \r\n        MD5( V.ID ) AS K_POS_CATALOG_OBJECT_VARIATION_DLHK        \r\n        ,MD5( S.ID ) AS K_POS_CATALOG_OBJECT_DLHK      \r\n        --BUSINESS KEYS\r\n        ,V.ID AS K_POS_CATALOG_OBJECT_VARIATION_BK       \r\n        ,S.ID AS K_POS_CATALOG_OBJECT_BK\r\n        --DESCRIPTION\r\n        ,COALESCE(S.NAME, OLI.A_POS_ORDER_LINE_NAME) AS A_POS_PRODUCT_NAME\r\n        ,COALESCE(OLI.A_POS_ORDER_LINE_VARIATION_NAME, 'N/A') AS A_POS_PRODUCT_SUB_NAME\r\n        ,COALESCE(CAT.A_POS_PRODUCT_CATEGORY, 'No Category') AS A_POS_CATEGORY_NAME\r\n        , 'ORDER LINE ITEM VARIATION' AS A_POS_USAGE\r\n        ,S.DESCRIPTION AS A_POS_PRODUCT_DESCRIPTION\r\n        ,S.ABBREVIATION AS A_POS_PRODUCT_ABBREVIATION\r\n        ,S.PRODUCT_TYPE AS A_POS_PRODUCT_TYPE\r\n        ,V.NAME AS A_POS_PRODUCT_VARIATION_NAME\r\n        ,V.SKU AS A_POS_PRODUCT_SKU\r\n        ,V.UPC AS A_POS_PRODUCT_UPC\r\n        ,V.ORDINAL AS A_POS_ORDINAL_VARIATION \r\n        ,V.PRICING_TYPE AS A_POS_VARIATION_PRICING_TYPE\r\n        ,V.PRICE_MONEY_CURRENCY AS A_POS_VARIATION_PRICE_MONEY_CURRENCY\r\n        --METRIC\r\n        ,V.PRICE_MONEY_AMOUNT AS M_POS_PRICE_MONEY_AMOUNT\r\n        --metadata (MD)\r\n        , CURRENT_TIMESTAMP AS MD_LOAD_DTS        \r\n        , '{{invocation_id}}' AS MD_INTGR_ID\r\nFROM\r\n    source S\r\n    INNER JOIN source_variation AS V ON V.ITEM_ID = S.ID\r\n    INNER JOIN source_order_line_item AS OLI ON V.ID = OLI.K_POS_CATALOG_OBJECT_BK\r\n    LEFT JOIN source_category AS CAT ON CAT.K_POS_CATALOG_CATEGORY_BK = S.CATEGORY_ID\r\n    \r\n)\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM", "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM_VARIATION", "model.snowflake_aicd.V_CATALOG_CATEGORY_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "CATALOG", "V_CATALOG_ITEM_VARIATION_STG"], "unique_id": "model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\CATALOG\\V_CATALOG_ITEM_VARIATION_STG.sql", "original_file_path": "models\\staging\\CATALOG\\V_CATALOG_ITEM_VARIATION_STG.sql", "name": "V_CATALOG_ITEM_VARIATION_STG", "alias": "V_CATALOG_ITEM_VARIATION_STG", "checksum": {"name": "sha256", "checksum": "0a355cc7820ba57228c875f95d8027208e749e7b22e8732e52a19e89e8e782db"}, "tags": ["staging", "daily"], "refs": [["V_CATALOG_CATEGORY_STG"], ["V_ORDER_LINE_ITEM_STG"]], "sources": [["OLD_SQUARE", "CATALOG_ITEM"], ["OLD_SQUARE", "CATALOG_ITEM_VARIATION"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_ITEM_VARIATION_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_ITEM_VARIATION_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "enabled": true, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_ITEM\"\n),\nsource_variation AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_ITEM_VARIATION\"\n),\nsource_category AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_CATEGORY_STG\n),\nsource_order_line_item AS (\nSELECT DISTINCT K_POS_CATALOG_OBJECT_DLHK,K_POS_CATALOG_OBJECT_BK, K_POS_ORDER_LINE_BK,A_POS_ORDER_LINE_VARIATION_NAME,A_POS_ORDER_LINE_NAME  FROM  DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_STG\n),\nrename as (\n\n\nSELECT DISTINCT\n       --MD5 KEYS        \n        MD5( V.ID ) AS K_POS_CATALOG_OBJECT_VARIATION_DLHK        \n        ,MD5( S.ID ) AS K_POS_CATALOG_OBJECT_DLHK      \n        --BUSINESS KEYS\n        ,V.ID AS K_POS_CATALOG_OBJECT_VARIATION_BK       \n        ,S.ID AS K_POS_CATALOG_OBJECT_BK\n        --DESCRIPTION\n        ,COALESCE(S.NAME, OLI.A_POS_ORDER_LINE_NAME) AS A_POS_PRODUCT_NAME\n        ,COALESCE(OLI.A_POS_ORDER_LINE_VARIATION_NAME, 'N/A') AS A_POS_PRODUCT_SUB_NAME\n        ,COALESCE(CAT.A_POS_PRODUCT_CATEGORY, 'No Category') AS A_POS_CATEGORY_NAME\n        , 'ORDER LINE ITEM VARIATION' AS A_POS_USAGE\n        ,S.DESCRIPTION AS A_POS_PRODUCT_DESCRIPTION\n        ,S.ABBREVIATION AS A_POS_PRODUCT_ABBREVIATION\n        ,S.PRODUCT_TYPE AS A_POS_PRODUCT_TYPE\n        ,V.NAME AS A_POS_PRODUCT_VARIATION_NAME\n        ,V.SKU AS A_POS_PRODUCT_SKU\n        ,V.UPC AS A_POS_PRODUCT_UPC\n        ,V.ORDINAL AS A_POS_ORDINAL_VARIATION \n        ,V.PRICING_TYPE AS A_POS_VARIATION_PRICING_TYPE\n        ,V.PRICE_MONEY_CURRENCY AS A_POS_VARIATION_PRICE_MONEY_CURRENCY\n        --METRIC\n        ,V.PRICE_MONEY_AMOUNT AS M_POS_PRICE_MONEY_AMOUNT\n        --metadata (MD)\n        , CURRENT_TIMESTAMP AS MD_LOAD_DTS        \n        , 'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\nFROM\n    source S\n    INNER JOIN source_variation AS V ON V.ITEM_ID = S.ID\n    INNER JOIN source_order_line_item AS OLI ON V.ID = OLI.K_POS_CATALOG_OBJECT_BK\n    LEFT JOIN source_category AS CAT ON CAT.K_POS_CATALOG_CATEGORY_BK = S.CATEGORY_ID\n    \n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_ITEM_VARIATION_STG"}, "model.snowflake_aicd.V_CATALOG_TAX_STG": {"raw_sql": "{{ config(\r\n    enabled=true,\r\n    materialized= 'view',\r\n    schema= 'SQUARE',\r\n    tags= [\"staging\", \"daily\"]\r\n    ) \r\n}}\r\n \r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','CATALOG_TAX')}}\r\n),\r\n\r\nrename as (\r\n\r\n\r\nSELECT DISTINCT\r\n    --MD5 KEYS    \r\n    MD5( TRIM(ID) ) AS K_POS_CATALOG_OBJECT_DLHK\r\n    --BUSINESS KEYS\r\n    ,ID AS K_POS_CATALOG_OBJECT_BK\r\n    --ATTRIBUTES\r\n    ,NAME AS A_POS_PRODUCT_NAME\r\n    ,COALESCE(NAME, 'N/A') AS A_POS_PRODUCT_SUB_NAME\r\n    ,INCLUSION_TYPE AS A_POS_TAX_INCLUSION_TYPE\r\n    ,PERCENTAGE AS A_POS_TAX_PERCENTAGE\r\n    ,'TAX' AS A_POS_CATEGORY_NAME\r\n    ,'CATALOG TAX' AS A_POS_USAGE\r\n    ,0.00::decimal(15,2) AS M_POS_ITEM_BASE_COST_AMT\r\n    ,0.00::decimal(15,2) AS M_POS_ITEM_BASE_PRICE_AMT\r\n    ,0.00::decimal(15,2) AS M_POS_PRICE_AMT\r\n    ,'USD' AS POS_PRICE_CCY\r\n    --BOOLEAN\r\n    ,ENABLED AS B_IS_ENABLED\r\n    --METADATA (MD)\r\n    ,CURRENT_TIMESTAMP AS MD_LOAD_DTS        \r\n    ,'{{invocation_id}}' AS MD_INTGR_ID\r\nFROM\r\n    source\r\n)\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.CATALOG_TAX"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "CATALOG", "V_CATALOG_TAX_STG"], "unique_id": "model.snowflake_aicd.V_CATALOG_TAX_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\CATALOG\\V_CATALOG_TAX_STG.sql", "original_file_path": "models\\staging\\CATALOG\\V_CATALOG_TAX_STG.sql", "name": "V_CATALOG_TAX_STG", "alias": "V_CATALOG_TAX_STG", "checksum": {"name": "sha256", "checksum": "c23599e1599e15702436276b700a62612dad4e9436d605edb75488a9a598f6cf"}, "tags": ["staging", "daily"], "refs": [], "sources": [["OLD_SQUARE", "CATALOG_TAX"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_TAX_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\CATALOG\\V_CATALOG_TAX_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "enabled": true, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n \n\nWITH source AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_TAX\"\n),\n\nrename as (\n\n\nSELECT DISTINCT\n    --MD5 KEYS    \n    MD5( TRIM(ID) ) AS K_POS_CATALOG_OBJECT_DLHK\n    --BUSINESS KEYS\n    ,ID AS K_POS_CATALOG_OBJECT_BK\n    --ATTRIBUTES\n    ,NAME AS A_POS_PRODUCT_NAME\n    ,COALESCE(NAME, 'N/A') AS A_POS_PRODUCT_SUB_NAME\n    ,INCLUSION_TYPE AS A_POS_TAX_INCLUSION_TYPE\n    ,PERCENTAGE AS A_POS_TAX_PERCENTAGE\n    ,'TAX' AS A_POS_CATEGORY_NAME\n    ,'CATALOG TAX' AS A_POS_USAGE\n    ,0.00::decimal(15,2) AS M_POS_ITEM_BASE_COST_AMT\n    ,0.00::decimal(15,2) AS M_POS_ITEM_BASE_PRICE_AMT\n    ,0.00::decimal(15,2) AS M_POS_PRICE_AMT\n    ,'USD' AS POS_PRICE_CCY\n    --BOOLEAN\n    ,ENABLED AS B_IS_ENABLED\n    --METADATA (MD)\n    ,CURRENT_TIMESTAMP AS MD_LOAD_DTS        \n    ,'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\nFROM\n    source\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_CATALOG_TAX_STG"}, "model.snowflake_aicd.V_CURRENCY_STG": {"raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nwith rename as (\r\n\r\nSELECT\r\n    MD5('USD') as K_CURRENCY_ID\r\n    , MD5('USD') AS K_CURRENCY_DLHK\r\n    , 'USD' AS K_CURRENCY_CODE\r\n    , 'USD' AS A_CURRENCY_NAME\r\n    , 'United States Dollars' as A_CURRENCY_NAME_FULL\r\n    ,'' AS MD_HASH_COL\r\n    , '{{invocation_id}}' AS MD_INTGR_ID\r\n\r\nUNION\r\n\r\nSELECT\r\n    MD5('EUR') as K_CURRENCY_ID\r\n    , MD5('EUR') AS K_CURRENCY_DLHK\r\n    , 'EUR' AS K_CURRENCY_CODE\r\n    , 'EUR' AS A_CURRENCY_NAME\r\n    , 'Euros' as A_CURRENCY_NAME_FULL\r\n    ,'' AS MD_HASH_COL\r\n    , '{{invocation_id}}' AS MD_INTGR_ID\r\n\r\n)\r\n\r\nselect * from rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "CURRENCY", "V_CURRENCY_STG"], "unique_id": "model.snowflake_aicd.V_CURRENCY_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\CURRENCY\\V_CURRENCY_STG.sql", "original_file_path": "models\\staging\\CURRENCY\\V_CURRENCY_STG.sql", "name": "V_CURRENCY_STG", "alias": "V_CURRENCY_STG", "checksum": {"name": "sha256", "checksum": "bbf29500a1cadaa8b41ea47825e23c8fde228fad49d32ee7fea998c60b9c2a42"}, "tags": ["staging", "daily"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\CURRENCY\\V_CURRENCY_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\CURRENCY\\V_CURRENCY_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\nwith rename as (\n\nSELECT\n    MD5('USD') as K_CURRENCY_ID\n    , MD5('USD') AS K_CURRENCY_DLHK\n    , 'USD' AS K_CURRENCY_CODE\n    , 'USD' AS A_CURRENCY_NAME\n    , 'United States Dollars' as A_CURRENCY_NAME_FULL\n    ,'' AS MD_HASH_COL\n    , 'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\n\nUNION\n\nSELECT\n    MD5('EUR') as K_CURRENCY_ID\n    , MD5('EUR') AS K_CURRENCY_DLHK\n    , 'EUR' AS K_CURRENCY_CODE\n    , 'EUR' AS A_CURRENCY_NAME\n    , 'Euros' as A_CURRENCY_NAME_FULL\n    ,'' AS MD_HASH_COL\n    , 'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\n\n)\n\nselect * from rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_CURRENCY_STG"}, "model.snowflake_aicd.V_CUSTOMER_STG": {"raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source AS (\r\n  SELECT \r\n  * \r\n  FROM  \t\r\n    {{source('OLD_SQUARE','CUSTOMER')}}\r\n),\r\nrename AS \r\n(   \r\nSELECT \r\n    --MD5 KEYS\r\n     MD5( TRIM(COALESCE(ID, '00000000000000000000000000000000')) ) AS K_POS_CUSTOMER_CUSTOMER_DLHK\r\n    --BUSINESS KEYS\r\n    ,ID AS A_POS_CUSTOMER_CUSTOMER_BK\r\n    --ATTRIBUTES\r\n    ,GIVEN_NAME AS A_POS_CUSTOMER_GIVEN_NAME\r\n    ,FAMILY_NAME AS A_POS_CUSTOMER_FAMILY_NAME\r\n    ,{{full_name('GIVEN_NAME', 'FAMILY_NAME')}} AS A_POS_CUSTOMER_FULL_NAME\r\n    ,EMAIL_ADDRESS AS A_POS_CUSTOMER_EMAIL\r\n    ,ADDRESS_ADDRESS_LINE_1 AS A_POS_CUSTOMER_ADDR_LINE_1\r\n    ,ADDRESS_ADDRESS_LINE_2 AS A_POS_CUSTOMER_ADDR_LINE_2\r\n    ,ADDRESS_ADDRESS_LINE_3 AS A_POS_CUSTOMER_ADDR_LINE_3\r\n    ,ADDRESS_LOCALITY AS A_POS_CUSTOMER_ADDR_LOCAL\r\n    ,ADDRESS_SUBLOCALITY AS A_POS_CUSTOMER_ADDR_SUBLOCAL\r\n    ,ADDRESS_POSTAL_CODE AS A_POS_CUSTOMER_ADDR_POSTAL_CODE\r\n    ,ADDRESS_COUNTRY AS A_POS_CUSTOMER_ADDR_COUNTRY\r\n    ,PHONE_NUMBER AS A_POS_CUSTOMER_PHONE_NUM\r\n    ,BIRTHDAY AS A_POS_CUSTOMER_BIRTHDAY\r\n    ,REFERENCE_ID AS A_POS_CUSTOMER_REFERENCE_ID  \r\n    , CASE WHEN EMAIL_ADDRESS IS NOT NULL THEN 'POSLOYAL' ELSE 'ANONYMOUS' END\r\n    AS A_POS_GB_CONSUMER_TYPE\r\n  FROM\r\n      source    \r\n)\r\n\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.snowflake_aicd.full_name", "macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.CUSTOMER"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "CUSTOMERS", "V_CUSTOMER_STG"], "unique_id": "model.snowflake_aicd.V_CUSTOMER_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\CUSTOMERS\\V_CUSTOMER_STG.sql", "original_file_path": "models\\staging\\CUSTOMERS\\V_CUSTOMER_STG.sql", "name": "V_CUSTOMER_STG", "alias": "V_CUSTOMER_STG", "checksum": {"name": "sha256", "checksum": "c6a17b203760241e687c5e1bc3dc6cf498947a125b9c62e5fa4df0ecbed97454"}, "tags": ["staging", "daily"], "refs": [], "sources": [["OLD_SQUARE", "CUSTOMER"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\CUSTOMERS\\V_CUSTOMER_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\CUSTOMERS\\V_CUSTOMER_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.OLD_SQUARE.\"CUSTOMER\"\n),\nrename AS \n(   \nSELECT \n    --MD5 KEYS\n     MD5( TRIM(COALESCE(ID, '00000000000000000000000000000000')) ) AS K_POS_CUSTOMER_CUSTOMER_DLHK\n    --BUSINESS KEYS\n    ,ID AS A_POS_CUSTOMER_CUSTOMER_BK\n    --ATTRIBUTES\n    ,GIVEN_NAME AS A_POS_CUSTOMER_GIVEN_NAME\n    ,FAMILY_NAME AS A_POS_CUSTOMER_FAMILY_NAME\n    ,\n    (GIVEN_NAME || ' ' || FAMILY_NAME)\n AS A_POS_CUSTOMER_FULL_NAME\n    ,EMAIL_ADDRESS AS A_POS_CUSTOMER_EMAIL\n    ,ADDRESS_ADDRESS_LINE_1 AS A_POS_CUSTOMER_ADDR_LINE_1\n    ,ADDRESS_ADDRESS_LINE_2 AS A_POS_CUSTOMER_ADDR_LINE_2\n    ,ADDRESS_ADDRESS_LINE_3 AS A_POS_CUSTOMER_ADDR_LINE_3\n    ,ADDRESS_LOCALITY AS A_POS_CUSTOMER_ADDR_LOCAL\n    ,ADDRESS_SUBLOCALITY AS A_POS_CUSTOMER_ADDR_SUBLOCAL\n    ,ADDRESS_POSTAL_CODE AS A_POS_CUSTOMER_ADDR_POSTAL_CODE\n    ,ADDRESS_COUNTRY AS A_POS_CUSTOMER_ADDR_COUNTRY\n    ,PHONE_NUMBER AS A_POS_CUSTOMER_PHONE_NUM\n    ,BIRTHDAY AS A_POS_CUSTOMER_BIRTHDAY\n    ,REFERENCE_ID AS A_POS_CUSTOMER_REFERENCE_ID  \n    , CASE WHEN EMAIL_ADDRESS IS NOT NULL THEN 'POSLOYAL' ELSE 'ANONYMOUS' END\n    AS A_POS_GB_CONSUMER_TYPE\n  FROM\n      source    \n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_CUSTOMER_STG"}, "model.snowflake_aicd.V_MERCHANT_LOCATION_STG": {"raw_sql": "{{ config(\r\n    enabled=true\r\n) }}\r\n\r\n\r\nwith rename as (\r\n\r\n  SELECT \r\n    --MD5 KEYS\r\n    MD5( TRIM(CAST(ID AS VARCHAR)) ) AS K_MERCH_LOC_DLHK\r\n    ,MD5( TRIM(CAST(MERCHANT_ID AS VARCHAR)) ) AS A_MERCHANT_ID_DLHK\r\n    --BUSINES KEYS\r\n    ,ID AS A_MERCH_LOC_ID_BK\r\n    ,MERCHANT_ID AS A_MERCHANT_ID_BK\r\n    --ATTRIBUTE\r\n    ,NAME AS A_MERCH_LOC_NAME   \r\n  \r\n    ,ADDRESS_ADDRESS_LINE_1 || ';' \r\n    || COALESCE(ADDRESS_ADDRESS_LINE_2, '') || ';' \r\n    || COALESCE(ADDRESS_ADDRESS_LINE_3, '') \r\n    || ADDRESS_LOCALITY || ',' || ADDRESS_ADMINISTRATIVE_DISTRICT_LEVEL_1 || ' '\r\n    || ADDRESS_POSTAL_CODE || ' ' || ADDRESS_COUNTRY\r\n    AS A_MERCH_LOC_ADDR_FULL\r\n    \r\n    ,ADDRESS_LOCALITY AS A_MERCH_LOC_LOCALITY\r\n    ,COUNTRY AS A_MERCH_LOC_COUNTRY\r\n    ,ADDRESS_POSTAL_CODE AS A_MERCH_LOC_POSTAL_CODE\r\n    ,BUSINESS_NAME AS A_MERCH_LOC_BIZ_NAME\r\n    ,TYPE AS A_MERCH_LOC_TYPE\r\n    ,STATUS AS A_MERCH_LOC_STATUS\r\n    ,CREATED_AT AS A_MERCH_LOC_CREATED_DTS\r\n\r\n        --//metadata (MD)\r\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\r\n    ,'{{invocation_id}}' AS MD_INTGR_ID\r\n\r\n  FROM \r\n    {{ source('OLD_SQUARE', 'LOCATION')}} A    \r\n\r\n)\r\n\r\nSELECT * FROM rename\r\n\r\n\r\nUNION\r\n\r\nSELECT \r\n  MD5('00000000000000000000000000000000'), MD5('00000000000000000000000000000000')\r\n  , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\r\n  , NULL, '{{invocation_id}}'\r\n--, TRUE, 1, NULL, NULL\r\n-- , NULL, NULL, MSRC.K_MERCHANT_SOURCE_DLHK\r\n-- FROM\r\n--     merchant_source MSRC WHERE MSRC._id = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.LOCATION"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT", "fqn": ["snowflake_aicd", "staging", "LOCATION", "V_MERCHANT_LOCATION_STG"], "unique_id": "model.snowflake_aicd.V_MERCHANT_LOCATION_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\LOCATION\\V_MERCHANT_LOCATION_STG.sql", "original_file_path": "models\\staging\\LOCATION\\V_MERCHANT_LOCATION_STG.sql", "name": "V_MERCHANT_LOCATION_STG", "alias": "V_MERCHANT_LOCATION_STG", "checksum": {"name": "sha256", "checksum": "de2dedda0ed978dfa28b6530866493cb9879c6feccf3f0f82d4e3b837c059caa"}, "tags": [], "refs": [], "sources": [["OLD_SQUARE", "LOCATION"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\LOCATION\\V_MERCHANT_LOCATION_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\LOCATION\\V_MERCHANT_LOCATION_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "enabled": true}, "created_at": 1636667515, "compiled_sql": "\n\n\nwith rename as (\n\n  SELECT \n    --MD5 KEYS\n    MD5( TRIM(CAST(ID AS VARCHAR)) ) AS K_MERCH_LOC_DLHK\n    ,MD5( TRIM(CAST(MERCHANT_ID AS VARCHAR)) ) AS A_MERCHANT_ID_DLHK\n    --BUSINES KEYS\n    ,ID AS A_MERCH_LOC_ID_BK\n    ,MERCHANT_ID AS A_MERCHANT_ID_BK\n    --ATTRIBUTE\n    ,NAME AS A_MERCH_LOC_NAME   \n  \n    ,ADDRESS_ADDRESS_LINE_1 || ';' \n    || COALESCE(ADDRESS_ADDRESS_LINE_2, '') || ';' \n    || COALESCE(ADDRESS_ADDRESS_LINE_3, '') \n    || ADDRESS_LOCALITY || ',' || ADDRESS_ADMINISTRATIVE_DISTRICT_LEVEL_1 || ' '\n    || ADDRESS_POSTAL_CODE || ' ' || ADDRESS_COUNTRY\n    AS A_MERCH_LOC_ADDR_FULL\n    \n    ,ADDRESS_LOCALITY AS A_MERCH_LOC_LOCALITY\n    ,COUNTRY AS A_MERCH_LOC_COUNTRY\n    ,ADDRESS_POSTAL_CODE AS A_MERCH_LOC_POSTAL_CODE\n    ,BUSINESS_NAME AS A_MERCH_LOC_BIZ_NAME\n    ,TYPE AS A_MERCH_LOC_TYPE\n    ,STATUS AS A_MERCH_LOC_STATUS\n    ,CREATED_AT AS A_MERCH_LOC_CREATED_DTS\n\n        --//metadata (MD)\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\n\n  FROM \n    DEVELOPER_SANDBOX.OLD_SQUARE.\"LOCATION\" A    \n\n)\n\nSELECT * FROM rename\n\n\nUNION\n\nSELECT \n  MD5('00000000000000000000000000000000'), MD5('00000000000000000000000000000000')\n  , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n  , NULL, 'a7015203-5729-48e2-8cc3-0fb4e008645a'\n--, TRUE, 1, NULL, NULL\n-- , NULL, NULL, MSRC.K_MERCHANT_SOURCE_DLHK\n-- FROM\n--     merchant_source MSRC WHERE MSRC._id = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT.V_MERCHANT_LOCATION_STG"}, "model.snowflake_aicd.V_ORDER_HEADER_STG": {"raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','ORDER')}} AS A\r\n),\r\nrename AS \r\n(\r\nSELECT \r\n--MD5 KEYS\r\n  MD5( TRIM(ID) ) AS K_POS_ORDER_DLHK\r\n  ,MD5( TRIM(COALESCE(LOCATION_ID,'00000000000000000000000000000000') )) AS K_POS_LOCATION_DLHK\r\n  ,MD5( TRIM(COALESCE(REFERENCE_ID,'00000000000000000000000000000000' ) )) AS K_POS_REFERENCE_DLHK\r\n  ,MD5( TRIM(COALESCE(CUSTOMER_ID,'00000000000000000000000000000000') )) AS K_POS_CUSTOMER_DLHK  \r\n  ,MD5( TRIM(COALESCE(TOTAL_MONEY_CURRENCY,'00000000000000000000000000000000') )) AS K_CURRENCY_DLHK  \r\n--BUSINESS KEYS\r\n  ,ID AS K_POS_ORDER_BK\r\n  ,LOCATION_ID AS K_POS_LOCATION_BK\r\n  ,CUSTOMER_ID AS K_POS_CUSTOMER_BK\r\n  ,REFERENCE_ID AS K_POS_REFERENCE_BK\r\n--TIMESTAMP FIELDS\r\n  ,CREATED_AT AS A_ORDER_CREATED_DTS\r\n  ,UPDATED_AT AS A_ORDER_UPDATED_DTS\r\n  ,CLOSED_AT AS A_ORDER_CLOSED_DTS  \r\n  \r\n--ATTRIBUTES AND METRICS\r\n  ,STATE AS A_ORDER_STATE\r\n  ,ORDER_SOURCE_NAME AS A_ORDER_SOURCE    \r\n  ,ROUND(NVL(NET_AMOUNT_TIP_MONEY_AMOUNT - RETURN_AMOUNT_TIP_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_NET_TIP_MONEY_AMT  \r\n  ,TOTAL_SERVICE_CHARGE_AMOUNT AS M_TOTAL_SERVICE_CHARGE_AMT  \r\n  ,ROUND(NVL(RETURN_AMOUNT_TOTAL_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_RETURN_TOTAL_AMT\r\n  ,ROUND(NVL(NET_AMOUNT_TOTAL_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_NET_TOTAL_AMT\r\n  ,ROUND(NVL(TOTAL_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_TOTAL_AMT\r\n  ,ROUND(NVL(TOTAL_TAX_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_TAX_TOTAL_AMT\r\n  ,ROUND(NVL(TOTAL_DISCOUNT_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_DISCOUNT_TOTAL_AMT\r\n  \r\n  --METADATA (MD)\r\n  ,CURRENT_TIMESTAMP as MD_LOAD_DTS\r\n  ,'{{invocation_id}}' AS MD_INTGR_ID\r\nFROM source\r\n)\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.ORDER"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "ORDERS", "V_ORDER_HEADER_STG"], "unique_id": "model.snowflake_aicd.V_ORDER_HEADER_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\ORDERS\\V_ORDER_HEADER_STG.sql", "original_file_path": "models\\staging\\ORDERS\\V_ORDER_HEADER_STG.sql", "name": "V_ORDER_HEADER_STG", "alias": "V_ORDER_HEADER_STG", "checksum": {"name": "sha256", "checksum": "7447a5fc5615854286dc746448dd8fa9af163bc96680cf0fe32113ff9005884b"}, "tags": ["staging", "daily"], "refs": [], "sources": [["OLD_SQUARE", "ORDER"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\ORDERS\\V_ORDER_HEADER_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\ORDERS\\V_ORDER_HEADER_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\nWITH source AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"ORDER\" AS A\n),\nrename AS \n(\nSELECT \n--MD5 KEYS\n  MD5( TRIM(ID) ) AS K_POS_ORDER_DLHK\n  ,MD5( TRIM(COALESCE(LOCATION_ID,'00000000000000000000000000000000') )) AS K_POS_LOCATION_DLHK\n  ,MD5( TRIM(COALESCE(REFERENCE_ID,'00000000000000000000000000000000' ) )) AS K_POS_REFERENCE_DLHK\n  ,MD5( TRIM(COALESCE(CUSTOMER_ID,'00000000000000000000000000000000') )) AS K_POS_CUSTOMER_DLHK  \n  ,MD5( TRIM(COALESCE(TOTAL_MONEY_CURRENCY,'00000000000000000000000000000000') )) AS K_CURRENCY_DLHK  \n--BUSINESS KEYS\n  ,ID AS K_POS_ORDER_BK\n  ,LOCATION_ID AS K_POS_LOCATION_BK\n  ,CUSTOMER_ID AS K_POS_CUSTOMER_BK\n  ,REFERENCE_ID AS K_POS_REFERENCE_BK\n--TIMESTAMP FIELDS\n  ,CREATED_AT AS A_ORDER_CREATED_DTS\n  ,UPDATED_AT AS A_ORDER_UPDATED_DTS\n  ,CLOSED_AT AS A_ORDER_CLOSED_DTS  \n  \n--ATTRIBUTES AND METRICS\n  ,STATE AS A_ORDER_STATE\n  ,ORDER_SOURCE_NAME AS A_ORDER_SOURCE    \n  ,ROUND(NVL(NET_AMOUNT_TIP_MONEY_AMOUNT - RETURN_AMOUNT_TIP_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_NET_TIP_MONEY_AMT  \n  ,TOTAL_SERVICE_CHARGE_AMOUNT AS M_TOTAL_SERVICE_CHARGE_AMT  \n  ,ROUND(NVL(RETURN_AMOUNT_TOTAL_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_RETURN_TOTAL_AMT\n  ,ROUND(NVL(NET_AMOUNT_TOTAL_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_NET_TOTAL_AMT\n  ,ROUND(NVL(TOTAL_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_TOTAL_AMT\n  ,ROUND(NVL(TOTAL_TAX_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_TAX_TOTAL_AMT\n  ,ROUND(NVL(TOTAL_DISCOUNT_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_DISCOUNT_TOTAL_AMT\n  \n  --METADATA (MD)\n  ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n  ,'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\nFROM source\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_HEADER_STG"}, "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG": {"raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','ORDER_LINE_ITEM_MODIFIER')}}\r\n),\r\n\r\nrename AS \r\n(\r\n SELECT\r\n        --MD5 KEYS\r\n        MD5( UID ) AS K_POS_ORDER_ITEM_MODIFIER_DLHK \r\n        ,MD5( TRIM(COALESCE(ORDER_ID, '00000000000000000000000000000000'))  ) AS K_POS_ORDER_DLHK\r\n        ,MD5( TRIM(COALESCE(ORDER_LINE_ITEM_ID, '00000000000000000000000000000000'))  ) AS K_POS_ORDER_LINE_ITEM_DLHK\r\n        ,MD5( TRIM(COALESCE(CATALOG_OBJECT_ID, '00000000000000000000000000000000')) ) AS K_POS_CATALOG_OBJECT_DLHK        \r\n        ,MD5( TRIM(COALESCE(TOTAL_PRICE_CURRENCY, '00000000000000000000000000000000')) ) AS K_CURRENCY_DLHK \r\n        --BUSINESS KEYS\r\n        ,UID AS K_POS_ORDER_ITEM_MODIFIER_BK        \r\n        ,ORDER_ID AS K_POS_ORDER_BK\r\n        ,ORDER_LINE_ITEM_ID AS K_POS_ORDER_LINE_ITEM_BK\r\n        ,CATALOG_OBJECT_ID AS K_POS_CATALOG_OBJECT_BK\r\n        --METRICS\r\n        ,ROUND(NVL(BASE_PRICE_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_BASE_PRICE_AMT\r\n        ,ROUND(NVL(TOTAL_PRICE_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_TOTAL_PRICE_AMOUNT         \r\n        --METADATA\r\n        , CURRENT_TIMESTAMP AS MD_LOAD_DTS\r\n        , '{{invocation_id}}' AS MD_INTGR_ID\r\nFROM source \r\n)\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM_MODIFIER"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "ORDERS", "V_ORDER_LINE_ITEM_MODIFIER_STG"], "unique_id": "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\ORDERS\\V_ORDER_LINE_ITEM_MODIFIER_STG.sql", "original_file_path": "models\\staging\\ORDERS\\V_ORDER_LINE_ITEM_MODIFIER_STG.sql", "name": "V_ORDER_LINE_ITEM_MODIFIER_STG", "alias": "V_ORDER_LINE_ITEM_MODIFIER_STG", "checksum": {"name": "sha256", "checksum": "6f394c43591451e8b5fa940945e78162208c342effbb9c5837ef6dfd6dc76c57"}, "tags": ["staging", "daily"], "refs": [], "sources": [["OLD_SQUARE", "ORDER_LINE_ITEM_MODIFIER"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\ORDERS\\V_ORDER_LINE_ITEM_MODIFIER_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\ORDERS\\V_ORDER_LINE_ITEM_MODIFIER_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\nWITH source AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"ORDER_LINE_ITEM_MODIFIER\"\n),\n\nrename AS \n(\n SELECT\n        --MD5 KEYS\n        MD5( UID ) AS K_POS_ORDER_ITEM_MODIFIER_DLHK \n        ,MD5( TRIM(COALESCE(ORDER_ID, '00000000000000000000000000000000'))  ) AS K_POS_ORDER_DLHK\n        ,MD5( TRIM(COALESCE(ORDER_LINE_ITEM_ID, '00000000000000000000000000000000'))  ) AS K_POS_ORDER_LINE_ITEM_DLHK\n        ,MD5( TRIM(COALESCE(CATALOG_OBJECT_ID, '00000000000000000000000000000000')) ) AS K_POS_CATALOG_OBJECT_DLHK        \n        ,MD5( TRIM(COALESCE(TOTAL_PRICE_CURRENCY, '00000000000000000000000000000000')) ) AS K_CURRENCY_DLHK \n        --BUSINESS KEYS\n        ,UID AS K_POS_ORDER_ITEM_MODIFIER_BK        \n        ,ORDER_ID AS K_POS_ORDER_BK\n        ,ORDER_LINE_ITEM_ID AS K_POS_ORDER_LINE_ITEM_BK\n        ,CATALOG_OBJECT_ID AS K_POS_CATALOG_OBJECT_BK\n        --METRICS\n        ,ROUND(NVL(BASE_PRICE_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_BASE_PRICE_AMT\n        ,ROUND(NVL(TOTAL_PRICE_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_TOTAL_PRICE_AMOUNT         \n        --METADATA\n        , CURRENT_TIMESTAMP AS MD_LOAD_DTS\n        , 'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\nFROM source \n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_MODIFIER_STG"}, "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG": {"raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','ORDER_LINE_ITEM')}}\r\n),\r\n\r\nrename AS \r\n(\r\n  SELECT \r\n--MD5 KEYS \r\n  MD5 (UID) AS K_POS_ORDER_LINE_DLHK\r\n  ,MD5 (TRIM(ORDER_ID)) AS K_POS_ORDER_DLHK\r\n  ,MD5( TRIM(COALESCE(CATALOG_OBJECT_ID, '00000000000000000000000000000000'))  ) AS K_POS_CATALOG_OBJECT_DLHK\r\n  ,MD5( TRIM(COALESCE(TOTAL_CURRENCY, '00000000000000000000000000000000')) ) AS K_CURRENCY_DLHK\r\n--BUSINESS KEYS\r\n  ,UID AS K_POS_ORDER_LINE_BK\r\n  ,ORDER_ID AS K_POS_ORDER_BK  \r\n  ,CATALOG_OBJECT_ID AS K_POS_CATALOG_OBJECT_BK\r\n--OTHER FIELDS\r\n  ,NAME AS A_POS_ORDER_LINE_NAME\r\n  ,QUANTITY AS M_POS_ORDER_LINE_QUANTITY\r\n  ,NOTE AS A_POS_ORDER_LINE_NOTE  \r\n  ,VARIATION_NAME AS A_POS_ORDER_LINE_VARIATION_NAME\r\n  ,ROUND(NVL(BASE_PRICE_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_BASE_PRICE_AMT\r\n  ,ROUND(NVL(GROSS_SALES_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_GROSS_SALES_AMT\r\n  ,ROUND(NVL(TOTAL_TAX_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_TOTAL_TAX_AMT\r\n  ,ROUND(NVL(TOTAL_DISCOUNT_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_TOTAL_DISCOUNT_AMT\r\n  ,ROUND(NVL(TOTAL_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_TOTAL_AMT\r\n  ,ROUND(NVL(GROSS_SALES_AMOUNT, 000)/100, 2) - ROUND(NVL(TOTAL_DISCOUNT_AMOUNT, 000)/100, 2) AS M_POS_ITEM_NET_AMT\r\nFROM source\r\n)\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "ORDERS", "V_ORDER_LINE_ITEM_STG"], "unique_id": "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\ORDERS\\V_ORDER_LINE_ITEM_STG.sql", "original_file_path": "models\\staging\\ORDERS\\V_ORDER_LINE_ITEM_STG.sql", "name": "V_ORDER_LINE_ITEM_STG", "alias": "V_ORDER_LINE_ITEM_STG", "checksum": {"name": "sha256", "checksum": "d5c7c1a8eb8e003b82a8315f0dc20f83502b94b11e1f0dd94062890fc6ede417"}, "tags": ["staging", "daily"], "refs": [], "sources": [["OLD_SQUARE", "ORDER_LINE_ITEM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\ORDERS\\V_ORDER_LINE_ITEM_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\ORDERS\\V_ORDER_LINE_ITEM_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\nWITH source AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"ORDER_LINE_ITEM\"\n),\n\nrename AS \n(\n  SELECT \n--MD5 KEYS \n  MD5 (UID) AS K_POS_ORDER_LINE_DLHK\n  ,MD5 (TRIM(ORDER_ID)) AS K_POS_ORDER_DLHK\n  ,MD5( TRIM(COALESCE(CATALOG_OBJECT_ID, '00000000000000000000000000000000'))  ) AS K_POS_CATALOG_OBJECT_DLHK\n  ,MD5( TRIM(COALESCE(TOTAL_CURRENCY, '00000000000000000000000000000000')) ) AS K_CURRENCY_DLHK\n--BUSINESS KEYS\n  ,UID AS K_POS_ORDER_LINE_BK\n  ,ORDER_ID AS K_POS_ORDER_BK  \n  ,CATALOG_OBJECT_ID AS K_POS_CATALOG_OBJECT_BK\n--OTHER FIELDS\n  ,NAME AS A_POS_ORDER_LINE_NAME\n  ,QUANTITY AS M_POS_ORDER_LINE_QUANTITY\n  ,NOTE AS A_POS_ORDER_LINE_NOTE  \n  ,VARIATION_NAME AS A_POS_ORDER_LINE_VARIATION_NAME\n  ,ROUND(NVL(BASE_PRICE_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_BASE_PRICE_AMT\n  ,ROUND(NVL(GROSS_SALES_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_GROSS_SALES_AMT\n  ,ROUND(NVL(TOTAL_TAX_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_TOTAL_TAX_AMT\n  ,ROUND(NVL(TOTAL_DISCOUNT_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_TOTAL_DISCOUNT_AMT\n  ,ROUND(NVL(TOTAL_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_ORDER_LINE_TOTAL_AMT\n  ,ROUND(NVL(GROSS_SALES_AMOUNT, 000)/100, 2) - ROUND(NVL(TOTAL_DISCOUNT_AMOUNT, 000)/100, 2) AS M_POS_ITEM_NET_AMT\nFROM source\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_ORDER_LINE_ITEM_STG"}, "model.snowflake_aicd.V_PAYMENT_STG": {"raw_sql": "{{ config (\r\n  materialized= 'view',\r\n  schema= 'SQUARE',\r\n  tags= [\"staging\", \"daily\"]\r\n)\r\n}}\r\n\r\nWITH source AS (\r\n  SELECT * FROM  {{source('OLD_SQUARE','PAYMENT')}}\r\n),\r\n\r\nrename AS \r\n(\r\n SELECT\r\n        --MD5 KEYS\r\n        MD5( ID ) AS K_POS_PAYMENT_DLHK \r\n        ,MD5( TRIM(COALESCE(LOCATION_ID, '00000000000000000000000000000000'))  ) AS K_POS_MERCH_LOC_DLHK\r\n        ,MD5( TRIM(COALESCE(ORDER_ID, '00000000000000000000000000000000'))  ) AS K_POS_ORDER_DLHK\r\n        ,MD5( TRIM(COALESCE(CUSTOMER_ID, '00000000000000000000000000000000')) ) AS K_POS_CUSTOMER_DLHK \r\n        ,MD5( TRIM(COALESCE(TOTAL_MONEY_CURRENCY, '00000000000000000000000000000000')) ) AS K_CURRENCY_DLHK\r\n        ,MD5 (TRIM(COALESCE(EMPLOYEE_ID,'00000000000000000000000000000000'))) AS K_EMPLOYEE_DLHK\r\n        ,MD5(TO_VARCHAR(CREATED_AT::date, 'YYYYMMDD')) AS K_DATE_DLHK -- need to rereference this to a RawDV DLHVID identifier that has 32 charts in the date_d dimension        \r\n        ,TO_VARCHAR(CREATED_AT::date, 'YYYYMMDD')::int AS K_DATE_ID\r\n        --BUSINESS KEYS\r\n        ,ID AS K_POS_PAYMENT_BK\r\n        ,LOCATION_ID AS K_POS_PAYMENT_LOCATION_BK\r\n        ,ORDER_ID AS K_POS_PAYMENT_ORDER_BK\r\n        ,CUSTOMER_ID AS K_POS_PAYMENT_CUSTOMER_BK\r\n        ,EMPLOYEE_ID AS K_EMPLOYEE_BK\r\n        --METRICS\r\n        ,ROUND(NVL(AMOUNT_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_MONEY_AMT\r\n        ,ROUND(NVL(APP_FEE_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_APP_FEE_AMT\r\n        ,ROUND(NVL(REFUNDED_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_REFUND_MONEY_AMT\r\n        ,ROUND(NVL(TIP_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_TIP_AMT\r\n        ,ROUND(NVL(TOTAL_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_TOTAL_AMT  --will match the Order table TOTAL_MONEY_AMOUNT metric\r\n        --DESCRIPTION AND DATE FIELDS\r\n        ,TOTAL_MONEY_CURRENCY AS A_POS_PAYMENT_CURRENCY\r\n        ,RECEIPT_NUMBER AS A_POS_PAYMENT_RECEIPT_NUMBER\r\n        ,RECEIPT_URL AS A_POS_PAYMENT_RECEIPT_URL\r\n        ,SOURCE_TYPE AS A_POS_PAYMENT_SOURCE_TYPE\r\n        ,STATUS AS A_POS_PAYMENT_STATUS\r\n        ,CREATED_AT AS A_POS_PAYMENT_CREATED_DTS\r\n        ,UPDATED_AT AS A_POS_PAYMENT_UPDATED_DTS   \r\n        --METADATA\r\n        , CURRENT_TIMESTAMP AS MD_LOAD_DTS\r\n        , MD5(CONCAT(\r\n                IFNULL(NULLIF(TRIM(CAST(ID AS VARCHAR)), ''), '^^'), '||',\r\n                IFNULL(NULLIF(TRIM(CAST(CUSTOMER_ID AS VARCHAR)), ''), '^^') )) AS MD_HASH_COL\r\n        , '{{invocation_id}}' AS MD_INTGR_ID\r\nFROM source \r\n)\r\n\r\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.snowflake_aicd.OLD_SQUARE.PAYMENT"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "SQUARE", "database": null, "tags": ["staging", "daily"], "full_refresh": null, "snowflake_aicd": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_SQUARE", "fqn": ["snowflake_aicd", "staging", "PAYMENT", "V_PAYMENT_STG"], "unique_id": "model.snowflake_aicd.V_PAYMENT_STG", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "staging\\PAYMENT\\V_PAYMENT_STG.sql", "original_file_path": "models\\staging\\PAYMENT\\V_PAYMENT_STG.sql", "name": "V_PAYMENT_STG", "alias": "V_PAYMENT_STG", "checksum": {"name": "sha256", "checksum": "82271379ba86e4a3ac01757ad06ebce5b9fa27ef0ff2fcc0c6a053dfd1bfa512"}, "tags": ["staging", "daily"], "refs": [], "sources": [["OLD_SQUARE", "PAYMENT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\snowflake_aicd\\models\\staging\\PAYMENT\\V_PAYMENT_STG.sql", "build_path": "target\\run\\snowflake_aicd\\models\\staging\\PAYMENT\\V_PAYMENT_STG.sql", "deferred": false, "unrendered_config": {"snowflake_aicd": null, "materialized": "view", "schema": "SQUARE", "tags": ["staging", "daily"]}, "created_at": 1636667515, "compiled_sql": "\n\nWITH source AS (\n  SELECT * FROM  DEVELOPER_SANDBOX.OLD_SQUARE.\"PAYMENT\"\n),\n\nrename AS \n(\n SELECT\n        --MD5 KEYS\n        MD5( ID ) AS K_POS_PAYMENT_DLHK \n        ,MD5( TRIM(COALESCE(LOCATION_ID, '00000000000000000000000000000000'))  ) AS K_POS_MERCH_LOC_DLHK\n        ,MD5( TRIM(COALESCE(ORDER_ID, '00000000000000000000000000000000'))  ) AS K_POS_ORDER_DLHK\n        ,MD5( TRIM(COALESCE(CUSTOMER_ID, '00000000000000000000000000000000')) ) AS K_POS_CUSTOMER_DLHK \n        ,MD5( TRIM(COALESCE(TOTAL_MONEY_CURRENCY, '00000000000000000000000000000000')) ) AS K_CURRENCY_DLHK\n        ,MD5 (TRIM(COALESCE(EMPLOYEE_ID,'00000000000000000000000000000000'))) AS K_EMPLOYEE_DLHK\n        ,MD5(TO_VARCHAR(CREATED_AT::date, 'YYYYMMDD')) AS K_DATE_DLHK -- need to rereference this to a RawDV DLHVID identifier that has 32 charts in the date_d dimension        \n        ,TO_VARCHAR(CREATED_AT::date, 'YYYYMMDD')::int AS K_DATE_ID\n        --BUSINESS KEYS\n        ,ID AS K_POS_PAYMENT_BK\n        ,LOCATION_ID AS K_POS_PAYMENT_LOCATION_BK\n        ,ORDER_ID AS K_POS_PAYMENT_ORDER_BK\n        ,CUSTOMER_ID AS K_POS_PAYMENT_CUSTOMER_BK\n        ,EMPLOYEE_ID AS K_EMPLOYEE_BK\n        --METRICS\n        ,ROUND(NVL(AMOUNT_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_MONEY_AMT\n        ,ROUND(NVL(APP_FEE_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_APP_FEE_AMT\n        ,ROUND(NVL(REFUNDED_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_REFUND_MONEY_AMT\n        ,ROUND(NVL(TIP_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_TIP_AMT\n        ,ROUND(NVL(TOTAL_MONEY_AMOUNT, 000)/100, 2)::decimal(15,2) AS M_PAYMENT_TOTAL_AMT  --will match the Order table TOTAL_MONEY_AMOUNT metric\n        --DESCRIPTION AND DATE FIELDS\n        ,TOTAL_MONEY_CURRENCY AS A_POS_PAYMENT_CURRENCY\n        ,RECEIPT_NUMBER AS A_POS_PAYMENT_RECEIPT_NUMBER\n        ,RECEIPT_URL AS A_POS_PAYMENT_RECEIPT_URL\n        ,SOURCE_TYPE AS A_POS_PAYMENT_SOURCE_TYPE\n        ,STATUS AS A_POS_PAYMENT_STATUS\n        ,CREATED_AT AS A_POS_PAYMENT_CREATED_DTS\n        ,UPDATED_AT AS A_POS_PAYMENT_UPDATED_DTS   \n        --METADATA\n        , CURRENT_TIMESTAMP AS MD_LOAD_DTS\n        , MD5(CONCAT(\n                IFNULL(NULLIF(TRIM(CAST(ID AS VARCHAR)), ''), '^^'), '||',\n                IFNULL(NULLIF(TRIM(CAST(CUSTOMER_ID AS VARCHAR)), ''), '^^') )) AS MD_HASH_COL\n        , 'a7015203-5729-48e2-8cc3-0fb4e008645a' AS MD_INTGR_ID\nFROM source \n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_SQUARE.V_PAYMENT_STG"}, "test.snowflake_aicd.unique_W_CUSTOMERS_D_CUSTOMER_ID.b108aaf154": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "CUSTOMER_ID", "model": "{% if config.get('where') %}(select * from {{ ref('W_CUSTOMERS_D') }} where {{config.get('where')}}) W_CUSTOMERS_D{% else %}{{ ref('W_CUSTOMERS_D') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_aicd.W_CUSTOMERS_D"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_CUSTOMERS_D_CUSTOMER_ID"], "unique_id": "test.snowflake_aicd.unique_W_CUSTOMERS_D_CUSTOMER_ID.b108aaf154", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "schema_test\\unique_W_CUSTOMERS_D_CUSTOMER_ID.sql", "original_file_path": "models\\schema.yml", "name": "unique_W_CUSTOMERS_D_CUSTOMER_ID", "alias": "unique_W_CUSTOMERS_D_CUSTOMER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CUSTOMERS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636667515, "column_name": "CUSTOMER_ID"}, "test.snowflake_aicd.not_null_W_CUSTOMERS_D_CUSTOMER_ID.2530dacf2b": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUSTOMER_ID", "model": "{% if config.get('where') %}(select * from {{ ref('W_CUSTOMERS_D') }} where {{config.get('where')}}) W_CUSTOMERS_D{% else %}{{ ref('W_CUSTOMERS_D') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_aicd.W_CUSTOMERS_D"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_CUSTOMERS_D_CUSTOMER_ID"], "unique_id": "test.snowflake_aicd.not_null_W_CUSTOMERS_D_CUSTOMER_ID.2530dacf2b", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "schema_test\\not_null_W_CUSTOMERS_D_CUSTOMER_ID.sql", "original_file_path": "models\\schema.yml", "name": "not_null_W_CUSTOMERS_D_CUSTOMER_ID", "alias": "not_null_W_CUSTOMERS_D_CUSTOMER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CUSTOMERS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636667515, "column_name": "CUSTOMER_ID"}, "test.snowflake_aicd.not_null_W_ORDERS_F_CREATED_AT.b294974555": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATED_AT", "model": "{% if config.get('where') %}(select * from {{ ref('W_ORDERS_F') }} where {{config.get('where')}}) W_ORDERS_F{% else %}{{ ref('W_ORDERS_F') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_aicd.W_ORDERS_F"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_ORDERS_F_CREATED_AT"], "unique_id": "test.snowflake_aicd.not_null_W_ORDERS_F_CREATED_AT.b294974555", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "schema_test\\not_null_W_ORDERS_F_CREATED_AT.sql", "original_file_path": "models\\schema.yml", "name": "not_null_W_ORDERS_F_CREATED_AT", "alias": "not_null_W_ORDERS_F_CREATED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ORDERS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636667515, "column_name": "CREATED_AT"}, "test.snowflake_aicd.unique_W_ORDERS_F_ORDER_ID.cace593c0d": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ORDER_ID", "model": "{% if config.get('where') %}(select * from {{ ref('W_ORDERS_F') }} where {{config.get('where')}}) W_ORDERS_F{% else %}{{ ref('W_ORDERS_F') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowflake_aicd.W_ORDERS_F"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "unique_W_ORDERS_F_ORDER_ID"], "unique_id": "test.snowflake_aicd.unique_W_ORDERS_F_ORDER_ID.cace593c0d", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "schema_test\\unique_W_ORDERS_F_ORDER_ID.sql", "original_file_path": "models\\schema.yml", "name": "unique_W_ORDERS_F_ORDER_ID", "alias": "unique_W_ORDERS_F_ORDER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ORDERS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636667515, "column_name": "ORDER_ID"}, "test.snowflake_aicd.not_null_W_ORDERS_F_ORDER_ID.d8b0e21e5d": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORDER_ID", "model": "{% if config.get('where') %}(select * from {{ ref('W_ORDERS_F') }} where {{config.get('where')}}) W_ORDERS_F{% else %}{{ ref('W_ORDERS_F') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowflake_aicd.W_ORDERS_F"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["snowflake_aicd", "schema_test", "not_null_W_ORDERS_F_ORDER_ID"], "unique_id": "test.snowflake_aicd.not_null_W_ORDERS_F_ORDER_ID.d8b0e21e5d", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "schema_test\\not_null_W_ORDERS_F_ORDER_ID.sql", "original_file_path": "models\\schema.yml", "name": "not_null_W_ORDERS_F_ORDER_ID", "alias": "not_null_W_ORDERS_F_ORDER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ORDERS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1636667515, "column_name": "ORDER_ID"}}, "sources": {"source.snowflake_aicd.OLD_SQUARE.CUSTOMER": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "CUSTOMER"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.CUSTOMER", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "CUSTOMER", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "CUSTOMER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"CUSTOMER\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.ORDER_DISCOUNT": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "ORDER_DISCOUNT"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.ORDER_DISCOUNT", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "ORDER_DISCOUNT", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "ORDER_DISCOUNT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"ORDER_DISCOUNT\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "ORDER_LINE_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "ORDER_LINE_ITEM", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "ORDER_LINE_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"ORDER_LINE_ITEM\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.ORDER": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "ORDER"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.ORDER", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "ORDER", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "ORDER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"ORDER\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.PAYMENT": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "PAYMENT"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.PAYMENT", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "PAYMENT", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "PAYMENT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"PAYMENT\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "CATALOG_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "CATALOG_ITEM", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "CATALOG_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_ITEM\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM_VARIATION": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "CATALOG_ITEM_VARIATION"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM_VARIATION", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "CATALOG_ITEM_VARIATION", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "CATALOG_ITEM_VARIATION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_ITEM_VARIATION\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.CATALOG_CATEGORY": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "CATALOG_CATEGORY"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.CATALOG_CATEGORY", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "CATALOG_CATEGORY", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "CATALOG_CATEGORY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_CATEGORY\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.CATALOG_MODIFIER": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "CATALOG_MODIFIER"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.CATALOG_MODIFIER", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "CATALOG_MODIFIER", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "CATALOG_MODIFIER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_MODIFIER\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.CATALOG_TAX": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "CATALOG_TAX"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.CATALOG_TAX", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "CATALOG_TAX", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "CATALOG_TAX", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_TAX\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.CATALOG_DISCOUNT": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "CATALOG_DISCOUNT"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.CATALOG_DISCOUNT", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "CATALOG_DISCOUNT", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "CATALOG_DISCOUNT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"CATALOG_DISCOUNT\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM_MODIFIER": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "ORDER_LINE_ITEM_MODIFIER"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM_MODIFIER", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "ORDER_LINE_ITEM_MODIFIER", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "ORDER_LINE_ITEM_MODIFIER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"ORDER_LINE_ITEM_MODIFIER\"", "created_at": 1636667515}, "source.snowflake_aicd.OLD_SQUARE.LOCATION": {"fqn": ["snowflake_aicd", "sources", "OLD_SQUARE", "LOCATION"], "database": "DEVELOPER_SANDBOX", "schema": "OLD_SQUARE", "unique_id": "source.snowflake_aicd.OLD_SQUARE.LOCATION", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "models\\sources\\sources.yml", "original_file_path": "models\\sources\\sources.yml", "name": "LOCATION", "source_name": "OLD_SQUARE", "source_description": "", "loader": "", "identifier": "LOCATION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.OLD_SQUARE.\"LOCATION\"", "created_at": 1636667515}}, "macros": {"macro.snowflake_aicd.full_name": {"unique_id": "macro.snowflake_aicd.full_name", "package_name": "snowflake_aicd", "root_path": "C:\\Users\\Guilherme Alcantara\\OneDrive\\brf consulting\\dbt\\square_dbt", "path": "macros\\common.sql", "original_file_path": "macros\\common.sql", "name": "full_name", "macro_sql": "{% macro full_name(firstName, lastName) %}\r\n    ({{firstName}} || ' ' || {{lastName}})\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n\n  -- setup\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        );\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_alias.sql", "original_file_path": "macros\\etc\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\is_incremental.sql", "original_file_path": "macros\\etc\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\query.sql", "original_file_path": "macros\\etc\\query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% do adapter.drop_relation(intermediate_relation) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\table\\table.sql", "original_file_path": "macros\\materializations\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', macro_namespace = 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\view.sql", "original_file_path": "macros\\materializations\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1636667514}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "c:\\programdata\\anaconda3\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.snowflake_aicd.W_CATALOG_ITEM_D": ["model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG"], "model.snowflake_aicd.W_CURRENCY_D": ["model.snowflake_aicd.V_CURRENCY_STG"], "model.snowflake_aicd.W_CUSTOMERS_D": ["model.snowflake_aicd.V_CUSTOMER_STG"], "model.snowflake_aicd.W_MERCHANT_LOCATION_D": ["model.snowflake_aicd.V_MERCHANT_LOCATION_STG"], "model.snowflake_aicd.W_ORDERS_F": ["model.snowflake_aicd.V_ORDER_HEADER_STG", "model.snowflake_aicd.V_ORDER_HEADER_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG"], "model.snowflake_aicd.W_PAYMENTS_F": ["model.snowflake_aicd.V_PAYMENT_STG"], "model.snowflake_aicd.V_CATALOG_CATEGORY_STG": ["source.snowflake_aicd.OLD_SQUARE.CATALOG_CATEGORY"], "model.snowflake_aicd.V_CATALOG_DISCOUNT": ["source.snowflake_aicd.OLD_SQUARE.CATALOG_DISCOUNT"], "model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG": ["model.snowflake_aicd.V_CATALOG_CATEGORY_STG", "model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG", "source.snowflake_aicd.OLD_SQUARE.CATALOG_MODIFIER"], "model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG": ["model.snowflake_aicd.V_CATALOG_CATEGORY_STG", "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG", "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM", "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM_VARIATION"], "model.snowflake_aicd.V_CATALOG_TAX_STG": ["source.snowflake_aicd.OLD_SQUARE.CATALOG_TAX"], "model.snowflake_aicd.V_CURRENCY_STG": [], "model.snowflake_aicd.V_CUSTOMER_STG": ["source.snowflake_aicd.OLD_SQUARE.CUSTOMER"], "model.snowflake_aicd.V_MERCHANT_LOCATION_STG": ["source.snowflake_aicd.OLD_SQUARE.LOCATION"], "model.snowflake_aicd.V_ORDER_HEADER_STG": ["source.snowflake_aicd.OLD_SQUARE.ORDER"], "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG": ["source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM_MODIFIER"], "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG": ["source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM"], "model.snowflake_aicd.V_PAYMENT_STG": ["source.snowflake_aicd.OLD_SQUARE.PAYMENT"], "test.snowflake_aicd.unique_W_CUSTOMERS_D_CUSTOMER_ID.b108aaf154": ["model.snowflake_aicd.W_CUSTOMERS_D"], "test.snowflake_aicd.not_null_W_CUSTOMERS_D_CUSTOMER_ID.2530dacf2b": ["model.snowflake_aicd.W_CUSTOMERS_D"], "test.snowflake_aicd.not_null_W_ORDERS_F_CREATED_AT.b294974555": ["model.snowflake_aicd.W_ORDERS_F"], "test.snowflake_aicd.unique_W_ORDERS_F_ORDER_ID.cace593c0d": ["model.snowflake_aicd.W_ORDERS_F"], "test.snowflake_aicd.not_null_W_ORDERS_F_ORDER_ID.d8b0e21e5d": ["model.snowflake_aicd.W_ORDERS_F"], "source.snowflake_aicd.OLD_SQUARE.CUSTOMER": [], "source.snowflake_aicd.OLD_SQUARE.ORDER_DISCOUNT": [], "source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM": [], "source.snowflake_aicd.OLD_SQUARE.ORDER": [], "source.snowflake_aicd.OLD_SQUARE.PAYMENT": [], "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM": [], "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM_VARIATION": [], "source.snowflake_aicd.OLD_SQUARE.CATALOG_CATEGORY": [], "source.snowflake_aicd.OLD_SQUARE.CATALOG_MODIFIER": [], "source.snowflake_aicd.OLD_SQUARE.CATALOG_TAX": [], "source.snowflake_aicd.OLD_SQUARE.CATALOG_DISCOUNT": [], "source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM_MODIFIER": [], "source.snowflake_aicd.OLD_SQUARE.LOCATION": []}, "child_map": {"model.snowflake_aicd.W_CATALOG_ITEM_D": [], "model.snowflake_aicd.W_CURRENCY_D": [], "model.snowflake_aicd.W_CUSTOMERS_D": ["test.snowflake_aicd.not_null_W_CUSTOMERS_D_CUSTOMER_ID.2530dacf2b", "test.snowflake_aicd.unique_W_CUSTOMERS_D_CUSTOMER_ID.b108aaf154"], "model.snowflake_aicd.W_MERCHANT_LOCATION_D": [], "model.snowflake_aicd.W_ORDERS_F": ["test.snowflake_aicd.not_null_W_ORDERS_F_CREATED_AT.b294974555", "test.snowflake_aicd.not_null_W_ORDERS_F_ORDER_ID.d8b0e21e5d", "test.snowflake_aicd.unique_W_ORDERS_F_ORDER_ID.cace593c0d"], "model.snowflake_aicd.W_PAYMENTS_F": [], "model.snowflake_aicd.V_CATALOG_CATEGORY_STG": ["model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG"], "model.snowflake_aicd.V_CATALOG_DISCOUNT": [], "model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG": ["model.snowflake_aicd.W_CATALOG_ITEM_D"], "model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG": ["model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG", "model.snowflake_aicd.W_CATALOG_ITEM_D"], "model.snowflake_aicd.V_CATALOG_TAX_STG": [], "model.snowflake_aicd.V_CURRENCY_STG": ["model.snowflake_aicd.W_CURRENCY_D"], "model.snowflake_aicd.V_CUSTOMER_STG": ["model.snowflake_aicd.W_CUSTOMERS_D"], "model.snowflake_aicd.V_MERCHANT_LOCATION_STG": ["model.snowflake_aicd.W_MERCHANT_LOCATION_D"], "model.snowflake_aicd.V_ORDER_HEADER_STG": ["model.snowflake_aicd.W_ORDERS_F", "model.snowflake_aicd.W_ORDERS_F"], "model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG": ["model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG", "model.snowflake_aicd.W_ORDERS_F", "model.snowflake_aicd.W_ORDERS_F", "model.snowflake_aicd.W_ORDERS_F"], "model.snowflake_aicd.V_ORDER_LINE_ITEM_STG": ["model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG", "model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG", "model.snowflake_aicd.W_ORDERS_F", "model.snowflake_aicd.W_ORDERS_F", "model.snowflake_aicd.W_ORDERS_F"], "model.snowflake_aicd.V_PAYMENT_STG": ["model.snowflake_aicd.W_PAYMENTS_F"], "test.snowflake_aicd.unique_W_CUSTOMERS_D_CUSTOMER_ID.b108aaf154": [], "test.snowflake_aicd.not_null_W_CUSTOMERS_D_CUSTOMER_ID.2530dacf2b": [], "test.snowflake_aicd.not_null_W_ORDERS_F_CREATED_AT.b294974555": [], "test.snowflake_aicd.unique_W_ORDERS_F_ORDER_ID.cace593c0d": [], "test.snowflake_aicd.not_null_W_ORDERS_F_ORDER_ID.d8b0e21e5d": [], "source.snowflake_aicd.OLD_SQUARE.CUSTOMER": ["model.snowflake_aicd.V_CUSTOMER_STG"], "source.snowflake_aicd.OLD_SQUARE.ORDER_DISCOUNT": [], "source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM": ["model.snowflake_aicd.V_ORDER_LINE_ITEM_STG"], "source.snowflake_aicd.OLD_SQUARE.ORDER": ["model.snowflake_aicd.V_ORDER_HEADER_STG"], "source.snowflake_aicd.OLD_SQUARE.PAYMENT": ["model.snowflake_aicd.V_PAYMENT_STG"], "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM": ["model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG"], "source.snowflake_aicd.OLD_SQUARE.CATALOG_ITEM_VARIATION": ["model.snowflake_aicd.V_CATALOG_ITEM_VARIATION_STG"], "source.snowflake_aicd.OLD_SQUARE.CATALOG_CATEGORY": ["model.snowflake_aicd.V_CATALOG_CATEGORY_STG"], "source.snowflake_aicd.OLD_SQUARE.CATALOG_MODIFIER": ["model.snowflake_aicd.V_CATALOG_ITEM_MODIFIER_STG"], "source.snowflake_aicd.OLD_SQUARE.CATALOG_TAX": ["model.snowflake_aicd.V_CATALOG_TAX_STG"], "source.snowflake_aicd.OLD_SQUARE.CATALOG_DISCOUNT": ["model.snowflake_aicd.V_CATALOG_DISCOUNT"], "source.snowflake_aicd.OLD_SQUARE.ORDER_LINE_ITEM_MODIFIER": ["model.snowflake_aicd.V_ORDER_LINE_ITEM_MODIFIER_STG"], "source.snowflake_aicd.OLD_SQUARE.LOCATION": ["model.snowflake_aicd.V_MERCHANT_LOCATION_STG"]}}